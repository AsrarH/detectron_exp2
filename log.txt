[01/09 11:24:58] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:25:01] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:25:01] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:25:01] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:25:01] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:25:01] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:25:01] d2.utils.env INFO: Using a generated random seed 4242013
[01/09 11:25:02] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:25:02] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:25:06] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:25:06] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:25:06] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:25:06] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:25:06] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:25:06] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:25:09] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:25:09] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:25:09] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:25:09] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:25:09] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:25:10] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:25:10] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:25:10] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:25:10] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:25:10] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:25:10] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:25:10] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:25:10] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:26:52] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:26:55] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:26:55] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:26:55] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:26:55] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:26:55] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:26:55] d2.utils.env INFO: Using a generated random seed 58392072
[01/09 11:26:56] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:26:56] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:26:59] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:26:59] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:26:59] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:27:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:27:03] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:27:04] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:27:07] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:27:07] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:27:07] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:27:07] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:27:07] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:27:08] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:27:08] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:27:08] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:27:08] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:27:08] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:27:08] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:27:08] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:27:08] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:28:48] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:28:50] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:28:50] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:28:50] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:28:50] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:28:50] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:28:51] d2.utils.env INFO: Using a generated random seed 53881217
[01/09 11:28:51] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:28:51] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:28:54] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:28:54] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:28:54] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:28:59] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:28:59] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:29:00] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:29:03] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:29:03] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:29:03] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:29:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:29:03] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:29:03] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:29:03] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:29:03] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:29:03] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:29:03] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:29:03] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:29:03] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:29:03] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:31:13] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:31:16] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:31:16] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:31:16] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:31:16] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:31:16] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:31:16] d2.utils.env INFO: Using a generated random seed 19270833
[01/09 11:31:16] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:31:17] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:31:20] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:31:20] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:31:20] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:31:20] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:31:20] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:31:21] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:31:24] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:31:24] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:31:24] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:31:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:31:24] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:31:24] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:31:25] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:31:25] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:31:25] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:31:25] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:31:25] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:31:25] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:31:25] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:32:51] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:32:54] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:32:54] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:32:54] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:32:54] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:32:54] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:32:54] d2.utils.env INFO: Using a generated random seed 57223791
[01/09 11:32:54] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:32:55] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:32:58] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:32:58] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:32:58] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:32:58] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:32:58] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:32:59] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:33:02] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:33:02] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:33:02] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:33:02] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:33:02] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:33:02] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:33:03] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:33:03] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:33:03] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:33:03] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:33:03] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:33:03] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:33:03] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:34:31] detectron2 INFO: Rank of current process: 0. World size: 6
[01/09 11:34:34] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:34:34] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:34:34] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:34:34] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:34:34] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:34:34] d2.utils.env INFO: Using a generated random seed 37571162
[01/09 11:34:35] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:34:35] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:34:38] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:34:38] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:34:38] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:34:38] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:34:38] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:34:39] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:34:42] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:34:42] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:34:42] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:34:42] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:34:42] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:34:42] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:34:42] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:34:42] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:34:42] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:34:42] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:34:42] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:34:42] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:34:42] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 11:41:35] detectron2 INFO: Rank of current process: 0. World size: 4
[01/09 11:41:37] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 11:41:37] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=4, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 11:41:37] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 11:41:37] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 11:41:37] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 11:41:38] d2.utils.env INFO: Using a generated random seed 41201851
[01/09 11:41:38] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 11:41:38] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 11:41:41] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:41:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:41:41] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:41:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:41:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:41:42] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:41:45] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 11:41:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 11:41:45] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 11:41:45] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 11:41:45] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 11:41:45] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 11:41:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 11:41:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 11:41:45] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 11:41:45] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 11:41:45] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 11:41:45] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 11:41:45] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:01:55] detectron2 INFO: Rank of current process: 0. World size: 4
[01/09 12:01:56] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:01:56] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=4, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:01:56] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:01:56] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:01:56] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:01:57] d2.utils.env INFO: Using a generated random seed 60521505
[01/09 12:01:57] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:01:57] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:02:00] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:02:00] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:02:00] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:02:01] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:02:01] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:02:01] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:02:04] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:02:04] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:02:04] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:02:04] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:02:04] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:02:04] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:02:05] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:02:05] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:02:05] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:02:05] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:02:05] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:02:05] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:02:05] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:07:31] detectron2 INFO: Rank of current process: 0. World size: 4
[01/09 12:07:33] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:07:33] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=4, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:07:33] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:07:33] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:07:33] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:07:33] d2.utils.env INFO: Using a generated random seed 37350036
[01/09 12:07:34] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:07:34] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:07:37] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:07:37] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:07:37] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:07:37] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:07:37] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:07:37] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:07:40] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:07:40] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:07:40] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:07:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:07:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:07:41] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:07:41] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:07:41] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:07:41] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:07:41] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:07:41] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:07:41] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:07:41] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:11:26] detectron2 INFO: Rank of current process: 0. World size: 4
[01/09 12:11:28] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3             NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:11:28] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=4, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:11:28] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:11:28] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:11:28] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:11:28] d2.utils.env INFO: Using a generated random seed 31918071
[01/09 12:11:28] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:11:28] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:11:31] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:11:31] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:11:31] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:11:32] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:11:32] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:11:32] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:11:35] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:11:35] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:11:35] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:11:35] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:11:35] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:11:35] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:11:36] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:11:36] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:11:36] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:11:36] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:11:36] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:11:36] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:11:36] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:15:29] detectron2 INFO: Rank of current process: 0. World size: 2
[01/09 12:15:30] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:15:30] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:15:30] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:15:30] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:15:30] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:15:30] d2.utils.env INFO: Using a generated random seed 34627663
[01/09 12:15:31] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:15:31] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:15:34] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:15:34] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:15:34] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:15:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:15:34] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:15:34] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:15:37] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:15:37] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:15:37] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:15:37] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:15:37] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:15:37] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:15:38] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:15:38] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:15:38] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:15:38] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:15:38] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:15:38] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:15:38] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:17:52] detectron2 INFO: Rank of current process: 0. World size: 2
[01/09 12:17:53] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:17:53] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:17:53] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:17:53] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:17:53] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:17:53] d2.utils.env INFO: Using a generated random seed 57753202
[01/09 12:17:54] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:17:54] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:17:57] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:17:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:17:57] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:17:57] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:17:57] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:17:58] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:18:00] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:18:00] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:18:00] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:18:01] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:18:01] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:18:01] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:18:01] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:18:01] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:18:01] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:18:01] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:18:01] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:18:01] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:18:01] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:19:49] detectron2 INFO: Rank of current process: 0. World size: 2
[01/09 12:19:51] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:19:51] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:19:51] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:19:51] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:19:51] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:19:51] d2.utils.env INFO: Using a generated random seed 54946583
[01/09 12:19:51] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:19:51] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:19:54] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:19:54] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:19:54] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:19:55] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:19:55] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:19:55] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:19:58] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:19:58] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:19:58] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:19:58] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:19:58] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:19:58] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:19:58] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:19:58] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:19:58] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:19:59] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:19:59] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:19:59] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:19:59] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:21:19] detectron2 INFO: Rank of current process: 0. World size: 2
[01/09 12:21:20] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:21:20] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:21:20] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:21:21] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:21:21] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:21:21] d2.utils.env INFO: Using a generated random seed 24960783
[01/09 12:21:21] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:21:21] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:21:24] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:21:24] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:21:24] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:21:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:21:24] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:21:24] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:21:27] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:21:27] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:21:27] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:21:27] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:21:27] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:21:27] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:21:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:21:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:21:28] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:21:28] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:21:28] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:21:28] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:21:28] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:23:00] detectron2 INFO: Rank of current process: 0. World size: 2
[01/09 12:23:02] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/09 12:23:02] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/09 12:23:02] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/09 12:23:02] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/09 12:23:02] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/09 12:23:02] d2.utils.env INFO: Using a generated random seed 6362007
[01/09 12:23:02] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/09 12:23:03] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/09 12:23:05] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:23:05] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:23:05] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:23:06] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:23:06] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:23:06] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:23:09] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/09 12:23:09] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/09 12:23:09] d2.data.build INFO: Using training sampler TrainingSampler
[01/09 12:23:09] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/09 12:23:09] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/09 12:23:09] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/09 12:23:09] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/09 12:23:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/09 12:23:09] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/09 12:23:09] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/09 12:23:09] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/09 12:23:09] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/09 12:23:09] d2.engine.train_loop INFO: Starting training from iteration 0
[01/09 12:23:50] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 201, in forward
    out = self.conv3(out)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.15 GiB (GPU 0; 23.70 GiB total capacity; 20.90 GiB already allocated; 912.81 MiB free; 21.45 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/09 12:23:50] d2.engine.hooks INFO: Total training time: 0:00:41 (0:00:00 on hooks)
[01/09 12:23:50] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 21399M
[01/10 18:51:18] detectron2 INFO: Rank of current process: 0. World size: 2
[01/10 18:51:20] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/10 18:51:20] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/10 18:51:20] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/10 18:51:20] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/10 18:51:20] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/10 18:51:20] d2.utils.env INFO: Using a generated random seed 24619970
[01/10 18:51:21] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/10 18:51:21] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/10 18:51:25] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:51:25] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:51:25] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:51:25] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:51:25] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:51:26] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:51:28] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:51:28] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:51:28] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:51:28] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:51:28] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:51:29] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:51:29] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/10 18:51:29] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/10 18:51:29] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/10 18:51:29] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/10 18:51:29] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/10 18:51:29] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/10 18:51:29] d2.engine.train_loop INFO: Starting training from iteration 0
[01/10 18:52:36] detectron2 INFO: Rank of current process: 0. World size: 6
[01/10 18:52:38] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/10 18:52:38] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/10 18:52:38] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/10 18:52:38] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/10 18:52:38] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/10 18:52:38] d2.utils.env INFO: Using a generated random seed 42642967
[01/10 18:52:39] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/10 18:52:39] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/10 18:52:42] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:52:42] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:52:42] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:52:42] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:52:42] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:52:43] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:52:46] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:52:46] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:52:46] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:52:46] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:52:46] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:52:46] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:52:47] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/10 18:52:47] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/10 18:52:47] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/10 18:52:47] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/10 18:52:47] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/10 18:52:47] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/10 18:52:47] d2.engine.train_loop INFO: Starting training from iteration 0
[01/10 18:56:22] detectron2 INFO: Rank of current process: 0. World size: 3
[01/10 18:56:23] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2               NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/10 18:56:23] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=3, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_2_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/10 18:56:23] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/10 18:56:23] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_2_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/10 18:56:23] detectron2 INFO: Full config saved to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/10 18:56:23] d2.utils.env INFO: Using a generated random seed 27846998
[01/10 18:56:24] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/10 18:56:24] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/10 18:56:27] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:56:27] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:56:27] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:56:27] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:56:27] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:56:28] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:56:30] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/10 18:56:30] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/10 18:56:30] d2.data.build INFO: Using training sampler TrainingSampler
[01/10 18:56:30] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/10 18:56:30] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/10 18:56:31] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/10 18:56:31] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/10 18:56:31] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/10 18:56:31] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/10 18:56:31] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/10 18:56:31] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/10 18:56:31] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/10 18:56:31] d2.engine.train_loop INFO: Starting training from iteration 0
[01/10 18:57:32] d2.utils.events INFO:  eta: 6:14:41  iter: 19  total_loss: 3.948  loss_cls: 3.038  loss_box_reg: 0.1067  loss_rpn_cls: 0.6918  loss_rpn_loc: 0.1612  time: 0.9365  data_time: 1.9727  lr: 0.0038162  max_mem: 18992M
[01/10 18:57:51] d2.utils.events INFO:  eta: 6:15:55  iter: 39  total_loss: 3.256  loss_cls: 2.299  loss_box_reg: 0.1435  loss_rpn_cls: 0.6737  loss_rpn_loc: 0.1613  time: 0.9439  data_time: 0.0117  lr: 0.0078122  max_mem: 19092M
[01/10 18:58:10] d2.utils.events INFO:  eta: 6:15:36  iter: 59  total_loss: 1.699  loss_cls: 0.8139  loss_box_reg: 0.1202  loss_rpn_cls: 0.6281  loss_rpn_loc: 0.1694  time: 0.9498  data_time: 0.0103  lr: 0.011808  max_mem: 19092M
[01/10 18:58:29] d2.utils.events INFO:  eta: 6:15:36  iter: 79  total_loss: 1.025  loss_cls: 0.2049  loss_box_reg: 0.1152  loss_rpn_cls: 0.5345  loss_rpn_loc: 0.1591  time: 0.9513  data_time: 0.0125  lr: 0.015804  max_mem: 19092M
[01/10 18:58:49] d2.utils.events INFO:  eta: 6:17:40  iter: 99  total_loss: 0.8349  loss_cls: 0.1614  loss_box_reg: 0.127  loss_rpn_cls: 0.4043  loss_rpn_loc: 0.16  time: 0.9634  data_time: 0.0117  lr: 0.0198  max_mem: 19092M
[01/10 18:59:08] d2.utils.events INFO:  eta: 6:18:44  iter: 119  total_loss: 0.9232  loss_cls: 0.2105  loss_box_reg: 0.1906  loss_rpn_cls: 0.3515  loss_rpn_loc: 0.1693  time: 0.9607  data_time: 0.0125  lr: 0.02  max_mem: 19092M
[01/10 18:59:28] d2.utils.events INFO:  eta: 6:21:27  iter: 139  total_loss: 0.8365  loss_cls: 0.1786  loss_box_reg: 0.1479  loss_rpn_cls: 0.3138  loss_rpn_loc: 0.1972  time: 0.9662  data_time: 0.0112  lr: 0.02  max_mem: 19092M
[01/10 18:59:48] d2.utils.events INFO:  eta: 6:22:37  iter: 159  total_loss: 0.8458  loss_cls: 0.2233  loss_box_reg: 0.1747  loss_rpn_cls: 0.2614  loss_rpn_loc: 0.1574  time: 0.9725  data_time: 0.0121  lr: 0.02  max_mem: 19092M
[01/10 19:00:08] d2.utils.events INFO:  eta: 6:25:05  iter: 179  total_loss: 0.8353  loss_cls: 0.2102  loss_box_reg: 0.1856  loss_rpn_cls: 0.2167  loss_rpn_loc: 0.1414  time: 0.9752  data_time: 0.0117  lr: 0.02  max_mem: 19092M
[01/10 19:00:28] d2.utils.events INFO:  eta: 6:24:05  iter: 199  total_loss: 0.8008  loss_cls: 0.2068  loss_box_reg: 0.1987  loss_rpn_cls: 0.201  loss_rpn_loc: 0.158  time: 0.9744  data_time: 0.0116  lr: 0.02  max_mem: 19092M
[01/10 19:00:47] d2.utils.events INFO:  eta: 6:23:08  iter: 219  total_loss: 0.7549  loss_cls: 0.1898  loss_box_reg: 0.1953  loss_rpn_cls: 0.1931  loss_rpn_loc: 0.171  time: 0.9732  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 19:01:06] d2.utils.events INFO:  eta: 6:21:43  iter: 239  total_loss: 0.7014  loss_cls: 0.1663  loss_box_reg: 0.1879  loss_rpn_cls: 0.1727  loss_rpn_loc: 0.1717  time: 0.9718  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:01:25] d2.utils.events INFO:  eta: 6:20:46  iter: 259  total_loss: 0.6712  loss_cls: 0.1686  loss_box_reg: 0.186  loss_rpn_cls: 0.1798  loss_rpn_loc: 0.154  time: 0.9700  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:01:44] d2.utils.events INFO:  eta: 6:19:46  iter: 279  total_loss: 0.6846  loss_cls: 0.1573  loss_box_reg: 0.1861  loss_rpn_cls: 0.1737  loss_rpn_loc: 0.1575  time: 0.9682  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 19:02:03] d2.utils.events INFO:  eta: 6:19:04  iter: 299  total_loss: 0.68  loss_cls: 0.1749  loss_box_reg: 0.2196  loss_rpn_cls: 0.1614  loss_rpn_loc: 0.1449  time: 0.9666  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:02:22] d2.utils.events INFO:  eta: 6:18:05  iter: 319  total_loss: 0.6523  loss_cls: 0.1573  loss_box_reg: 0.1777  loss_rpn_cls: 0.167  loss_rpn_loc: 0.1385  time: 0.9650  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:02:41] d2.utils.events INFO:  eta: 6:16:25  iter: 339  total_loss: 0.7126  loss_cls: 0.1632  loss_box_reg: 0.2024  loss_rpn_cls: 0.1653  loss_rpn_loc: 0.1357  time: 0.9637  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:02:59] d2.utils.events INFO:  eta: 6:15:40  iter: 359  total_loss: 0.7172  loss_cls: 0.1799  loss_box_reg: 0.2191  loss_rpn_cls: 0.1862  loss_rpn_loc: 0.1544  time: 0.9625  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:03:18] d2.utils.events INFO:  eta: 6:14:43  iter: 379  total_loss: 0.639  loss_cls: 0.1521  loss_box_reg: 0.1958  loss_rpn_cls: 0.1604  loss_rpn_loc: 0.126  time: 0.9612  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 19:03:37] d2.utils.events INFO:  eta: 6:14:17  iter: 399  total_loss: 0.6815  loss_cls: 0.1552  loss_box_reg: 0.1935  loss_rpn_cls: 0.159  loss_rpn_loc: 0.1407  time: 0.9603  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:03:56] d2.utils.events INFO:  eta: 6:14:10  iter: 419  total_loss: 0.7427  loss_cls: 0.1856  loss_box_reg: 0.2396  loss_rpn_cls: 0.1541  loss_rpn_loc: 0.1453  time: 0.9604  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:04:15] d2.utils.events INFO:  eta: 6:13:25  iter: 439  total_loss: 0.6562  loss_cls: 0.1592  loss_box_reg: 0.1988  loss_rpn_cls: 0.1464  loss_rpn_loc: 0.145  time: 0.9594  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 19:04:34] d2.utils.events INFO:  eta: 6:12:52  iter: 459  total_loss: 0.6408  loss_cls: 0.1498  loss_box_reg: 0.2068  loss_rpn_cls: 0.1496  loss_rpn_loc: 0.1438  time: 0.9589  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 19:04:53] d2.utils.events INFO:  eta: 6:12:08  iter: 479  total_loss: 0.668  loss_cls: 0.1562  loss_box_reg: 0.2052  loss_rpn_cls: 0.1596  loss_rpn_loc: 0.1443  time: 0.9583  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 19:05:12] d2.utils.events INFO:  eta: 6:11:35  iter: 499  total_loss: 0.6313  loss_cls: 0.1558  loss_box_reg: 0.2165  loss_rpn_cls: 0.1385  loss_rpn_loc: 0.1288  time: 0.9577  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 19:05:31] d2.utils.events INFO:  eta: 6:11:14  iter: 519  total_loss: 0.6689  loss_cls: 0.1731  loss_box_reg: 0.229  loss_rpn_cls: 0.1452  loss_rpn_loc: 0.1362  time: 0.9574  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 19:05:50] d2.utils.events INFO:  eta: 6:10:58  iter: 539  total_loss: 0.6599  loss_cls: 0.1521  loss_box_reg: 0.2058  loss_rpn_cls: 0.1417  loss_rpn_loc: 0.1417  time: 0.9571  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 19:06:09] d2.utils.events INFO:  eta: 6:10:38  iter: 559  total_loss: 0.6539  loss_cls: 0.1459  loss_box_reg: 0.2033  loss_rpn_cls: 0.1522  loss_rpn_loc: 0.1521  time: 0.9569  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:06:28] d2.utils.events INFO:  eta: 6:10:20  iter: 579  total_loss: 0.685  loss_cls: 0.1743  loss_box_reg: 0.2152  loss_rpn_cls: 0.1391  loss_rpn_loc: 0.1378  time: 0.9565  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:06:47] d2.utils.events INFO:  eta: 6:10:01  iter: 599  total_loss: 0.6947  loss_cls: 0.1574  loss_box_reg: 0.2176  loss_rpn_cls: 0.1558  loss_rpn_loc: 0.1524  time: 0.9564  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:07:06] d2.utils.events INFO:  eta: 6:09:45  iter: 619  total_loss: 0.6999  loss_cls: 0.1652  loss_box_reg: 0.2208  loss_rpn_cls: 0.1483  loss_rpn_loc: 0.1611  time: 0.9566  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:07:25] d2.utils.events INFO:  eta: 6:09:22  iter: 639  total_loss: 0.7134  loss_cls: 0.171  loss_box_reg: 0.2288  loss_rpn_cls: 0.1611  loss_rpn_loc: 0.1567  time: 0.9562  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:07:44] d2.utils.events INFO:  eta: 6:08:59  iter: 659  total_loss: 0.7024  loss_cls: 0.167  loss_box_reg: 0.2231  loss_rpn_cls: 0.1512  loss_rpn_loc: 0.1501  time: 0.9558  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:08:03] d2.utils.events INFO:  eta: 6:08:34  iter: 679  total_loss: 0.6267  loss_cls: 0.1489  loss_box_reg: 0.2008  loss_rpn_cls: 0.1217  loss_rpn_loc: 0.1309  time: 0.9553  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 19:08:21] d2.utils.events INFO:  eta: 6:08:06  iter: 699  total_loss: 0.6728  loss_cls: 0.1682  loss_box_reg: 0.2269  loss_rpn_cls: 0.1494  loss_rpn_loc: 0.1283  time: 0.9549  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:08:40] d2.utils.events INFO:  eta: 6:07:46  iter: 719  total_loss: 0.6395  loss_cls: 0.1553  loss_box_reg: 0.2055  loss_rpn_cls: 0.1395  loss_rpn_loc: 0.1392  time: 0.9545  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:08:59] d2.utils.events INFO:  eta: 6:07:24  iter: 739  total_loss: 0.6217  loss_cls: 0.1488  loss_box_reg: 0.1992  loss_rpn_cls: 0.135  loss_rpn_loc: 0.1386  time: 0.9543  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:09:18] d2.utils.events INFO:  eta: 6:07:03  iter: 759  total_loss: 0.5912  loss_cls: 0.1424  loss_box_reg: 0.2044  loss_rpn_cls: 0.1315  loss_rpn_loc: 0.1333  time: 0.9541  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:09:37] d2.utils.events INFO:  eta: 6:06:32  iter: 779  total_loss: 0.6691  loss_cls: 0.1608  loss_box_reg: 0.2194  loss_rpn_cls: 0.1382  loss_rpn_loc: 0.1333  time: 0.9536  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 19:09:56] d2.utils.events INFO:  eta: 6:06:12  iter: 799  total_loss: 0.6573  loss_cls: 0.1508  loss_box_reg: 0.2018  loss_rpn_cls: 0.1412  loss_rpn_loc: 0.1546  time: 0.9534  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:10:15] d2.utils.events INFO:  eta: 6:05:51  iter: 819  total_loss: 0.6058  loss_cls: 0.1427  loss_box_reg: 0.1894  loss_rpn_cls: 0.1198  loss_rpn_loc: 0.1422  time: 0.9533  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 19:10:34] d2.utils.events INFO:  eta: 6:05:29  iter: 839  total_loss: 0.6149  loss_cls: 0.1466  loss_box_reg: 0.1882  loss_rpn_cls: 0.124  loss_rpn_loc: 0.1452  time: 0.9531  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:10:53] d2.utils.events INFO:  eta: 6:05:10  iter: 859  total_loss: 0.633  loss_cls: 0.1592  loss_box_reg: 0.1996  loss_rpn_cls: 0.1325  loss_rpn_loc: 0.1363  time: 0.9530  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:11:12] d2.utils.events INFO:  eta: 6:04:48  iter: 879  total_loss: 0.5847  loss_cls: 0.1409  loss_box_reg: 0.1983  loss_rpn_cls: 0.1137  loss_rpn_loc: 0.1214  time: 0.9528  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:11:31] d2.utils.events INFO:  eta: 6:04:21  iter: 899  total_loss: 0.5613  loss_cls: 0.129  loss_box_reg: 0.1847  loss_rpn_cls: 0.1176  loss_rpn_loc: 0.1262  time: 0.9527  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:11:49] d2.utils.events INFO:  eta: 6:04:02  iter: 919  total_loss: 0.6165  loss_cls: 0.1392  loss_box_reg: 0.2151  loss_rpn_cls: 0.1143  loss_rpn_loc: 0.1307  time: 0.9525  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 19:12:09] d2.utils.events INFO:  eta: 6:03:44  iter: 939  total_loss: 0.646  loss_cls: 0.1483  loss_box_reg: 0.2114  loss_rpn_cls: 0.1238  loss_rpn_loc: 0.1311  time: 0.9525  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:12:28] d2.utils.events INFO:  eta: 6:03:24  iter: 959  total_loss: 0.6456  loss_cls: 0.1614  loss_box_reg: 0.2062  loss_rpn_cls: 0.1282  loss_rpn_loc: 0.1278  time: 0.9525  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:12:47] d2.utils.events INFO:  eta: 6:03:12  iter: 979  total_loss: 0.6483  loss_cls: 0.1501  loss_box_reg: 0.1991  loss_rpn_cls: 0.1275  loss_rpn_loc: 0.1653  time: 0.9527  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:13:06] d2.utils.events INFO:  eta: 6:02:54  iter: 999  total_loss: 0.5813  loss_cls: 0.1463  loss_box_reg: 0.1792  loss_rpn_cls: 0.1324  loss_rpn_loc: 0.1348  time: 0.9526  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 19:13:25] d2.utils.events INFO:  eta: 6:02:38  iter: 1019  total_loss: 0.6751  loss_cls: 0.1608  loss_box_reg: 0.2266  loss_rpn_cls: 0.1334  loss_rpn_loc: 0.1504  time: 0.9524  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:13:44] d2.utils.events INFO:  eta: 6:02:17  iter: 1039  total_loss: 0.6109  loss_cls: 0.1516  loss_box_reg: 0.1961  loss_rpn_cls: 0.119  loss_rpn_loc: 0.1302  time: 0.9525  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 19:14:03] d2.utils.events INFO:  eta: 6:02:03  iter: 1059  total_loss: 0.6336  loss_cls: 0.1519  loss_box_reg: 0.1838  loss_rpn_cls: 0.1203  loss_rpn_loc: 0.1463  time: 0.9526  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 19:14:22] d2.utils.events INFO:  eta: 6:01:44  iter: 1079  total_loss: 0.6482  loss_cls: 0.1475  loss_box_reg: 0.1986  loss_rpn_cls: 0.1175  loss_rpn_loc: 0.1373  time: 0.9525  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 19:14:41] d2.utils.events INFO:  eta: 6:01:11  iter: 1099  total_loss: 0.6068  loss_cls: 0.1424  loss_box_reg: 0.2114  loss_rpn_cls: 0.1141  loss_rpn_loc: 0.1187  time: 0.9521  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:14:59] d2.utils.events INFO:  eta: 6:00:46  iter: 1119  total_loss: 0.5526  loss_cls: 0.1388  loss_box_reg: 0.194  loss_rpn_cls: 0.1154  loss_rpn_loc: 0.1208  time: 0.9520  data_time: 0.0102  lr: 0.02  max_mem: 19359M
[01/10 19:15:18] d2.utils.events INFO:  eta: 6:00:20  iter: 1139  total_loss: 0.5978  loss_cls: 0.1595  loss_box_reg: 0.1942  loss_rpn_cls: 0.1248  loss_rpn_loc: 0.1472  time: 0.9518  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:15:37] d2.utils.events INFO:  eta: 5:59:52  iter: 1159  total_loss: 0.6204  loss_cls: 0.1444  loss_box_reg: 0.212  loss_rpn_cls: 0.1214  loss_rpn_loc: 0.1413  time: 0.9516  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 19:15:56] d2.utils.events INFO:  eta: 5:59:29  iter: 1179  total_loss: 0.6403  loss_cls: 0.1371  loss_box_reg: 0.1991  loss_rpn_cls: 0.1219  loss_rpn_loc: 0.1447  time: 0.9515  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 19:16:15] d2.utils.events INFO:  eta: 5:58:58  iter: 1199  total_loss: 0.5904  loss_cls: 0.1433  loss_box_reg: 0.2118  loss_rpn_cls: 0.1096  loss_rpn_loc: 0.1196  time: 0.9512  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 19:16:34] d2.utils.events INFO:  eta: 5:58:36  iter: 1219  total_loss: 0.5944  loss_cls: 0.1443  loss_box_reg: 0.2146  loss_rpn_cls: 0.1047  loss_rpn_loc: 0.1418  time: 0.9511  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:16:52] d2.utils.events INFO:  eta: 5:58:07  iter: 1239  total_loss: 0.5781  loss_cls: 0.1396  loss_box_reg: 0.1972  loss_rpn_cls: 0.117  loss_rpn_loc: 0.1418  time: 0.9510  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 19:17:11] d2.utils.events INFO:  eta: 5:57:43  iter: 1259  total_loss: 0.525  loss_cls: 0.1245  loss_box_reg: 0.175  loss_rpn_cls: 0.1125  loss_rpn_loc: 0.1377  time: 0.9509  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:17:30] d2.utils.events INFO:  eta: 5:57:24  iter: 1279  total_loss: 0.6179  loss_cls: 0.1603  loss_box_reg: 0.2027  loss_rpn_cls: 0.1204  loss_rpn_loc: 0.1203  time: 0.9508  data_time: 0.0142  lr: 0.02  max_mem: 19359M
[01/10 19:17:49] d2.utils.events INFO:  eta: 5:57:07  iter: 1299  total_loss: 0.6277  loss_cls: 0.1589  loss_box_reg: 0.2205  loss_rpn_cls: 0.1198  loss_rpn_loc: 0.1376  time: 0.9506  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 19:18:08] d2.utils.events INFO:  eta: 5:56:49  iter: 1319  total_loss: 0.617  loss_cls: 0.1481  loss_box_reg: 0.2095  loss_rpn_cls: 0.1207  loss_rpn_loc: 0.1295  time: 0.9506  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:18:27] d2.utils.events INFO:  eta: 5:56:32  iter: 1339  total_loss: 0.5694  loss_cls: 0.139  loss_box_reg: 0.1865  loss_rpn_cls: 0.1015  loss_rpn_loc: 0.1346  time: 0.9504  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:18:46] d2.utils.events INFO:  eta: 5:56:08  iter: 1359  total_loss: 0.5795  loss_cls: 0.1427  loss_box_reg: 0.1989  loss_rpn_cls: 0.1145  loss_rpn_loc: 0.1371  time: 0.9503  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:19:05] d2.utils.events INFO:  eta: 5:55:50  iter: 1379  total_loss: 0.6567  loss_cls: 0.1593  loss_box_reg: 0.2218  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.1389  time: 0.9502  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:19:24] d2.utils.events INFO:  eta: 5:55:28  iter: 1399  total_loss: 0.586  loss_cls: 0.1424  loss_box_reg: 0.1936  loss_rpn_cls: 0.1168  loss_rpn_loc: 0.1247  time: 0.9501  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:19:42] d2.utils.events INFO:  eta: 5:55:07  iter: 1419  total_loss: 0.5728  loss_cls: 0.1301  loss_box_reg: 0.192  loss_rpn_cls: 0.1143  loss_rpn_loc: 0.1165  time: 0.9500  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:20:01] d2.utils.events INFO:  eta: 5:54:47  iter: 1439  total_loss: 0.6158  loss_cls: 0.1593  loss_box_reg: 0.1913  loss_rpn_cls: 0.1226  loss_rpn_loc: 0.131  time: 0.9498  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 19:20:20] d2.utils.events INFO:  eta: 5:54:28  iter: 1459  total_loss: 0.6201  loss_cls: 0.1398  loss_box_reg: 0.1936  loss_rpn_cls: 0.111  loss_rpn_loc: 0.1284  time: 0.9498  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:20:39] d2.utils.events INFO:  eta: 5:54:13  iter: 1479  total_loss: 0.5885  loss_cls: 0.1357  loss_box_reg: 0.1975  loss_rpn_cls: 0.1234  loss_rpn_loc: 0.1263  time: 0.9498  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:20:58] d2.utils.events INFO:  eta: 5:53:55  iter: 1499  total_loss: 0.6079  loss_cls: 0.1456  loss_box_reg: 0.2034  loss_rpn_cls: 0.1148  loss_rpn_loc: 0.128  time: 0.9497  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:21:17] d2.utils.events INFO:  eta: 5:53:30  iter: 1519  total_loss: 0.5995  loss_cls: 0.1422  loss_box_reg: 0.203  loss_rpn_cls: 0.1149  loss_rpn_loc: 0.1325  time: 0.9496  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 19:21:36] d2.utils.events INFO:  eta: 5:53:08  iter: 1539  total_loss: 0.5884  loss_cls: 0.1286  loss_box_reg: 0.1854  loss_rpn_cls: 0.1134  loss_rpn_loc: 0.1354  time: 0.9495  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 19:21:54] d2.utils.events INFO:  eta: 5:52:50  iter: 1559  total_loss: 0.6227  loss_cls: 0.1367  loss_box_reg: 0.2002  loss_rpn_cls: 0.1015  loss_rpn_loc: 0.1273  time: 0.9494  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:22:13] d2.utils.events INFO:  eta: 5:52:30  iter: 1579  total_loss: 0.5436  loss_cls: 0.1348  loss_box_reg: 0.183  loss_rpn_cls: 0.0974  loss_rpn_loc: 0.1296  time: 0.9494  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 19:22:32] d2.utils.events INFO:  eta: 5:52:11  iter: 1599  total_loss: 0.5884  loss_cls: 0.1394  loss_box_reg: 0.1946  loss_rpn_cls: 0.1031  loss_rpn_loc: 0.1282  time: 0.9494  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:22:51] d2.utils.events INFO:  eta: 5:51:48  iter: 1619  total_loss: 0.5422  loss_cls: 0.1322  loss_box_reg: 0.1879  loss_rpn_cls: 0.1069  loss_rpn_loc: 0.122  time: 0.9494  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 19:23:10] d2.utils.events INFO:  eta: 5:51:25  iter: 1639  total_loss: 0.5471  loss_cls: 0.1321  loss_box_reg: 0.1889  loss_rpn_cls: 0.09789  loss_rpn_loc: 0.1254  time: 0.9492  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 19:23:29] d2.utils.events INFO:  eta: 5:51:08  iter: 1659  total_loss: 0.5564  loss_cls: 0.1493  loss_box_reg: 0.2134  loss_rpn_cls: 0.1053  loss_rpn_loc: 0.1318  time: 0.9491  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:23:48] d2.utils.events INFO:  eta: 5:50:51  iter: 1679  total_loss: 0.5557  loss_cls: 0.131  loss_box_reg: 0.188  loss_rpn_cls: 0.1045  loss_rpn_loc: 0.1405  time: 0.9490  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:24:07] d2.utils.events INFO:  eta: 5:50:33  iter: 1699  total_loss: 0.5663  loss_cls: 0.1243  loss_box_reg: 0.1867  loss_rpn_cls: 0.1124  loss_rpn_loc: 0.1168  time: 0.9490  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 19:24:26] d2.utils.events INFO:  eta: 5:50:16  iter: 1719  total_loss: 0.6441  loss_cls: 0.1507  loss_box_reg: 0.2221  loss_rpn_cls: 0.1076  loss_rpn_loc: 0.1525  time: 0.9490  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:24:44] d2.utils.events INFO:  eta: 5:49:55  iter: 1739  total_loss: 0.5763  loss_cls: 0.1448  loss_box_reg: 0.1904  loss_rpn_cls: 0.1172  loss_rpn_loc: 0.1235  time: 0.9489  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 19:25:03] d2.utils.events INFO:  eta: 5:49:35  iter: 1759  total_loss: 0.6505  loss_cls: 0.1621  loss_box_reg: 0.2206  loss_rpn_cls: 0.1163  loss_rpn_loc: 0.1318  time: 0.9487  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:25:22] d2.utils.events INFO:  eta: 5:49:18  iter: 1779  total_loss: 0.5704  loss_cls: 0.1385  loss_box_reg: 0.1979  loss_rpn_cls: 0.1105  loss_rpn_loc: 0.1218  time: 0.9487  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:25:41] d2.utils.events INFO:  eta: 5:48:58  iter: 1799  total_loss: 0.5333  loss_cls: 0.1223  loss_box_reg: 0.1955  loss_rpn_cls: 0.09594  loss_rpn_loc: 0.1206  time: 0.9486  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:26:00] d2.utils.events INFO:  eta: 5:48:41  iter: 1819  total_loss: 0.5884  loss_cls: 0.1372  loss_box_reg: 0.1847  loss_rpn_cls: 0.1004  loss_rpn_loc: 0.1462  time: 0.9487  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:26:19] d2.utils.events INFO:  eta: 5:48:24  iter: 1839  total_loss: 0.5778  loss_cls: 0.1361  loss_box_reg: 0.1979  loss_rpn_cls: 0.1132  loss_rpn_loc: 0.137  time: 0.9486  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:26:38] d2.utils.events INFO:  eta: 5:48:06  iter: 1859  total_loss: 0.5906  loss_cls: 0.1298  loss_box_reg: 0.1986  loss_rpn_cls: 0.1079  loss_rpn_loc: 0.1385  time: 0.9487  data_time: 0.0150  lr: 0.02  max_mem: 19359M
[01/10 19:26:57] d2.utils.events INFO:  eta: 5:47:47  iter: 1879  total_loss: 0.5788  loss_cls: 0.1411  loss_box_reg: 0.1928  loss_rpn_cls: 0.1192  loss_rpn_loc: 0.1182  time: 0.9486  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 19:27:16] d2.utils.events INFO:  eta: 5:47:31  iter: 1899  total_loss: 0.6535  loss_cls: 0.1661  loss_box_reg: 0.2074  loss_rpn_cls: 0.126  loss_rpn_loc: 0.1362  time: 0.9486  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 19:27:35] d2.utils.events INFO:  eta: 5:47:15  iter: 1919  total_loss: 0.5511  loss_cls: 0.1358  loss_box_reg: 0.1883  loss_rpn_cls: 0.1084  loss_rpn_loc: 0.1337  time: 0.9487  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 19:27:54] d2.utils.events INFO:  eta: 5:46:53  iter: 1939  total_loss: 0.5427  loss_cls: 0.1362  loss_box_reg: 0.1909  loss_rpn_cls: 0.1014  loss_rpn_loc: 0.1219  time: 0.9486  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 19:28:13] d2.utils.events INFO:  eta: 5:46:36  iter: 1959  total_loss: 0.5386  loss_cls: 0.1317  loss_box_reg: 0.1953  loss_rpn_cls: 0.108  loss_rpn_loc: 0.1293  time: 0.9487  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:28:32] d2.utils.events INFO:  eta: 5:46:13  iter: 1979  total_loss: 0.5447  loss_cls: 0.125  loss_box_reg: 0.1894  loss_rpn_cls: 0.09627  loss_rpn_loc: 0.1279  time: 0.9486  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 19:28:51] d2.utils.events INFO:  eta: 5:45:54  iter: 1999  total_loss: 0.5629  loss_cls: 0.1371  loss_box_reg: 0.1863  loss_rpn_cls: 0.1026  loss_rpn_loc: 0.1382  time: 0.9487  data_time: 0.0150  lr: 0.02  max_mem: 19359M
[01/10 19:29:10] d2.utils.events INFO:  eta: 5:45:33  iter: 2019  total_loss: 0.5451  loss_cls: 0.1344  loss_box_reg: 0.1837  loss_rpn_cls: 0.1032  loss_rpn_loc: 0.1329  time: 0.9486  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 19:29:29] d2.utils.events INFO:  eta: 5:45:12  iter: 2039  total_loss: 0.5248  loss_cls: 0.1291  loss_box_reg: 0.1651  loss_rpn_cls: 0.09369  loss_rpn_loc: 0.1228  time: 0.9485  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:29:47] d2.utils.events INFO:  eta: 5:44:49  iter: 2059  total_loss: 0.5838  loss_cls: 0.1409  loss_box_reg: 0.2108  loss_rpn_cls: 0.1037  loss_rpn_loc: 0.1226  time: 0.9485  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:30:06] d2.utils.events INFO:  eta: 5:44:30  iter: 2079  total_loss: 0.5256  loss_cls: 0.1247  loss_box_reg: 0.1965  loss_rpn_cls: 0.09504  loss_rpn_loc: 0.1172  time: 0.9485  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:30:25] d2.utils.events INFO:  eta: 5:44:15  iter: 2099  total_loss: 0.582  loss_cls: 0.1492  loss_box_reg: 0.2214  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1155  time: 0.9484  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 19:30:44] d2.utils.events INFO:  eta: 5:43:56  iter: 2119  total_loss: 0.5915  loss_cls: 0.1445  loss_box_reg: 0.2061  loss_rpn_cls: 0.09362  loss_rpn_loc: 0.1134  time: 0.9483  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 19:31:03] d2.utils.events INFO:  eta: 5:43:36  iter: 2139  total_loss: 0.5915  loss_cls: 0.1404  loss_box_reg: 0.1978  loss_rpn_cls: 0.1132  loss_rpn_loc: 0.1366  time: 0.9483  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 19:31:22] d2.utils.events INFO:  eta: 5:43:15  iter: 2159  total_loss: 0.562  loss_cls: 0.1314  loss_box_reg: 0.1844  loss_rpn_cls: 0.0951  loss_rpn_loc: 0.1287  time: 0.9482  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 19:31:41] d2.utils.events INFO:  eta: 5:42:56  iter: 2179  total_loss: 0.5665  loss_cls: 0.1473  loss_box_reg: 0.1919  loss_rpn_cls: 0.1028  loss_rpn_loc: 0.1456  time: 0.9481  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 19:31:59] d2.utils.events INFO:  eta: 5:42:40  iter: 2199  total_loss: 0.5617  loss_cls: 0.1316  loss_box_reg: 0.1805  loss_rpn_cls: 0.1035  loss_rpn_loc: 0.1305  time: 0.9481  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:32:18] d2.utils.events INFO:  eta: 5:42:17  iter: 2219  total_loss: 0.5378  loss_cls: 0.1299  loss_box_reg: 0.1898  loss_rpn_cls: 0.09624  loss_rpn_loc: 0.1235  time: 0.9480  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 19:32:37] d2.utils.events INFO:  eta: 5:41:59  iter: 2239  total_loss: 0.5694  loss_cls: 0.1313  loss_box_reg: 0.1826  loss_rpn_cls: 0.115  loss_rpn_loc: 0.1213  time: 0.9480  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:32:56] d2.utils.events INFO:  eta: 5:41:37  iter: 2259  total_loss: 0.5642  loss_cls: 0.1416  loss_box_reg: 0.203  loss_rpn_cls: 0.0976  loss_rpn_loc: 0.121  time: 0.9480  data_time: 0.0151  lr: 0.02  max_mem: 19359M
[01/10 19:33:15] d2.utils.events INFO:  eta: 5:41:18  iter: 2279  total_loss: 0.5441  loss_cls: 0.1297  loss_box_reg: 0.174  loss_rpn_cls: 0.09466  loss_rpn_loc: 0.1377  time: 0.9479  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:33:34] d2.utils.events INFO:  eta: 5:41:02  iter: 2299  total_loss: 0.5359  loss_cls: 0.1356  loss_box_reg: 0.1866  loss_rpn_cls: 0.1113  loss_rpn_loc: 0.1215  time: 0.9479  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:33:53] d2.utils.events INFO:  eta: 5:40:34  iter: 2319  total_loss: 0.5132  loss_cls: 0.1267  loss_box_reg: 0.1815  loss_rpn_cls: 0.09666  loss_rpn_loc: 0.1183  time: 0.9478  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 19:34:11] d2.utils.events INFO:  eta: 5:40:15  iter: 2339  total_loss: 0.587  loss_cls: 0.142  loss_box_reg: 0.2078  loss_rpn_cls: 0.09692  loss_rpn_loc: 0.1264  time: 0.9478  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:34:30] d2.utils.events INFO:  eta: 5:40:00  iter: 2359  total_loss: 0.5835  loss_cls: 0.1355  loss_box_reg: 0.1961  loss_rpn_cls: 0.105  loss_rpn_loc: 0.1362  time: 0.9477  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:34:49] d2.utils.events INFO:  eta: 5:39:47  iter: 2379  total_loss: 0.5806  loss_cls: 0.1376  loss_box_reg: 0.1951  loss_rpn_cls: 0.09936  loss_rpn_loc: 0.1339  time: 0.9477  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:35:08] d2.utils.events INFO:  eta: 5:39:30  iter: 2399  total_loss: 0.5301  loss_cls: 0.1163  loss_box_reg: 0.18  loss_rpn_cls: 0.09459  loss_rpn_loc: 0.1301  time: 0.9477  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:35:27] d2.utils.events INFO:  eta: 5:39:12  iter: 2419  total_loss: 0.5191  loss_cls: 0.1178  loss_box_reg: 0.1562  loss_rpn_cls: 0.09848  loss_rpn_loc: 0.1212  time: 0.9477  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 19:35:46] d2.utils.events INFO:  eta: 5:38:54  iter: 2439  total_loss: 0.5319  loss_cls: 0.1403  loss_box_reg: 0.1977  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1208  time: 0.9476  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:36:05] d2.utils.events INFO:  eta: 5:38:26  iter: 2459  total_loss: 0.5411  loss_cls: 0.135  loss_box_reg: 0.1845  loss_rpn_cls: 0.09373  loss_rpn_loc: 0.12  time: 0.9476  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 19:36:24] d2.utils.events INFO:  eta: 5:38:07  iter: 2479  total_loss: 0.5548  loss_cls: 0.1398  loss_box_reg: 0.2014  loss_rpn_cls: 0.1054  loss_rpn_loc: 0.1214  time: 0.9475  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:36:42] d2.utils.events INFO:  eta: 5:37:47  iter: 2499  total_loss: 0.5333  loss_cls: 0.1366  loss_box_reg: 0.1792  loss_rpn_cls: 0.1029  loss_rpn_loc: 0.1144  time: 0.9475  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 19:37:02] d2.utils.events INFO:  eta: 5:37:28  iter: 2519  total_loss: 0.5641  loss_cls: 0.129  loss_box_reg: 0.1885  loss_rpn_cls: 0.1008  loss_rpn_loc: 0.1305  time: 0.9475  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 19:37:20] d2.utils.events INFO:  eta: 5:37:10  iter: 2539  total_loss: 0.5382  loss_cls: 0.1282  loss_box_reg: 0.1842  loss_rpn_cls: 0.09925  loss_rpn_loc: 0.1298  time: 0.9475  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 19:37:39] d2.utils.events INFO:  eta: 5:36:52  iter: 2559  total_loss: 0.5741  loss_cls: 0.1367  loss_box_reg: 0.2028  loss_rpn_cls: 0.09875  loss_rpn_loc: 0.1228  time: 0.9475  data_time: 0.0147  lr: 0.02  max_mem: 19359M
[01/10 19:37:58] d2.utils.events INFO:  eta: 5:36:33  iter: 2579  total_loss: 0.5604  loss_cls: 0.1341  loss_box_reg: 0.2007  loss_rpn_cls: 0.102  loss_rpn_loc: 0.1306  time: 0.9474  data_time: 0.0096  lr: 0.02  max_mem: 19359M
[01/10 19:38:17] d2.utils.events INFO:  eta: 5:36:12  iter: 2599  total_loss: 0.5867  loss_cls: 0.1379  loss_box_reg: 0.1905  loss_rpn_cls: 0.1043  loss_rpn_loc: 0.1238  time: 0.9474  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 19:38:36] d2.utils.events INFO:  eta: 5:35:51  iter: 2619  total_loss: 0.5952  loss_cls: 0.1383  loss_box_reg: 0.197  loss_rpn_cls: 0.1056  loss_rpn_loc: 0.1333  time: 0.9473  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:38:55] d2.utils.events INFO:  eta: 5:35:34  iter: 2639  total_loss: 0.5747  loss_cls: 0.1366  loss_box_reg: 0.2042  loss_rpn_cls: 0.1005  loss_rpn_loc: 0.1408  time: 0.9473  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 19:39:13] d2.utils.events INFO:  eta: 5:35:14  iter: 2659  total_loss: 0.5456  loss_cls: 0.1315  loss_box_reg: 0.1921  loss_rpn_cls: 0.095  loss_rpn_loc: 0.1055  time: 0.9472  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 19:39:32] d2.utils.events INFO:  eta: 5:34:54  iter: 2679  total_loss: 0.4946  loss_cls: 0.1163  loss_box_reg: 0.1686  loss_rpn_cls: 0.08931  loss_rpn_loc: 0.1233  time: 0.9471  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 19:39:51] d2.utils.events INFO:  eta: 5:34:31  iter: 2699  total_loss: 0.5585  loss_cls: 0.1299  loss_box_reg: 0.2004  loss_rpn_cls: 0.103  loss_rpn_loc: 0.119  time: 0.9471  data_time: 0.0095  lr: 0.02  max_mem: 19359M
[01/10 19:40:10] d2.utils.events INFO:  eta: 5:34:09  iter: 2719  total_loss: 0.6104  loss_cls: 0.1527  loss_box_reg: 0.2255  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1351  time: 0.9470  data_time: 0.0102  lr: 0.02  max_mem: 19359M
[01/10 19:40:29] d2.utils.events INFO:  eta: 5:33:51  iter: 2739  total_loss: 0.553  loss_cls: 0.124  loss_box_reg: 0.1849  loss_rpn_cls: 0.103  loss_rpn_loc: 0.1267  time: 0.9470  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:40:48] d2.utils.events INFO:  eta: 5:33:31  iter: 2759  total_loss: 0.5529  loss_cls: 0.1318  loss_box_reg: 0.1939  loss_rpn_cls: 0.0947  loss_rpn_loc: 0.1333  time: 0.9470  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:41:06] d2.utils.events INFO:  eta: 5:33:10  iter: 2779  total_loss: 0.5685  loss_cls: 0.128  loss_box_reg: 0.1954  loss_rpn_cls: 0.09766  loss_rpn_loc: 0.1299  time: 0.9469  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 19:41:25] d2.utils.events INFO:  eta: 5:32:51  iter: 2799  total_loss: 0.5159  loss_cls: 0.1237  loss_box_reg: 0.1778  loss_rpn_cls: 0.09457  loss_rpn_loc: 0.1308  time: 0.9469  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 19:41:44] d2.utils.events INFO:  eta: 5:32:29  iter: 2819  total_loss: 0.563  loss_cls: 0.1449  loss_box_reg: 0.193  loss_rpn_cls: 0.1016  loss_rpn_loc: 0.1195  time: 0.9469  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 19:42:03] d2.utils.events INFO:  eta: 5:32:09  iter: 2839  total_loss: 0.5484  loss_cls: 0.1196  loss_box_reg: 0.1715  loss_rpn_cls: 0.1064  loss_rpn_loc: 0.1419  time: 0.9469  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 19:42:22] d2.utils.events INFO:  eta: 5:31:48  iter: 2859  total_loss: 0.558  loss_cls: 0.1272  loss_box_reg: 0.1939  loss_rpn_cls: 0.09756  loss_rpn_loc: 0.1297  time: 0.9468  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:42:41] d2.utils.events INFO:  eta: 5:31:31  iter: 2879  total_loss: 0.5192  loss_cls: 0.1231  loss_box_reg: 0.1845  loss_rpn_cls: 0.09174  loss_rpn_loc: 0.1244  time: 0.9468  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:42:59] d2.utils.events INFO:  eta: 5:31:06  iter: 2899  total_loss: 0.5269  loss_cls: 0.126  loss_box_reg: 0.1819  loss_rpn_cls: 0.09199  loss_rpn_loc: 0.1294  time: 0.9467  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:43:18] d2.utils.events INFO:  eta: 5:30:47  iter: 2919  total_loss: 0.5152  loss_cls: 0.1235  loss_box_reg: 0.1735  loss_rpn_cls: 0.08867  loss_rpn_loc: 0.1071  time: 0.9467  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 19:43:37] d2.utils.events INFO:  eta: 5:30:25  iter: 2939  total_loss: 0.5999  loss_cls: 0.1466  loss_box_reg: 0.2003  loss_rpn_cls: 0.1052  loss_rpn_loc: 0.1342  time: 0.9466  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:43:56] d2.utils.events INFO:  eta: 5:30:01  iter: 2959  total_loss: 0.552  loss_cls: 0.1362  loss_box_reg: 0.2006  loss_rpn_cls: 0.1043  loss_rpn_loc: 0.1306  time: 0.9465  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:44:15] d2.utils.events INFO:  eta: 5:29:46  iter: 2979  total_loss: 0.5397  loss_cls: 0.1276  loss_box_reg: 0.164  loss_rpn_cls: 0.09173  loss_rpn_loc: 0.1312  time: 0.9465  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:44:33] d2.utils.events INFO:  eta: 5:29:26  iter: 2999  total_loss: 0.5339  loss_cls: 0.1169  loss_box_reg: 0.1695  loss_rpn_cls: 0.09649  loss_rpn_loc: 0.1257  time: 0.9465  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:44:52] d2.utils.events INFO:  eta: 5:29:06  iter: 3019  total_loss: 0.5352  loss_cls: 0.1255  loss_box_reg: 0.1851  loss_rpn_cls: 0.09455  loss_rpn_loc: 0.1252  time: 0.9464  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 19:45:11] d2.utils.events INFO:  eta: 5:28:45  iter: 3039  total_loss: 0.5097  loss_cls: 0.1198  loss_box_reg: 0.1927  loss_rpn_cls: 0.0918  loss_rpn_loc: 0.1212  time: 0.9464  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 19:45:30] d2.utils.events INFO:  eta: 5:28:30  iter: 3059  total_loss: 0.551  loss_cls: 0.1441  loss_box_reg: 0.1865  loss_rpn_cls: 0.09162  loss_rpn_loc: 0.132  time: 0.9464  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 19:45:49] d2.utils.events INFO:  eta: 5:28:04  iter: 3079  total_loss: 0.5279  loss_cls: 0.1265  loss_box_reg: 0.1846  loss_rpn_cls: 0.09115  loss_rpn_loc: 0.1261  time: 0.9463  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 19:46:08] d2.utils.events INFO:  eta: 5:27:47  iter: 3099  total_loss: 0.5521  loss_cls: 0.1154  loss_box_reg: 0.176  loss_rpn_cls: 0.09768  loss_rpn_loc: 0.1457  time: 0.9463  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 19:46:26] d2.utils.events INFO:  eta: 5:27:29  iter: 3119  total_loss: 0.532  loss_cls: 0.1177  loss_box_reg: 0.1607  loss_rpn_cls: 0.09958  loss_rpn_loc: 0.1364  time: 0.9463  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 19:46:45] d2.utils.events INFO:  eta: 5:27:13  iter: 3139  total_loss: 0.4669  loss_cls: 0.1072  loss_box_reg: 0.1601  loss_rpn_cls: 0.09435  loss_rpn_loc: 0.1208  time: 0.9463  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 19:47:04] d2.utils.events INFO:  eta: 5:26:58  iter: 3159  total_loss: 0.5578  loss_cls: 0.1199  loss_box_reg: 0.185  loss_rpn_cls: 0.1094  loss_rpn_loc: 0.1279  time: 0.9463  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:47:23] d2.utils.events INFO:  eta: 5:26:39  iter: 3179  total_loss: 0.576  loss_cls: 0.1399  loss_box_reg: 0.1935  loss_rpn_cls: 0.1062  loss_rpn_loc: 0.1287  time: 0.9463  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 19:47:42] d2.utils.events INFO:  eta: 5:26:23  iter: 3199  total_loss: 0.5157  loss_cls: 0.131  loss_box_reg: 0.1774  loss_rpn_cls: 0.08741  loss_rpn_loc: 0.1279  time: 0.9463  data_time: 0.0100  lr: 0.02  max_mem: 19359M
[01/10 19:48:01] d2.utils.events INFO:  eta: 5:26:06  iter: 3219  total_loss: 0.5096  loss_cls: 0.1146  loss_box_reg: 0.162  loss_rpn_cls: 0.09104  loss_rpn_loc: 0.1336  time: 0.9462  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:48:20] d2.utils.events INFO:  eta: 5:25:43  iter: 3239  total_loss: 0.6035  loss_cls: 0.1391  loss_box_reg: 0.1981  loss_rpn_cls: 0.1008  loss_rpn_loc: 0.13  time: 0.9461  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:48:38] d2.utils.events INFO:  eta: 5:25:25  iter: 3259  total_loss: 0.5114  loss_cls: 0.1147  loss_box_reg: 0.1687  loss_rpn_cls: 0.09487  loss_rpn_loc: 0.1286  time: 0.9461  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 19:48:57] d2.utils.events INFO:  eta: 5:25:04  iter: 3279  total_loss: 0.5895  loss_cls: 0.146  loss_box_reg: 0.1981  loss_rpn_cls: 0.09581  loss_rpn_loc: 0.1303  time: 0.9461  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:49:16] d2.utils.events INFO:  eta: 5:24:45  iter: 3299  total_loss: 0.5692  loss_cls: 0.132  loss_box_reg: 0.1959  loss_rpn_cls: 0.0919  loss_rpn_loc: 0.1237  time: 0.9461  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 19:49:35] d2.utils.events INFO:  eta: 5:24:27  iter: 3319  total_loss: 0.508  loss_cls: 0.1073  loss_box_reg: 0.1628  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.1182  time: 0.9461  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 19:49:54] d2.utils.events INFO:  eta: 5:24:10  iter: 3339  total_loss: 0.5198  loss_cls: 0.1365  loss_box_reg: 0.1862  loss_rpn_cls: 0.09262  loss_rpn_loc: 0.1166  time: 0.9461  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:50:13] d2.utils.events INFO:  eta: 5:23:52  iter: 3359  total_loss: 0.4853  loss_cls: 0.1173  loss_box_reg: 0.174  loss_rpn_cls: 0.09488  loss_rpn_loc: 0.1201  time: 0.9460  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 19:50:32] d2.utils.events INFO:  eta: 5:23:31  iter: 3379  total_loss: 0.5241  loss_cls: 0.1322  loss_box_reg: 0.1909  loss_rpn_cls: 0.09338  loss_rpn_loc: 0.1174  time: 0.9460  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:50:50] d2.utils.events INFO:  eta: 5:23:12  iter: 3399  total_loss: 0.5679  loss_cls: 0.1322  loss_box_reg: 0.1874  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.1316  time: 0.9460  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 19:51:09] d2.utils.events INFO:  eta: 5:22:54  iter: 3419  total_loss: 0.5421  loss_cls: 0.1301  loss_box_reg: 0.1872  loss_rpn_cls: 0.09252  loss_rpn_loc: 0.1387  time: 0.9460  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:51:28] d2.utils.events INFO:  eta: 5:22:38  iter: 3439  total_loss: 0.4746  loss_cls: 0.113  loss_box_reg: 0.1458  loss_rpn_cls: 0.1012  loss_rpn_loc: 0.1174  time: 0.9460  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 19:51:47] d2.utils.events INFO:  eta: 5:22:20  iter: 3459  total_loss: 0.518  loss_cls: 0.1148  loss_box_reg: 0.1738  loss_rpn_cls: 0.1046  loss_rpn_loc: 0.1329  time: 0.9460  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 19:52:06] d2.utils.events INFO:  eta: 5:22:02  iter: 3479  total_loss: 0.5393  loss_cls: 0.1324  loss_box_reg: 0.1791  loss_rpn_cls: 0.09534  loss_rpn_loc: 0.114  time: 0.9459  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 19:52:25] d2.utils.events INFO:  eta: 5:21:42  iter: 3499  total_loss: 0.5513  loss_cls: 0.1365  loss_box_reg: 0.2015  loss_rpn_cls: 0.09813  loss_rpn_loc: 0.142  time: 0.9459  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:52:44] d2.utils.events INFO:  eta: 5:21:23  iter: 3519  total_loss: 0.5151  loss_cls: 0.1249  loss_box_reg: 0.1791  loss_rpn_cls: 0.08968  loss_rpn_loc: 0.1117  time: 0.9459  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 19:53:03] d2.utils.events INFO:  eta: 5:21:06  iter: 3539  total_loss: 0.5597  loss_cls: 0.1301  loss_box_reg: 0.1905  loss_rpn_cls: 0.09878  loss_rpn_loc: 0.1371  time: 0.9459  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:53:22] d2.utils.events INFO:  eta: 5:20:43  iter: 3559  total_loss: 0.6383  loss_cls: 0.15  loss_box_reg: 0.2307  loss_rpn_cls: 0.1127  loss_rpn_loc: 0.1359  time: 0.9459  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:53:40] d2.utils.events INFO:  eta: 5:20:24  iter: 3579  total_loss: 0.5239  loss_cls: 0.133  loss_box_reg: 0.1897  loss_rpn_cls: 0.09327  loss_rpn_loc: 0.1243  time: 0.9459  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 19:53:59] d2.utils.events INFO:  eta: 5:20:05  iter: 3599  total_loss: 0.5023  loss_cls: 0.1131  loss_box_reg: 0.1717  loss_rpn_cls: 0.086  loss_rpn_loc: 0.1367  time: 0.9459  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 19:54:18] d2.utils.events INFO:  eta: 5:19:46  iter: 3619  total_loss: 0.5467  loss_cls: 0.1336  loss_box_reg: 0.1933  loss_rpn_cls: 0.09369  loss_rpn_loc: 0.125  time: 0.9458  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 19:54:37] d2.utils.events INFO:  eta: 5:19:31  iter: 3639  total_loss: 0.5774  loss_cls: 0.1339  loss_box_reg: 0.1924  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1202  time: 0.9458  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 19:54:56] d2.utils.events INFO:  eta: 5:19:13  iter: 3659  total_loss: 0.5392  loss_cls: 0.1175  loss_box_reg: 0.1748  loss_rpn_cls: 0.09389  loss_rpn_loc: 0.1245  time: 0.9458  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 19:55:15] d2.utils.events INFO:  eta: 5:18:59  iter: 3679  total_loss: 0.5055  loss_cls: 0.114  loss_box_reg: 0.1793  loss_rpn_cls: 0.08388  loss_rpn_loc: 0.1132  time: 0.9458  data_time: 0.0100  lr: 0.02  max_mem: 19359M
[01/10 19:55:34] d2.utils.events INFO:  eta: 5:18:42  iter: 3699  total_loss: 0.5375  loss_cls: 0.1321  loss_box_reg: 0.1875  loss_rpn_cls: 0.09293  loss_rpn_loc: 0.12  time: 0.9458  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 19:55:52] d2.utils.events INFO:  eta: 5:18:26  iter: 3719  total_loss: 0.4907  loss_cls: 0.1072  loss_box_reg: 0.1722  loss_rpn_cls: 0.09208  loss_rpn_loc: 0.1136  time: 0.9458  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 19:56:11] d2.utils.events INFO:  eta: 5:18:05  iter: 3739  total_loss: 0.523  loss_cls: 0.1398  loss_box_reg: 0.1964  loss_rpn_cls: 0.09459  loss_rpn_loc: 0.1154  time: 0.9458  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 19:56:30] d2.utils.events INFO:  eta: 5:17:51  iter: 3759  total_loss: 0.5277  loss_cls: 0.132  loss_box_reg: 0.1803  loss_rpn_cls: 0.1033  loss_rpn_loc: 0.127  time: 0.9457  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 19:56:49] d2.utils.events INFO:  eta: 5:17:34  iter: 3779  total_loss: 0.4904  loss_cls: 0.1096  loss_box_reg: 0.1569  loss_rpn_cls: 0.09274  loss_rpn_loc: 0.1178  time: 0.9458  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 19:57:08] d2.utils.events INFO:  eta: 5:17:14  iter: 3799  total_loss: 0.5104  loss_cls: 0.1263  loss_box_reg: 0.1816  loss_rpn_cls: 0.08205  loss_rpn_loc: 0.1131  time: 0.9457  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 19:57:27] d2.utils.events INFO:  eta: 5:17:00  iter: 3819  total_loss: 0.5244  loss_cls: 0.1287  loss_box_reg: 0.1942  loss_rpn_cls: 0.08605  loss_rpn_loc: 0.1193  time: 0.9457  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 19:57:46] d2.utils.events INFO:  eta: 5:16:47  iter: 3839  total_loss: 0.5026  loss_cls: 0.1136  loss_box_reg: 0.1666  loss_rpn_cls: 0.09461  loss_rpn_loc: 0.1275  time: 0.9457  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 19:58:05] d2.utils.events INFO:  eta: 5:16:29  iter: 3859  total_loss: 0.524  loss_cls: 0.1237  loss_box_reg: 0.1897  loss_rpn_cls: 0.09202  loss_rpn_loc: 0.1315  time: 0.9457  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 19:58:24] d2.utils.events INFO:  eta: 5:16:09  iter: 3879  total_loss: 0.5041  loss_cls: 0.1135  loss_box_reg: 0.1689  loss_rpn_cls: 0.09203  loss_rpn_loc: 0.1177  time: 0.9457  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 19:58:43] d2.utils.events INFO:  eta: 5:15:57  iter: 3899  total_loss: 0.4906  loss_cls: 0.1102  loss_box_reg: 0.1675  loss_rpn_cls: 0.08495  loss_rpn_loc: 0.1211  time: 0.9457  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 19:59:02] d2.utils.events INFO:  eta: 5:15:39  iter: 3919  total_loss: 0.5245  loss_cls: 0.115  loss_box_reg: 0.1804  loss_rpn_cls: 0.1013  loss_rpn_loc: 0.115  time: 0.9457  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 19:59:20] d2.utils.events INFO:  eta: 5:15:19  iter: 3939  total_loss: 0.531  loss_cls: 0.1134  loss_box_reg: 0.1885  loss_rpn_cls: 0.08825  loss_rpn_loc: 0.1303  time: 0.9457  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 19:59:39] d2.utils.events INFO:  eta: 5:15:01  iter: 3959  total_loss: 0.5192  loss_cls: 0.1266  loss_box_reg: 0.1733  loss_rpn_cls: 0.09126  loss_rpn_loc: 0.1084  time: 0.9457  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 19:59:58] d2.utils.events INFO:  eta: 5:14:42  iter: 3979  total_loss: 0.4877  loss_cls: 0.1189  loss_box_reg: 0.1739  loss_rpn_cls: 0.08277  loss_rpn_loc: 0.1121  time: 0.9457  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:00:17] d2.utils.events INFO:  eta: 5:14:25  iter: 3999  total_loss: 0.5335  loss_cls: 0.1239  loss_box_reg: 0.2047  loss_rpn_cls: 0.09126  loss_rpn_loc: 0.1346  time: 0.9457  data_time: 0.0154  lr: 0.02  max_mem: 19359M
[01/10 20:00:36] d2.utils.events INFO:  eta: 5:14:11  iter: 4019  total_loss: 0.5214  loss_cls: 0.1146  loss_box_reg: 0.1792  loss_rpn_cls: 0.08472  loss_rpn_loc: 0.1192  time: 0.9457  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 20:00:55] d2.utils.events INFO:  eta: 5:13:54  iter: 4039  total_loss: 0.4544  loss_cls: 0.1059  loss_box_reg: 0.1665  loss_rpn_cls: 0.08124  loss_rpn_loc: 0.1117  time: 0.9457  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:01:14] d2.utils.events INFO:  eta: 5:13:34  iter: 4059  total_loss: 0.4899  loss_cls: 0.1112  loss_box_reg: 0.1792  loss_rpn_cls: 0.08481  loss_rpn_loc: 0.1143  time: 0.9457  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:01:33] d2.utils.events INFO:  eta: 5:13:22  iter: 4079  total_loss: 0.487  loss_cls: 0.1055  loss_box_reg: 0.171  loss_rpn_cls: 0.08373  loss_rpn_loc: 0.1121  time: 0.9457  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:01:52] d2.utils.events INFO:  eta: 5:13:06  iter: 4099  total_loss: 0.5297  loss_cls: 0.1196  loss_box_reg: 0.1565  loss_rpn_cls: 0.09321  loss_rpn_loc: 0.1295  time: 0.9457  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 20:02:11] d2.utils.events INFO:  eta: 5:12:46  iter: 4119  total_loss: 0.4996  loss_cls: 0.1144  loss_box_reg: 0.178  loss_rpn_cls: 0.08606  loss_rpn_loc: 0.1231  time: 0.9457  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 20:02:30] d2.utils.events INFO:  eta: 5:12:26  iter: 4139  total_loss: 0.5012  loss_cls: 0.1054  loss_box_reg: 0.1666  loss_rpn_cls: 0.08395  loss_rpn_loc: 0.1314  time: 0.9457  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:02:48] d2.utils.events INFO:  eta: 5:12:07  iter: 4159  total_loss: 0.5287  loss_cls: 0.1251  loss_box_reg: 0.1874  loss_rpn_cls: 0.09018  loss_rpn_loc: 0.1069  time: 0.9457  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 20:03:07] d2.utils.events INFO:  eta: 5:11:45  iter: 4179  total_loss: 0.5315  loss_cls: 0.1161  loss_box_reg: 0.1834  loss_rpn_cls: 0.08946  loss_rpn_loc: 0.1388  time: 0.9457  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 20:03:26] d2.utils.events INFO:  eta: 5:11:26  iter: 4199  total_loss: 0.4816  loss_cls: 0.1121  loss_box_reg: 0.1581  loss_rpn_cls: 0.09215  loss_rpn_loc: 0.1262  time: 0.9457  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 20:03:45] d2.utils.events INFO:  eta: 5:11:09  iter: 4219  total_loss: 0.5146  loss_cls: 0.1117  loss_box_reg: 0.1762  loss_rpn_cls: 0.0963  loss_rpn_loc: 0.1202  time: 0.9457  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:04:04] d2.utils.events INFO:  eta: 5:10:55  iter: 4239  total_loss: 0.5092  loss_cls: 0.1117  loss_box_reg: 0.1823  loss_rpn_cls: 0.09014  loss_rpn_loc: 0.1378  time: 0.9457  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 20:04:23] d2.utils.events INFO:  eta: 5:10:37  iter: 4259  total_loss: 0.4859  loss_cls: 0.108  loss_box_reg: 0.1644  loss_rpn_cls: 0.09818  loss_rpn_loc: 0.1168  time: 0.9456  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 20:04:42] d2.utils.events INFO:  eta: 5:10:20  iter: 4279  total_loss: 0.5225  loss_cls: 0.1154  loss_box_reg: 0.1836  loss_rpn_cls: 0.09595  loss_rpn_loc: 0.1221  time: 0.9456  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:05:00] d2.utils.events INFO:  eta: 5:09:58  iter: 4299  total_loss: 0.4912  loss_cls: 0.1145  loss_box_reg: 0.1687  loss_rpn_cls: 0.08732  loss_rpn_loc: 0.1209  time: 0.9456  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 20:05:19] d2.utils.events INFO:  eta: 5:09:42  iter: 4319  total_loss: 0.5515  loss_cls: 0.133  loss_box_reg: 0.2003  loss_rpn_cls: 0.09128  loss_rpn_loc: 0.1226  time: 0.9456  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:05:38] d2.utils.events INFO:  eta: 5:09:22  iter: 4339  total_loss: 0.5246  loss_cls: 0.123  loss_box_reg: 0.1882  loss_rpn_cls: 0.09508  loss_rpn_loc: 0.1347  time: 0.9456  data_time: 0.0149  lr: 0.02  max_mem: 19359M
[01/10 20:05:57] d2.utils.events INFO:  eta: 5:09:06  iter: 4359  total_loss: 0.529  loss_cls: 0.121  loss_box_reg: 0.183  loss_rpn_cls: 0.09661  loss_rpn_loc: 0.1394  time: 0.9455  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:06:16] d2.utils.events INFO:  eta: 5:08:51  iter: 4379  total_loss: 0.5117  loss_cls: 0.1068  loss_box_reg: 0.166  loss_rpn_cls: 0.08407  loss_rpn_loc: 0.1241  time: 0.9455  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 20:06:35] d2.utils.events INFO:  eta: 5:08:34  iter: 4399  total_loss: 0.5633  loss_cls: 0.1208  loss_box_reg: 0.1806  loss_rpn_cls: 0.08827  loss_rpn_loc: 0.1515  time: 0.9456  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 20:06:54] d2.utils.events INFO:  eta: 5:08:13  iter: 4419  total_loss: 0.5167  loss_cls: 0.119  loss_box_reg: 0.1885  loss_rpn_cls: 0.08182  loss_rpn_loc: 0.1211  time: 0.9456  data_time: 0.0149  lr: 0.02  max_mem: 19359M
[01/10 20:07:13] d2.utils.events INFO:  eta: 5:07:55  iter: 4439  total_loss: 0.5433  loss_cls: 0.1446  loss_box_reg: 0.1952  loss_rpn_cls: 0.0884  loss_rpn_loc: 0.1172  time: 0.9456  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:07:32] d2.utils.events INFO:  eta: 5:07:37  iter: 4459  total_loss: 0.5153  loss_cls: 0.1186  loss_box_reg: 0.1808  loss_rpn_cls: 0.09313  loss_rpn_loc: 0.1128  time: 0.9456  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:07:51] d2.utils.events INFO:  eta: 5:07:17  iter: 4479  total_loss: 0.5167  loss_cls: 0.1332  loss_box_reg: 0.1847  loss_rpn_cls: 0.09267  loss_rpn_loc: 0.1162  time: 0.9456  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:08:10] d2.utils.events INFO:  eta: 5:07:01  iter: 4499  total_loss: 0.4966  loss_cls: 0.09629  loss_box_reg: 0.1498  loss_rpn_cls: 0.08957  loss_rpn_loc: 0.1174  time: 0.9456  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 20:08:28] d2.utils.events INFO:  eta: 5:06:41  iter: 4519  total_loss: 0.5425  loss_cls: 0.1331  loss_box_reg: 0.2075  loss_rpn_cls: 0.09341  loss_rpn_loc: 0.1131  time: 0.9456  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:08:47] d2.utils.events INFO:  eta: 5:06:22  iter: 4539  total_loss: 0.5413  loss_cls: 0.1388  loss_box_reg: 0.2094  loss_rpn_cls: 0.09923  loss_rpn_loc: 0.128  time: 0.9456  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 20:09:06] d2.utils.events INFO:  eta: 5:06:04  iter: 4559  total_loss: 0.5114  loss_cls: 0.1152  loss_box_reg: 0.1662  loss_rpn_cls: 0.08991  loss_rpn_loc: 0.1244  time: 0.9455  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:09:25] d2.utils.events INFO:  eta: 5:05:46  iter: 4579  total_loss: 0.5437  loss_cls: 0.1278  loss_box_reg: 0.183  loss_rpn_cls: 0.0964  loss_rpn_loc: 0.1283  time: 0.9456  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:09:44] d2.utils.events INFO:  eta: 5:05:28  iter: 4599  total_loss: 0.4685  loss_cls: 0.1072  loss_box_reg: 0.159  loss_rpn_cls: 0.08315  loss_rpn_loc: 0.1029  time: 0.9456  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 20:10:03] d2.utils.events INFO:  eta: 5:05:16  iter: 4619  total_loss: 0.512  loss_cls: 0.1208  loss_box_reg: 0.1986  loss_rpn_cls: 0.08884  loss_rpn_loc: 0.1121  time: 0.9456  data_time: 0.0144  lr: 0.02  max_mem: 19359M
[01/10 20:10:22] d2.utils.events INFO:  eta: 5:04:57  iter: 4639  total_loss: 0.5156  loss_cls: 0.1249  loss_box_reg: 0.1708  loss_rpn_cls: 0.09208  loss_rpn_loc: 0.1155  time: 0.9456  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 20:10:41] d2.utils.events INFO:  eta: 5:04:43  iter: 4659  total_loss: 0.5147  loss_cls: 0.1183  loss_box_reg: 0.1791  loss_rpn_cls: 0.09424  loss_rpn_loc: 0.1304  time: 0.9456  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 20:11:00] d2.utils.events INFO:  eta: 5:04:24  iter: 4679  total_loss: 0.5364  loss_cls: 0.129  loss_box_reg: 0.2022  loss_rpn_cls: 0.08221  loss_rpn_loc: 0.1272  time: 0.9456  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:11:19] d2.utils.events INFO:  eta: 5:04:06  iter: 4699  total_loss: 0.513  loss_cls: 0.1199  loss_box_reg: 0.1822  loss_rpn_cls: 0.0923  loss_rpn_loc: 0.1407  time: 0.9456  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:11:38] d2.utils.events INFO:  eta: 5:03:46  iter: 4719  total_loss: 0.5234  loss_cls: 0.1125  loss_box_reg: 0.1872  loss_rpn_cls: 0.08966  loss_rpn_loc: 0.1386  time: 0.9455  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 20:11:56] d2.utils.events INFO:  eta: 5:03:27  iter: 4739  total_loss: 0.4606  loss_cls: 0.1074  loss_box_reg: 0.1585  loss_rpn_cls: 0.0848  loss_rpn_loc: 0.1196  time: 0.9455  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 20:12:16] d2.utils.events INFO:  eta: 5:03:09  iter: 4759  total_loss: 0.5549  loss_cls: 0.1259  loss_box_reg: 0.189  loss_rpn_cls: 0.09389  loss_rpn_loc: 0.1373  time: 0.9456  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 20:12:35] d2.utils.events INFO:  eta: 5:02:50  iter: 4779  total_loss: 0.5193  loss_cls: 0.1145  loss_box_reg: 0.1775  loss_rpn_cls: 0.0864  loss_rpn_loc: 0.1337  time: 0.9456  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:12:54] d2.utils.events INFO:  eta: 5:02:34  iter: 4799  total_loss: 0.5803  loss_cls: 0.1372  loss_box_reg: 0.2251  loss_rpn_cls: 0.09402  loss_rpn_loc: 0.1362  time: 0.9456  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:13:12] d2.utils.events INFO:  eta: 5:02:12  iter: 4819  total_loss: 0.5117  loss_cls: 0.114  loss_box_reg: 0.1655  loss_rpn_cls: 0.08799  loss_rpn_loc: 0.13  time: 0.9456  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:13:31] d2.utils.events INFO:  eta: 5:01:55  iter: 4839  total_loss: 0.5196  loss_cls: 0.1162  loss_box_reg: 0.1826  loss_rpn_cls: 0.08699  loss_rpn_loc: 0.1277  time: 0.9456  data_time: 0.0141  lr: 0.02  max_mem: 19359M
[01/10 20:13:50] d2.utils.events INFO:  eta: 5:01:37  iter: 4859  total_loss: 0.5195  loss_cls: 0.1189  loss_box_reg: 0.1906  loss_rpn_cls: 0.09695  loss_rpn_loc: 0.1241  time: 0.9456  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 20:14:09] d2.utils.events INFO:  eta: 5:01:20  iter: 4879  total_loss: 0.555  loss_cls: 0.1255  loss_box_reg: 0.1821  loss_rpn_cls: 0.08994  loss_rpn_loc: 0.1318  time: 0.9456  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:14:28] d2.utils.events INFO:  eta: 5:00:56  iter: 4899  total_loss: 0.5263  loss_cls: 0.1202  loss_box_reg: 0.1725  loss_rpn_cls: 0.08693  loss_rpn_loc: 0.1289  time: 0.9456  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:14:47] d2.utils.events INFO:  eta: 5:00:39  iter: 4919  total_loss: 0.5785  loss_cls: 0.1326  loss_box_reg: 0.2056  loss_rpn_cls: 0.1094  loss_rpn_loc: 0.1305  time: 0.9457  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:15:07] d2.utils.events INFO:  eta: 5:00:25  iter: 4939  total_loss: 0.4671  loss_cls: 0.1036  loss_box_reg: 0.1594  loss_rpn_cls: 0.07908  loss_rpn_loc: 0.1172  time: 0.9457  data_time: 0.0222  lr: 0.02  max_mem: 19359M
[01/10 20:15:26] d2.utils.events INFO:  eta: 5:00:11  iter: 4959  total_loss: 0.5195  loss_cls: 0.1175  loss_box_reg: 0.191  loss_rpn_cls: 0.08397  loss_rpn_loc: 0.1184  time: 0.9458  data_time: 0.0172  lr: 0.02  max_mem: 19359M
[01/10 20:15:45] d2.utils.events INFO:  eta: 4:59:49  iter: 4979  total_loss: 0.4934  loss_cls: 0.1015  loss_box_reg: 0.1642  loss_rpn_cls: 0.08505  loss_rpn_loc: 0.1159  time: 0.9458  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 20:16:04] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/model_0004999.pth
[01/10 20:16:04] d2.utils.events INFO:  eta: 4:59:28  iter: 4999  total_loss: 0.4696  loss_cls: 0.1057  loss_box_reg: 0.1568  loss_rpn_cls: 0.08474  loss_rpn_loc: 0.1245  time: 0.9458  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:16:23] d2.utils.events INFO:  eta: 4:59:09  iter: 5019  total_loss: 0.5207  loss_cls: 0.1215  loss_box_reg: 0.1792  loss_rpn_cls: 0.08414  loss_rpn_loc: 0.1324  time: 0.9458  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:16:42] d2.utils.events INFO:  eta: 4:58:54  iter: 5039  total_loss: 0.5535  loss_cls: 0.1172  loss_box_reg: 0.1818  loss_rpn_cls: 0.0898  loss_rpn_loc: 0.1225  time: 0.9459  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:17:01] d2.utils.events INFO:  eta: 4:58:34  iter: 5059  total_loss: 0.5115  loss_cls: 0.1157  loss_box_reg: 0.189  loss_rpn_cls: 0.08721  loss_rpn_loc: 0.1126  time: 0.9459  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:17:20] d2.utils.events INFO:  eta: 4:58:17  iter: 5079  total_loss: 0.4754  loss_cls: 0.1077  loss_box_reg: 0.1584  loss_rpn_cls: 0.08694  loss_rpn_loc: 0.122  time: 0.9459  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:17:39] d2.utils.events INFO:  eta: 4:57:55  iter: 5099  total_loss: 0.5177  loss_cls: 0.1155  loss_box_reg: 0.1672  loss_rpn_cls: 0.08467  loss_rpn_loc: 0.1264  time: 0.9459  data_time: 0.0152  lr: 0.02  max_mem: 19359M
[01/10 20:17:58] d2.utils.events INFO:  eta: 4:57:44  iter: 5119  total_loss: 0.5218  loss_cls: 0.1232  loss_box_reg: 0.1769  loss_rpn_cls: 0.091  loss_rpn_loc: 0.1207  time: 0.9459  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 20:18:17] d2.utils.events INFO:  eta: 4:57:25  iter: 5139  total_loss: 0.4813  loss_cls: 0.112  loss_box_reg: 0.1664  loss_rpn_cls: 0.08102  loss_rpn_loc: 0.1275  time: 0.9459  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:18:36] d2.utils.events INFO:  eta: 4:57:03  iter: 5159  total_loss: 0.4614  loss_cls: 0.1112  loss_box_reg: 0.1614  loss_rpn_cls: 0.08466  loss_rpn_loc: 0.1182  time: 0.9459  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 20:18:55] d2.utils.events INFO:  eta: 4:56:49  iter: 5179  total_loss: 0.4719  loss_cls: 0.1042  loss_box_reg: 0.158  loss_rpn_cls: 0.09727  loss_rpn_loc: 0.1274  time: 0.9459  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 20:19:14] d2.utils.events INFO:  eta: 4:56:29  iter: 5199  total_loss: 0.502  loss_cls: 0.1198  loss_box_reg: 0.1744  loss_rpn_cls: 0.08611  loss_rpn_loc: 0.1289  time: 0.9459  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:19:33] d2.utils.events INFO:  eta: 4:56:08  iter: 5219  total_loss: 0.5078  loss_cls: 0.1251  loss_box_reg: 0.1801  loss_rpn_cls: 0.07973  loss_rpn_loc: 0.1332  time: 0.9459  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 20:19:51] d2.utils.events INFO:  eta: 4:55:47  iter: 5239  total_loss: 0.5045  loss_cls: 0.1101  loss_box_reg: 0.1843  loss_rpn_cls: 0.08286  loss_rpn_loc: 0.1145  time: 0.9459  data_time: 0.0144  lr: 0.02  max_mem: 19359M
[01/10 20:20:10] d2.utils.events INFO:  eta: 4:55:33  iter: 5259  total_loss: 0.5157  loss_cls: 0.1293  loss_box_reg: 0.1746  loss_rpn_cls: 0.08638  loss_rpn_loc: 0.1288  time: 0.9459  data_time: 0.0184  lr: 0.02  max_mem: 19359M
[01/10 20:20:29] d2.utils.events INFO:  eta: 4:55:15  iter: 5279  total_loss: 0.5126  loss_cls: 0.1105  loss_box_reg: 0.1782  loss_rpn_cls: 0.08911  loss_rpn_loc: 0.1331  time: 0.9459  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:20:48] d2.utils.events INFO:  eta: 4:54:57  iter: 5299  total_loss: 0.5221  loss_cls: 0.09481  loss_box_reg: 0.1661  loss_rpn_cls: 0.08049  loss_rpn_loc: 0.1341  time: 0.9459  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 20:21:07] d2.utils.events INFO:  eta: 4:54:36  iter: 5319  total_loss: 0.4943  loss_cls: 0.1048  loss_box_reg: 0.1657  loss_rpn_cls: 0.08817  loss_rpn_loc: 0.1219  time: 0.9458  data_time: 0.0141  lr: 0.02  max_mem: 19359M
[01/10 20:21:26] d2.utils.events INFO:  eta: 4:54:17  iter: 5339  total_loss: 0.4546  loss_cls: 0.106  loss_box_reg: 0.1619  loss_rpn_cls: 0.08169  loss_rpn_loc: 0.1023  time: 0.9458  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:21:45] d2.utils.events INFO:  eta: 4:54:00  iter: 5359  total_loss: 0.5121  loss_cls: 0.1048  loss_box_reg: 0.1703  loss_rpn_cls: 0.09222  loss_rpn_loc: 0.1413  time: 0.9458  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 20:22:04] d2.utils.events INFO:  eta: 4:53:41  iter: 5379  total_loss: 0.5239  loss_cls: 0.123  loss_box_reg: 0.1843  loss_rpn_cls: 0.08717  loss_rpn_loc: 0.1241  time: 0.9458  data_time: 0.0142  lr: 0.02  max_mem: 19359M
[01/10 20:22:23] d2.utils.events INFO:  eta: 4:53:20  iter: 5399  total_loss: 0.5459  loss_cls: 0.1383  loss_box_reg: 0.1969  loss_rpn_cls: 0.09314  loss_rpn_loc: 0.1303  time: 0.9458  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:22:42] d2.utils.events INFO:  eta: 4:53:02  iter: 5419  total_loss: 0.4822  loss_cls: 0.109  loss_box_reg: 0.1701  loss_rpn_cls: 0.08163  loss_rpn_loc: 0.1229  time: 0.9458  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 20:23:00] d2.utils.events INFO:  eta: 4:52:43  iter: 5439  total_loss: 0.4805  loss_cls: 0.1087  loss_box_reg: 0.1697  loss_rpn_cls: 0.08376  loss_rpn_loc: 0.1133  time: 0.9458  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:23:19] d2.utils.events INFO:  eta: 4:52:19  iter: 5459  total_loss: 0.4888  loss_cls: 0.108  loss_box_reg: 0.1649  loss_rpn_cls: 0.08891  loss_rpn_loc: 0.1041  time: 0.9458  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:23:38] d2.utils.events INFO:  eta: 4:51:57  iter: 5479  total_loss: 0.4644  loss_cls: 0.1111  loss_box_reg: 0.1534  loss_rpn_cls: 0.0871  loss_rpn_loc: 0.1188  time: 0.9458  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:23:57] d2.utils.events INFO:  eta: 4:51:34  iter: 5499  total_loss: 0.5084  loss_cls: 0.1098  loss_box_reg: 0.1816  loss_rpn_cls: 0.09183  loss_rpn_loc: 0.1277  time: 0.9458  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:24:16] d2.utils.events INFO:  eta: 4:51:19  iter: 5519  total_loss: 0.5359  loss_cls: 0.1181  loss_box_reg: 0.1818  loss_rpn_cls: 0.08711  loss_rpn_loc: 0.1231  time: 0.9457  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 20:24:35] d2.utils.events INFO:  eta: 4:51:06  iter: 5539  total_loss: 0.5114  loss_cls: 0.1175  loss_box_reg: 0.1767  loss_rpn_cls: 0.08679  loss_rpn_loc: 0.1248  time: 0.9458  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 20:24:54] d2.utils.events INFO:  eta: 4:50:49  iter: 5559  total_loss: 0.5377  loss_cls: 0.1203  loss_box_reg: 0.1862  loss_rpn_cls: 0.09459  loss_rpn_loc: 0.117  time: 0.9458  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:25:13] d2.utils.events INFO:  eta: 4:50:22  iter: 5579  total_loss: 0.5206  loss_cls: 0.1162  loss_box_reg: 0.1812  loss_rpn_cls: 0.07972  loss_rpn_loc: 0.1296  time: 0.9458  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 20:25:32] d2.utils.events INFO:  eta: 4:50:03  iter: 5599  total_loss: 0.505  loss_cls: 0.1187  loss_box_reg: 0.1704  loss_rpn_cls: 0.07469  loss_rpn_loc: 0.1218  time: 0.9458  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 20:25:51] d2.utils.events INFO:  eta: 4:49:39  iter: 5619  total_loss: 0.4888  loss_cls: 0.1162  loss_box_reg: 0.1877  loss_rpn_cls: 0.07471  loss_rpn_loc: 0.1173  time: 0.9458  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:26:09] d2.utils.events INFO:  eta: 4:49:18  iter: 5639  total_loss: 0.5257  loss_cls: 0.1199  loss_box_reg: 0.1945  loss_rpn_cls: 0.08299  loss_rpn_loc: 0.136  time: 0.9457  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:26:28] d2.utils.events INFO:  eta: 4:48:57  iter: 5659  total_loss: 0.4898  loss_cls: 0.1141  loss_box_reg: 0.1731  loss_rpn_cls: 0.08831  loss_rpn_loc: 0.1247  time: 0.9458  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 20:26:47] d2.utils.events INFO:  eta: 4:48:41  iter: 5679  total_loss: 0.5171  loss_cls: 0.12  loss_box_reg: 0.181  loss_rpn_cls: 0.08756  loss_rpn_loc: 0.1277  time: 0.9457  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 20:27:06] d2.utils.events INFO:  eta: 4:48:21  iter: 5699  total_loss: 0.4705  loss_cls: 0.1043  loss_box_reg: 0.1647  loss_rpn_cls: 0.08144  loss_rpn_loc: 0.1163  time: 0.9457  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:27:25] d2.utils.events INFO:  eta: 4:48:03  iter: 5719  total_loss: 0.4817  loss_cls: 0.1012  loss_box_reg: 0.1697  loss_rpn_cls: 0.09179  loss_rpn_loc: 0.121  time: 0.9457  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 20:27:44] d2.utils.events INFO:  eta: 4:47:49  iter: 5739  total_loss: 0.4626  loss_cls: 0.1147  loss_box_reg: 0.1549  loss_rpn_cls: 0.08996  loss_rpn_loc: 0.1147  time: 0.9457  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 20:28:03] d2.utils.events INFO:  eta: 4:47:23  iter: 5759  total_loss: 0.4702  loss_cls: 0.1089  loss_box_reg: 0.161  loss_rpn_cls: 0.08141  loss_rpn_loc: 0.1173  time: 0.9457  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:28:22] d2.utils.events INFO:  eta: 4:47:10  iter: 5779  total_loss: 0.4907  loss_cls: 0.1064  loss_box_reg: 0.1521  loss_rpn_cls: 0.08653  loss_rpn_loc: 0.1437  time: 0.9458  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 20:28:41] d2.utils.events INFO:  eta: 4:46:51  iter: 5799  total_loss: 0.4991  loss_cls: 0.112  loss_box_reg: 0.1684  loss_rpn_cls: 0.07419  loss_rpn_loc: 0.1225  time: 0.9458  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:29:00] d2.utils.events INFO:  eta: 4:46:30  iter: 5819  total_loss: 0.4698  loss_cls: 0.09283  loss_box_reg: 0.1646  loss_rpn_cls: 0.08412  loss_rpn_loc: 0.1182  time: 0.9458  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:29:19] d2.utils.events INFO:  eta: 4:46:09  iter: 5839  total_loss: 0.4784  loss_cls: 0.1064  loss_box_reg: 0.183  loss_rpn_cls: 0.08002  loss_rpn_loc: 0.1149  time: 0.9458  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 20:29:38] d2.utils.events INFO:  eta: 4:45:50  iter: 5859  total_loss: 0.473  loss_cls: 0.1142  loss_box_reg: 0.1673  loss_rpn_cls: 0.08017  loss_rpn_loc: 0.1263  time: 0.9458  data_time: 0.0147  lr: 0.02  max_mem: 19359M
[01/10 20:29:57] d2.utils.events INFO:  eta: 4:45:35  iter: 5879  total_loss: 0.4797  loss_cls: 0.1011  loss_box_reg: 0.16  loss_rpn_cls: 0.07608  loss_rpn_loc: 0.1221  time: 0.9458  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 20:30:15] d2.utils.events INFO:  eta: 4:45:10  iter: 5899  total_loss: 0.5245  loss_cls: 0.1169  loss_box_reg: 0.1888  loss_rpn_cls: 0.08223  loss_rpn_loc: 0.1196  time: 0.9458  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 20:30:34] d2.utils.events INFO:  eta: 4:44:53  iter: 5919  total_loss: 0.4903  loss_cls: 0.1091  loss_box_reg: 0.1617  loss_rpn_cls: 0.08475  loss_rpn_loc: 0.1264  time: 0.9458  data_time: 0.0141  lr: 0.02  max_mem: 19359M
[01/10 20:30:53] d2.utils.events INFO:  eta: 4:44:33  iter: 5939  total_loss: 0.4847  loss_cls: 0.1052  loss_box_reg: 0.1682  loss_rpn_cls: 0.08514  loss_rpn_loc: 0.1252  time: 0.9458  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:31:12] d2.utils.events INFO:  eta: 4:44:11  iter: 5959  total_loss: 0.5121  loss_cls: 0.1031  loss_box_reg: 0.1713  loss_rpn_cls: 0.07781  loss_rpn_loc: 0.1236  time: 0.9457  data_time: 0.0151  lr: 0.02  max_mem: 19359M
[01/10 20:31:31] d2.utils.events INFO:  eta: 4:43:53  iter: 5979  total_loss: 0.4985  loss_cls: 0.1109  loss_box_reg: 0.172  loss_rpn_cls: 0.07919  loss_rpn_loc: 0.1193  time: 0.9457  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 20:31:50] d2.utils.events INFO:  eta: 4:43:35  iter: 5999  total_loss: 0.4625  loss_cls: 0.09866  loss_box_reg: 0.1514  loss_rpn_cls: 0.07791  loss_rpn_loc: 0.1211  time: 0.9457  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 20:32:09] d2.utils.events INFO:  eta: 4:43:15  iter: 6019  total_loss: 0.5004  loss_cls: 0.1012  loss_box_reg: 0.1566  loss_rpn_cls: 0.0868  loss_rpn_loc: 0.1228  time: 0.9457  data_time: 0.0149  lr: 0.02  max_mem: 19359M
[01/10 20:32:28] d2.utils.events INFO:  eta: 4:42:55  iter: 6039  total_loss: 0.4465  loss_cls: 0.09273  loss_box_reg: 0.1559  loss_rpn_cls: 0.08097  loss_rpn_loc: 0.1122  time: 0.9457  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:32:47] d2.utils.events INFO:  eta: 4:42:39  iter: 6059  total_loss: 0.4582  loss_cls: 0.1039  loss_box_reg: 0.1719  loss_rpn_cls: 0.08116  loss_rpn_loc: 0.1237  time: 0.9457  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:33:06] d2.utils.events INFO:  eta: 4:42:19  iter: 6079  total_loss: 0.5055  loss_cls: 0.1078  loss_box_reg: 0.1625  loss_rpn_cls: 0.08708  loss_rpn_loc: 0.1278  time: 0.9457  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:33:24] d2.utils.events INFO:  eta: 4:41:59  iter: 6099  total_loss: 0.5111  loss_cls: 0.1151  loss_box_reg: 0.1713  loss_rpn_cls: 0.08352  loss_rpn_loc: 0.1111  time: 0.9457  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:33:43] d2.utils.events INFO:  eta: 4:41:39  iter: 6119  total_loss: 0.5154  loss_cls: 0.1145  loss_box_reg: 0.1809  loss_rpn_cls: 0.07988  loss_rpn_loc: 0.116  time: 0.9457  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:34:02] d2.utils.events INFO:  eta: 4:41:23  iter: 6139  total_loss: 0.4328  loss_cls: 0.09328  loss_box_reg: 0.1655  loss_rpn_cls: 0.07421  loss_rpn_loc: 0.1143  time: 0.9457  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 20:34:21] d2.utils.events INFO:  eta: 4:41:02  iter: 6159  total_loss: 0.4589  loss_cls: 0.0973  loss_box_reg: 0.1557  loss_rpn_cls: 0.07888  loss_rpn_loc: 0.1177  time: 0.9457  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:34:40] d2.utils.events INFO:  eta: 4:40:42  iter: 6179  total_loss: 0.5324  loss_cls: 0.1229  loss_box_reg: 0.1927  loss_rpn_cls: 0.09454  loss_rpn_loc: 0.1228  time: 0.9457  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 20:34:59] d2.utils.events INFO:  eta: 4:40:24  iter: 6199  total_loss: 0.4826  loss_cls: 0.1064  loss_box_reg: 0.1661  loss_rpn_cls: 0.07721  loss_rpn_loc: 0.1308  time: 0.9457  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 20:35:18] d2.utils.events INFO:  eta: 4:40:07  iter: 6219  total_loss: 0.4731  loss_cls: 0.1048  loss_box_reg: 0.1543  loss_rpn_cls: 0.0872  loss_rpn_loc: 0.1122  time: 0.9457  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 20:35:37] d2.utils.events INFO:  eta: 4:39:49  iter: 6239  total_loss: 0.5188  loss_cls: 0.1074  loss_box_reg: 0.1746  loss_rpn_cls: 0.09248  loss_rpn_loc: 0.1319  time: 0.9457  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 20:35:56] d2.utils.events INFO:  eta: 4:39:31  iter: 6259  total_loss: 0.5086  loss_cls: 0.1071  loss_box_reg: 0.1686  loss_rpn_cls: 0.08705  loss_rpn_loc: 0.1338  time: 0.9457  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:36:15] d2.utils.events INFO:  eta: 4:39:11  iter: 6279  total_loss: 0.479  loss_cls: 0.1067  loss_box_reg: 0.1728  loss_rpn_cls: 0.08291  loss_rpn_loc: 0.1117  time: 0.9457  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 20:36:34] d2.utils.events INFO:  eta: 4:38:52  iter: 6299  total_loss: 0.4695  loss_cls: 0.1071  loss_box_reg: 0.1687  loss_rpn_cls: 0.078  loss_rpn_loc: 0.1168  time: 0.9457  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 20:36:53] d2.utils.events INFO:  eta: 4:38:33  iter: 6319  total_loss: 0.4785  loss_cls: 0.1146  loss_box_reg: 0.1782  loss_rpn_cls: 0.08001  loss_rpn_loc: 0.1343  time: 0.9457  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:37:12] d2.utils.events INFO:  eta: 4:38:19  iter: 6339  total_loss: 0.4964  loss_cls: 0.09883  loss_box_reg: 0.1596  loss_rpn_cls: 0.08201  loss_rpn_loc: 0.1244  time: 0.9457  data_time: 0.0142  lr: 0.02  max_mem: 19359M
[01/10 20:37:31] d2.utils.events INFO:  eta: 4:37:58  iter: 6359  total_loss: 0.5127  loss_cls: 0.1103  loss_box_reg: 0.1673  loss_rpn_cls: 0.07987  loss_rpn_loc: 0.1266  time: 0.9457  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:37:50] d2.utils.events INFO:  eta: 4:37:41  iter: 6379  total_loss: 0.5043  loss_cls: 0.1152  loss_box_reg: 0.1792  loss_rpn_cls: 0.08484  loss_rpn_loc: 0.13  time: 0.9458  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 20:38:09] d2.utils.events INFO:  eta: 4:37:24  iter: 6399  total_loss: 0.4934  loss_cls: 0.1144  loss_box_reg: 0.1763  loss_rpn_cls: 0.07563  loss_rpn_loc: 0.1175  time: 0.9458  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:38:27] d2.utils.events INFO:  eta: 4:37:06  iter: 6419  total_loss: 0.475  loss_cls: 0.1122  loss_box_reg: 0.1721  loss_rpn_cls: 0.07773  loss_rpn_loc: 0.1228  time: 0.9458  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 20:38:46] d2.utils.events INFO:  eta: 4:36:47  iter: 6439  total_loss: 0.4869  loss_cls: 0.1087  loss_box_reg: 0.141  loss_rpn_cls: 0.09211  loss_rpn_loc: 0.1319  time: 0.9457  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 20:39:05] d2.utils.events INFO:  eta: 4:36:33  iter: 6459  total_loss: 0.5246  loss_cls: 0.113  loss_box_reg: 0.174  loss_rpn_cls: 0.0926  loss_rpn_loc: 0.1174  time: 0.9457  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 20:39:24] d2.utils.events INFO:  eta: 4:36:14  iter: 6479  total_loss: 0.5256  loss_cls: 0.1207  loss_box_reg: 0.2008  loss_rpn_cls: 0.08315  loss_rpn_loc: 0.1105  time: 0.9458  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 20:39:43] d2.utils.events INFO:  eta: 4:35:56  iter: 6499  total_loss: 0.486  loss_cls: 0.116  loss_box_reg: 0.174  loss_rpn_cls: 0.07914  loss_rpn_loc: 0.1168  time: 0.9458  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:40:02] d2.utils.events INFO:  eta: 4:35:37  iter: 6519  total_loss: 0.4824  loss_cls: 0.1088  loss_box_reg: 0.1654  loss_rpn_cls: 0.07666  loss_rpn_loc: 0.09754  time: 0.9458  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 20:40:21] d2.utils.events INFO:  eta: 4:35:18  iter: 6539  total_loss: 0.4731  loss_cls: 0.1019  loss_box_reg: 0.1531  loss_rpn_cls: 0.08324  loss_rpn_loc: 0.1227  time: 0.9458  data_time: 0.0164  lr: 0.02  max_mem: 19359M
[01/10 20:40:40] d2.utils.events INFO:  eta: 4:34:56  iter: 6559  total_loss: 0.5041  loss_cls: 0.1114  loss_box_reg: 0.1716  loss_rpn_cls: 0.08976  loss_rpn_loc: 0.1173  time: 0.9457  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 20:40:59] d2.utils.events INFO:  eta: 4:34:40  iter: 6579  total_loss: 0.5027  loss_cls: 0.1073  loss_box_reg: 0.1685  loss_rpn_cls: 0.07471  loss_rpn_loc: 0.1235  time: 0.9457  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 20:41:18] d2.utils.events INFO:  eta: 4:34:21  iter: 6599  total_loss: 0.4841  loss_cls: 0.1086  loss_box_reg: 0.1576  loss_rpn_cls: 0.08241  loss_rpn_loc: 0.129  time: 0.9457  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:41:37] d2.utils.events INFO:  eta: 4:34:04  iter: 6619  total_loss: 0.4613  loss_cls: 0.1046  loss_box_reg: 0.1627  loss_rpn_cls: 0.07676  loss_rpn_loc: 0.1179  time: 0.9457  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 20:41:55] d2.utils.events INFO:  eta: 4:33:46  iter: 6639  total_loss: 0.5019  loss_cls: 0.1122  loss_box_reg: 0.1804  loss_rpn_cls: 0.07707  loss_rpn_loc: 0.1218  time: 0.9457  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 20:42:14] d2.utils.events INFO:  eta: 4:33:26  iter: 6659  total_loss: 0.5174  loss_cls: 0.1119  loss_box_reg: 0.1898  loss_rpn_cls: 0.08329  loss_rpn_loc: 0.1295  time: 0.9457  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:42:33] d2.utils.events INFO:  eta: 4:33:07  iter: 6679  total_loss: 0.5284  loss_cls: 0.1304  loss_box_reg: 0.183  loss_rpn_cls: 0.08858  loss_rpn_loc: 0.1266  time: 0.9457  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 20:42:52] d2.utils.events INFO:  eta: 4:32:49  iter: 6699  total_loss: 0.4972  loss_cls: 0.1111  loss_box_reg: 0.1701  loss_rpn_cls: 0.09108  loss_rpn_loc: 0.1292  time: 0.9458  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 20:43:11] d2.utils.events INFO:  eta: 4:32:31  iter: 6719  total_loss: 0.4575  loss_cls: 0.09425  loss_box_reg: 0.1572  loss_rpn_cls: 0.08274  loss_rpn_loc: 0.1124  time: 0.9457  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:43:30] d2.utils.events INFO:  eta: 4:32:12  iter: 6739  total_loss: 0.5021  loss_cls: 0.1075  loss_box_reg: 0.1818  loss_rpn_cls: 0.09341  loss_rpn_loc: 0.1148  time: 0.9457  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 20:43:49] d2.utils.events INFO:  eta: 4:31:53  iter: 6759  total_loss: 0.4873  loss_cls: 0.1085  loss_box_reg: 0.159  loss_rpn_cls: 0.07994  loss_rpn_loc: 0.1065  time: 0.9457  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 20:44:08] d2.utils.events INFO:  eta: 4:31:32  iter: 6779  total_loss: 0.484  loss_cls: 0.1092  loss_box_reg: 0.1646  loss_rpn_cls: 0.08179  loss_rpn_loc: 0.1276  time: 0.9457  data_time: 0.0150  lr: 0.02  max_mem: 19359M
[01/10 20:44:27] d2.utils.events INFO:  eta: 4:31:14  iter: 6799  total_loss: 0.4862  loss_cls: 0.1066  loss_box_reg: 0.159  loss_rpn_cls: 0.07779  loss_rpn_loc: 0.137  time: 0.9458  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:44:46] d2.utils.events INFO:  eta: 4:30:55  iter: 6819  total_loss: 0.467  loss_cls: 0.1097  loss_box_reg: 0.1643  loss_rpn_cls: 0.08258  loss_rpn_loc: 0.1213  time: 0.9457  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 20:45:05] d2.utils.events INFO:  eta: 4:30:33  iter: 6839  total_loss: 0.4534  loss_cls: 0.1088  loss_box_reg: 0.1767  loss_rpn_cls: 0.07474  loss_rpn_loc: 0.1068  time: 0.9457  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:45:23] d2.utils.events INFO:  eta: 4:30:09  iter: 6859  total_loss: 0.4655  loss_cls: 0.1056  loss_box_reg: 0.1637  loss_rpn_cls: 0.08493  loss_rpn_loc: 0.1204  time: 0.9457  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 20:45:42] d2.utils.events INFO:  eta: 4:29:46  iter: 6879  total_loss: 0.4568  loss_cls: 0.1058  loss_box_reg: 0.1556  loss_rpn_cls: 0.08104  loss_rpn_loc: 0.1246  time: 0.9457  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:46:01] d2.utils.events INFO:  eta: 4:29:32  iter: 6899  total_loss: 0.4734  loss_cls: 0.09937  loss_box_reg: 0.1544  loss_rpn_cls: 0.07588  loss_rpn_loc: 0.122  time: 0.9457  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:46:20] d2.utils.events INFO:  eta: 4:29:10  iter: 6919  total_loss: 0.5014  loss_cls: 0.1117  loss_box_reg: 0.1941  loss_rpn_cls: 0.08461  loss_rpn_loc: 0.129  time: 0.9457  data_time: 0.0156  lr: 0.02  max_mem: 19359M
[01/10 20:46:39] d2.utils.events INFO:  eta: 4:28:48  iter: 6939  total_loss: 0.5137  loss_cls: 0.1066  loss_box_reg: 0.1766  loss_rpn_cls: 0.08878  loss_rpn_loc: 0.1061  time: 0.9457  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:46:58] d2.utils.events INFO:  eta: 4:28:31  iter: 6959  total_loss: 0.4543  loss_cls: 0.0976  loss_box_reg: 0.1539  loss_rpn_cls: 0.09042  loss_rpn_loc: 0.1128  time: 0.9457  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 20:47:17] d2.utils.events INFO:  eta: 4:28:16  iter: 6979  total_loss: 0.4898  loss_cls: 0.1088  loss_box_reg: 0.1687  loss_rpn_cls: 0.0803  loss_rpn_loc: 0.1154  time: 0.9457  data_time: 0.0159  lr: 0.02  max_mem: 19359M
[01/10 20:47:36] d2.utils.events INFO:  eta: 4:27:57  iter: 6999  total_loss: 0.478  loss_cls: 0.106  loss_box_reg: 0.1551  loss_rpn_cls: 0.08301  loss_rpn_loc: 0.1227  time: 0.9457  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 20:47:55] d2.utils.events INFO:  eta: 4:27:37  iter: 7019  total_loss: 0.4971  loss_cls: 0.1078  loss_box_reg: 0.1709  loss_rpn_cls: 0.08159  loss_rpn_loc: 0.1181  time: 0.9457  data_time: 0.0160  lr: 0.02  max_mem: 19359M
[01/10 20:48:14] d2.utils.events INFO:  eta: 4:27:16  iter: 7039  total_loss: 0.4427  loss_cls: 0.088  loss_box_reg: 0.1483  loss_rpn_cls: 0.06911  loss_rpn_loc: 0.1093  time: 0.9457  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:48:32] d2.utils.events INFO:  eta: 4:26:55  iter: 7059  total_loss: 0.4605  loss_cls: 0.1074  loss_box_reg: 0.1696  loss_rpn_cls: 0.07295  loss_rpn_loc: 0.1164  time: 0.9457  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:48:51] d2.utils.events INFO:  eta: 4:26:39  iter: 7079  total_loss: 0.463  loss_cls: 0.1063  loss_box_reg: 0.1523  loss_rpn_cls: 0.08043  loss_rpn_loc: 0.135  time: 0.9457  data_time: 0.0147  lr: 0.02  max_mem: 19359M
[01/10 20:49:10] d2.utils.events INFO:  eta: 4:26:18  iter: 7099  total_loss: 0.458  loss_cls: 0.1008  loss_box_reg: 0.171  loss_rpn_cls: 0.07848  loss_rpn_loc: 0.1179  time: 0.9457  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 20:49:29] d2.utils.events INFO:  eta: 4:25:57  iter: 7119  total_loss: 0.4634  loss_cls: 0.1017  loss_box_reg: 0.1685  loss_rpn_cls: 0.08174  loss_rpn_loc: 0.1265  time: 0.9457  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:49:48] d2.utils.events INFO:  eta: 4:25:36  iter: 7139  total_loss: 0.5077  loss_cls: 0.1049  loss_box_reg: 0.1842  loss_rpn_cls: 0.07383  loss_rpn_loc: 0.1111  time: 0.9457  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 20:50:07] d2.utils.events INFO:  eta: 4:25:17  iter: 7159  total_loss: 0.4946  loss_cls: 0.112  loss_box_reg: 0.1738  loss_rpn_cls: 0.07555  loss_rpn_loc: 0.1156  time: 0.9457  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:50:26] d2.utils.events INFO:  eta: 4:24:58  iter: 7179  total_loss: 0.5089  loss_cls: 0.115  loss_box_reg: 0.1669  loss_rpn_cls: 0.0829  loss_rpn_loc: 0.1322  time: 0.9457  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:50:45] d2.utils.events INFO:  eta: 4:24:38  iter: 7199  total_loss: 0.5266  loss_cls: 0.123  loss_box_reg: 0.1616  loss_rpn_cls: 0.09053  loss_rpn_loc: 0.1326  time: 0.9456  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 20:51:04] d2.utils.events INFO:  eta: 4:24:18  iter: 7219  total_loss: 0.4691  loss_cls: 0.099  loss_box_reg: 0.1629  loss_rpn_cls: 0.08367  loss_rpn_loc: 0.1202  time: 0.9456  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:51:22] d2.utils.events INFO:  eta: 4:23:58  iter: 7239  total_loss: 0.4869  loss_cls: 0.1114  loss_box_reg: 0.1669  loss_rpn_cls: 0.08009  loss_rpn_loc: 0.1225  time: 0.9456  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 20:51:41] d2.utils.events INFO:  eta: 4:23:39  iter: 7259  total_loss: 0.4512  loss_cls: 0.1015  loss_box_reg: 0.1565  loss_rpn_cls: 0.07782  loss_rpn_loc: 0.1312  time: 0.9456  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 20:52:00] d2.utils.events INFO:  eta: 4:23:20  iter: 7279  total_loss: 0.4877  loss_cls: 0.1128  loss_box_reg: 0.1751  loss_rpn_cls: 0.0793  loss_rpn_loc: 0.1237  time: 0.9456  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 20:52:19] d2.utils.events INFO:  eta: 4:23:01  iter: 7299  total_loss: 0.4917  loss_cls: 0.1038  loss_box_reg: 0.1726  loss_rpn_cls: 0.08465  loss_rpn_loc: 0.1194  time: 0.9456  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:52:38] d2.utils.events INFO:  eta: 4:22:42  iter: 7319  total_loss: 0.5288  loss_cls: 0.121  loss_box_reg: 0.1908  loss_rpn_cls: 0.08488  loss_rpn_loc: 0.1078  time: 0.9456  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:52:57] d2.utils.events INFO:  eta: 4:22:17  iter: 7339  total_loss: 0.4783  loss_cls: 0.112  loss_box_reg: 0.1566  loss_rpn_cls: 0.08465  loss_rpn_loc: 0.1218  time: 0.9456  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 20:53:16] d2.utils.events INFO:  eta: 4:21:57  iter: 7359  total_loss: 0.4776  loss_cls: 0.1108  loss_box_reg: 0.1756  loss_rpn_cls: 0.07729  loss_rpn_loc: 0.1175  time: 0.9456  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 20:53:35] d2.utils.events INFO:  eta: 4:21:30  iter: 7379  total_loss: 0.4401  loss_cls: 0.09885  loss_box_reg: 0.1458  loss_rpn_cls: 0.07423  loss_rpn_loc: 0.1229  time: 0.9456  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:53:53] d2.utils.events INFO:  eta: 4:21:11  iter: 7399  total_loss: 0.5199  loss_cls: 0.1182  loss_box_reg: 0.179  loss_rpn_cls: 0.0736  loss_rpn_loc: 0.1172  time: 0.9456  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 20:54:12] d2.utils.events INFO:  eta: 4:20:54  iter: 7419  total_loss: 0.4432  loss_cls: 0.09258  loss_box_reg: 0.1476  loss_rpn_cls: 0.08101  loss_rpn_loc: 0.1162  time: 0.9456  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 20:54:31] d2.utils.events INFO:  eta: 4:20:35  iter: 7439  total_loss: 0.4802  loss_cls: 0.1087  loss_box_reg: 0.1618  loss_rpn_cls: 0.0794  loss_rpn_loc: 0.1265  time: 0.9456  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:54:50] d2.utils.events INFO:  eta: 4:20:12  iter: 7459  total_loss: 0.4691  loss_cls: 0.09364  loss_box_reg: 0.1666  loss_rpn_cls: 0.08203  loss_rpn_loc: 0.1074  time: 0.9456  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:55:09] d2.utils.events INFO:  eta: 4:19:53  iter: 7479  total_loss: 0.4833  loss_cls: 0.1049  loss_box_reg: 0.1696  loss_rpn_cls: 0.0808  loss_rpn_loc: 0.1121  time: 0.9455  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 20:55:28] d2.utils.events INFO:  eta: 4:19:31  iter: 7499  total_loss: 0.5405  loss_cls: 0.1179  loss_box_reg: 0.1812  loss_rpn_cls: 0.08793  loss_rpn_loc: 0.1284  time: 0.9455  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 20:55:46] d2.utils.events INFO:  eta: 4:19:15  iter: 7519  total_loss: 0.5205  loss_cls: 0.1166  loss_box_reg: 0.179  loss_rpn_cls: 0.08322  loss_rpn_loc: 0.1287  time: 0.9455  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 20:56:05] d2.utils.events INFO:  eta: 4:18:54  iter: 7539  total_loss: 0.4617  loss_cls: 0.09292  loss_box_reg: 0.1585  loss_rpn_cls: 0.0857  loss_rpn_loc: 0.1116  time: 0.9455  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 20:56:24] d2.utils.events INFO:  eta: 4:18:38  iter: 7559  total_loss: 0.4733  loss_cls: 0.1022  loss_box_reg: 0.1589  loss_rpn_cls: 0.07726  loss_rpn_loc: 0.1069  time: 0.9455  data_time: 0.0148  lr: 0.02  max_mem: 19359M
[01/10 20:56:43] d2.utils.events INFO:  eta: 4:18:15  iter: 7579  total_loss: 0.5027  loss_cls: 0.129  loss_box_reg: 0.2032  loss_rpn_cls: 0.0811  loss_rpn_loc: 0.1131  time: 0.9455  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 20:57:02] d2.utils.events INFO:  eta: 4:17:54  iter: 7599  total_loss: 0.4652  loss_cls: 0.1008  loss_box_reg: 0.1552  loss_rpn_cls: 0.08221  loss_rpn_loc: 0.118  time: 0.9455  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 20:57:21] d2.utils.events INFO:  eta: 4:17:35  iter: 7619  total_loss: 0.4752  loss_cls: 0.09994  loss_box_reg: 0.164  loss_rpn_cls: 0.0871  loss_rpn_loc: 0.1242  time: 0.9455  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 20:57:40] d2.utils.events INFO:  eta: 4:17:13  iter: 7639  total_loss: 0.4557  loss_cls: 0.09806  loss_box_reg: 0.1402  loss_rpn_cls: 0.07908  loss_rpn_loc: 0.1126  time: 0.9455  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 20:57:58] d2.utils.events INFO:  eta: 4:16:53  iter: 7659  total_loss: 0.4433  loss_cls: 0.1001  loss_box_reg: 0.1607  loss_rpn_cls: 0.07502  loss_rpn_loc: 0.103  time: 0.9455  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 20:58:17] d2.utils.events INFO:  eta: 4:16:34  iter: 7679  total_loss: 0.4799  loss_cls: 0.1126  loss_box_reg: 0.1656  loss_rpn_cls: 0.07842  loss_rpn_loc: 0.1236  time: 0.9455  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 20:58:36] d2.utils.events INFO:  eta: 4:16:14  iter: 7699  total_loss: 0.4331  loss_cls: 0.09118  loss_box_reg: 0.1414  loss_rpn_cls: 0.08054  loss_rpn_loc: 0.1184  time: 0.9455  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 20:58:55] d2.utils.events INFO:  eta: 4:15:57  iter: 7719  total_loss: 0.4576  loss_cls: 0.08854  loss_box_reg: 0.1442  loss_rpn_cls: 0.08456  loss_rpn_loc: 0.1278  time: 0.9455  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 20:59:14] d2.utils.events INFO:  eta: 4:15:39  iter: 7739  total_loss: 0.4473  loss_cls: 0.09695  loss_box_reg: 0.1709  loss_rpn_cls: 0.08117  loss_rpn_loc: 0.1114  time: 0.9455  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:59:33] d2.utils.events INFO:  eta: 4:15:25  iter: 7759  total_loss: 0.4595  loss_cls: 0.09485  loss_box_reg: 0.1539  loss_rpn_cls: 0.07679  loss_rpn_loc: 0.1292  time: 0.9455  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 20:59:52] d2.utils.events INFO:  eta: 4:15:06  iter: 7779  total_loss: 0.4478  loss_cls: 0.09246  loss_box_reg: 0.1555  loss_rpn_cls: 0.08054  loss_rpn_loc: 0.1116  time: 0.9455  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 21:00:11] d2.utils.events INFO:  eta: 4:14:45  iter: 7799  total_loss: 0.4457  loss_cls: 0.08776  loss_box_reg: 0.1584  loss_rpn_cls: 0.08486  loss_rpn_loc: 0.1187  time: 0.9455  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:00:30] d2.utils.events INFO:  eta: 4:14:29  iter: 7819  total_loss: 0.4483  loss_cls: 0.09832  loss_box_reg: 0.1553  loss_rpn_cls: 0.08147  loss_rpn_loc: 0.1084  time: 0.9455  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 21:00:49] d2.utils.events INFO:  eta: 4:14:13  iter: 7839  total_loss: 0.5118  loss_cls: 0.1067  loss_box_reg: 0.1735  loss_rpn_cls: 0.08426  loss_rpn_loc: 0.1296  time: 0.9455  data_time: 0.0098  lr: 0.02  max_mem: 19359M
[01/10 21:01:08] d2.utils.events INFO:  eta: 4:13:55  iter: 7859  total_loss: 0.4487  loss_cls: 0.09958  loss_box_reg: 0.1621  loss_rpn_cls: 0.06635  loss_rpn_loc: 0.114  time: 0.9455  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 21:01:26] d2.utils.events INFO:  eta: 4:13:36  iter: 7879  total_loss: 0.4404  loss_cls: 0.09515  loss_box_reg: 0.1713  loss_rpn_cls: 0.07118  loss_rpn_loc: 0.1036  time: 0.9454  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 21:01:45] d2.utils.events INFO:  eta: 4:13:13  iter: 7899  total_loss: 0.4767  loss_cls: 0.1053  loss_box_reg: 0.173  loss_rpn_cls: 0.0782  loss_rpn_loc: 0.1223  time: 0.9454  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:02:04] d2.utils.events INFO:  eta: 4:12:53  iter: 7919  total_loss: 0.4493  loss_cls: 0.0933  loss_box_reg: 0.1558  loss_rpn_cls: 0.07612  loss_rpn_loc: 0.09779  time: 0.9454  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:02:23] d2.utils.events INFO:  eta: 4:12:34  iter: 7939  total_loss: 0.4898  loss_cls: 0.1175  loss_box_reg: 0.1819  loss_rpn_cls: 0.08099  loss_rpn_loc: 0.09533  time: 0.9454  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:02:41] d2.utils.events INFO:  eta: 4:12:14  iter: 7959  total_loss: 0.4899  loss_cls: 0.1102  loss_box_reg: 0.1748  loss_rpn_cls: 0.08279  loss_rpn_loc: 0.1246  time: 0.9454  data_time: 0.0142  lr: 0.02  max_mem: 19359M
[01/10 21:03:00] d2.utils.events INFO:  eta: 4:11:55  iter: 7979  total_loss: 0.4456  loss_cls: 0.09276  loss_box_reg: 0.1496  loss_rpn_cls: 0.06842  loss_rpn_loc: 0.1144  time: 0.9454  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:03:20] d2.utils.events INFO:  eta: 4:11:39  iter: 7999  total_loss: 0.4357  loss_cls: 0.1001  loss_box_reg: 0.1533  loss_rpn_cls: 0.06932  loss_rpn_loc: 0.1178  time: 0.9454  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 21:03:38] d2.utils.events INFO:  eta: 4:11:24  iter: 8019  total_loss: 0.4677  loss_cls: 0.1067  loss_box_reg: 0.1801  loss_rpn_cls: 0.07164  loss_rpn_loc: 0.1113  time: 0.9454  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 21:03:57] d2.utils.events INFO:  eta: 4:11:05  iter: 8039  total_loss: 0.4491  loss_cls: 0.09116  loss_box_reg: 0.1651  loss_rpn_cls: 0.06896  loss_rpn_loc: 0.09789  time: 0.9454  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:04:16] d2.utils.events INFO:  eta: 4:10:43  iter: 8059  total_loss: 0.5272  loss_cls: 0.1214  loss_box_reg: 0.1803  loss_rpn_cls: 0.08573  loss_rpn_loc: 0.1288  time: 0.9454  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:04:35] d2.utils.events INFO:  eta: 4:10:22  iter: 8079  total_loss: 0.461  loss_cls: 0.09855  loss_box_reg: 0.1725  loss_rpn_cls: 0.07011  loss_rpn_loc: 0.1102  time: 0.9454  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:04:54] d2.utils.events INFO:  eta: 4:10:02  iter: 8099  total_loss: 0.4741  loss_cls: 0.104  loss_box_reg: 0.1711  loss_rpn_cls: 0.08243  loss_rpn_loc: 0.1249  time: 0.9454  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:05:13] d2.utils.events INFO:  eta: 4:09:44  iter: 8119  total_loss: 0.4621  loss_cls: 0.08918  loss_box_reg: 0.1466  loss_rpn_cls: 0.07004  loss_rpn_loc: 0.1301  time: 0.9454  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 21:05:32] d2.utils.events INFO:  eta: 4:09:23  iter: 8139  total_loss: 0.4794  loss_cls: 0.1092  loss_box_reg: 0.1671  loss_rpn_cls: 0.08401  loss_rpn_loc: 0.1209  time: 0.9454  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:05:51] d2.utils.events INFO:  eta: 4:09:07  iter: 8159  total_loss: 0.4787  loss_cls: 0.09997  loss_box_reg: 0.1662  loss_rpn_cls: 0.07602  loss_rpn_loc: 0.1306  time: 0.9454  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 21:06:10] d2.utils.events INFO:  eta: 4:08:52  iter: 8179  total_loss: 0.4566  loss_cls: 0.09075  loss_box_reg: 0.1578  loss_rpn_cls: 0.07329  loss_rpn_loc: 0.1299  time: 0.9454  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 21:06:29] d2.utils.events INFO:  eta: 4:08:34  iter: 8199  total_loss: 0.4074  loss_cls: 0.08178  loss_box_reg: 0.1368  loss_rpn_cls: 0.0693  loss_rpn_loc: 0.1084  time: 0.9454  data_time: 0.0162  lr: 0.02  max_mem: 19359M
[01/10 21:06:48] d2.utils.events INFO:  eta: 4:08:14  iter: 8219  total_loss: 0.4049  loss_cls: 0.09675  loss_box_reg: 0.1393  loss_rpn_cls: 0.0776  loss_rpn_loc: 0.117  time: 0.9454  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 21:07:06] d2.utils.events INFO:  eta: 4:07:56  iter: 8239  total_loss: 0.4919  loss_cls: 0.1063  loss_box_reg: 0.1877  loss_rpn_cls: 0.0816  loss_rpn_loc: 0.1224  time: 0.9454  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 21:07:25] d2.utils.events INFO:  eta: 4:07:33  iter: 8259  total_loss: 0.458  loss_cls: 0.1056  loss_box_reg: 0.1542  loss_rpn_cls: 0.08141  loss_rpn_loc: 0.1115  time: 0.9454  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 21:07:44] d2.utils.events INFO:  eta: 4:07:16  iter: 8279  total_loss: 0.4504  loss_cls: 0.09462  loss_box_reg: 0.1519  loss_rpn_cls: 0.07479  loss_rpn_loc: 0.1288  time: 0.9454  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 21:08:03] d2.utils.events INFO:  eta: 4:06:59  iter: 8299  total_loss: 0.4682  loss_cls: 0.1049  loss_box_reg: 0.1554  loss_rpn_cls: 0.07988  loss_rpn_loc: 0.1298  time: 0.9454  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:08:22] d2.utils.events INFO:  eta: 4:06:37  iter: 8319  total_loss: 0.4904  loss_cls: 0.1144  loss_box_reg: 0.1756  loss_rpn_cls: 0.07582  loss_rpn_loc: 0.1269  time: 0.9454  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:08:41] d2.utils.events INFO:  eta: 4:06:24  iter: 8339  total_loss: 0.444  loss_cls: 0.09986  loss_box_reg: 0.1662  loss_rpn_cls: 0.07864  loss_rpn_loc: 0.1053  time: 0.9454  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:09:00] d2.utils.events INFO:  eta: 4:06:04  iter: 8359  total_loss: 0.4406  loss_cls: 0.09447  loss_box_reg: 0.1603  loss_rpn_cls: 0.07335  loss_rpn_loc: 0.1131  time: 0.9454  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:09:19] d2.utils.events INFO:  eta: 4:05:46  iter: 8379  total_loss: 0.429  loss_cls: 0.1018  loss_box_reg: 0.1691  loss_rpn_cls: 0.06758  loss_rpn_loc: 0.1009  time: 0.9454  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:09:38] d2.utils.events INFO:  eta: 4:05:29  iter: 8399  total_loss: 0.475  loss_cls: 0.095  loss_box_reg: 0.1641  loss_rpn_cls: 0.08743  loss_rpn_loc: 0.1307  time: 0.9454  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 21:09:57] d2.utils.events INFO:  eta: 4:05:10  iter: 8419  total_loss: 0.4922  loss_cls: 0.1061  loss_box_reg: 0.1758  loss_rpn_cls: 0.09318  loss_rpn_loc: 0.1277  time: 0.9454  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:10:16] d2.utils.events INFO:  eta: 4:04:50  iter: 8439  total_loss: 0.4595  loss_cls: 0.09339  loss_box_reg: 0.1512  loss_rpn_cls: 0.07367  loss_rpn_loc: 0.1302  time: 0.9454  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 21:10:34] d2.utils.events INFO:  eta: 4:04:33  iter: 8459  total_loss: 0.4947  loss_cls: 0.106  loss_box_reg: 0.1839  loss_rpn_cls: 0.08358  loss_rpn_loc: 0.1085  time: 0.9454  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:10:53] d2.utils.events INFO:  eta: 4:04:17  iter: 8479  total_loss: 0.4665  loss_cls: 0.09579  loss_box_reg: 0.1621  loss_rpn_cls: 0.07519  loss_rpn_loc: 0.1239  time: 0.9454  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:11:12] d2.utils.events INFO:  eta: 4:04:04  iter: 8499  total_loss: 0.4685  loss_cls: 0.1009  loss_box_reg: 0.1591  loss_rpn_cls: 0.08325  loss_rpn_loc: 0.1235  time: 0.9454  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 21:11:31] d2.utils.events INFO:  eta: 4:03:39  iter: 8519  total_loss: 0.442  loss_cls: 0.09235  loss_box_reg: 0.1506  loss_rpn_cls: 0.08792  loss_rpn_loc: 0.1217  time: 0.9454  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:11:50] d2.utils.events INFO:  eta: 4:03:18  iter: 8539  total_loss: 0.4835  loss_cls: 0.1091  loss_box_reg: 0.1578  loss_rpn_cls: 0.07525  loss_rpn_loc: 0.1177  time: 0.9454  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:12:09] d2.utils.events INFO:  eta: 4:02:56  iter: 8559  total_loss: 0.4465  loss_cls: 0.09821  loss_box_reg: 0.1593  loss_rpn_cls: 0.07412  loss_rpn_loc: 0.1108  time: 0.9454  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:12:28] d2.utils.events INFO:  eta: 4:02:42  iter: 8579  total_loss: 0.4823  loss_cls: 0.1011  loss_box_reg: 0.1708  loss_rpn_cls: 0.07905  loss_rpn_loc: 0.1133  time: 0.9454  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:12:47] d2.utils.events INFO:  eta: 4:02:23  iter: 8599  total_loss: 0.4761  loss_cls: 0.1036  loss_box_reg: 0.1603  loss_rpn_cls: 0.07569  loss_rpn_loc: 0.1189  time: 0.9454  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:13:05] d2.utils.events INFO:  eta: 4:02:00  iter: 8619  total_loss: 0.3981  loss_cls: 0.0846  loss_box_reg: 0.1426  loss_rpn_cls: 0.06981  loss_rpn_loc: 0.1107  time: 0.9454  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:13:24] d2.utils.events INFO:  eta: 4:01:44  iter: 8639  total_loss: 0.4859  loss_cls: 0.1048  loss_box_reg: 0.1676  loss_rpn_cls: 0.08515  loss_rpn_loc: 0.1251  time: 0.9453  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:13:43] d2.utils.events INFO:  eta: 4:01:25  iter: 8659  total_loss: 0.4165  loss_cls: 0.08472  loss_box_reg: 0.151  loss_rpn_cls: 0.07519  loss_rpn_loc: 0.1171  time: 0.9453  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:14:02] d2.utils.events INFO:  eta: 4:01:01  iter: 8679  total_loss: 0.4348  loss_cls: 0.09766  loss_box_reg: 0.1696  loss_rpn_cls: 0.06615  loss_rpn_loc: 0.1049  time: 0.9453  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:14:21] d2.utils.events INFO:  eta: 4:00:44  iter: 8699  total_loss: 0.4801  loss_cls: 0.09841  loss_box_reg: 0.1629  loss_rpn_cls: 0.07906  loss_rpn_loc: 0.1248  time: 0.9453  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 21:14:40] d2.utils.events INFO:  eta: 4:00:21  iter: 8719  total_loss: 0.4891  loss_cls: 0.1112  loss_box_reg: 0.1799  loss_rpn_cls: 0.08543  loss_rpn_loc: 0.13  time: 0.9453  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 21:14:58] d2.utils.events INFO:  eta: 3:59:59  iter: 8739  total_loss: 0.4936  loss_cls: 0.1112  loss_box_reg: 0.1751  loss_rpn_cls: 0.08969  loss_rpn_loc: 0.1262  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:15:17] d2.utils.events INFO:  eta: 3:59:34  iter: 8759  total_loss: 0.5105  loss_cls: 0.1203  loss_box_reg: 0.187  loss_rpn_cls: 0.08159  loss_rpn_loc: 0.1279  time: 0.9453  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:15:36] d2.utils.events INFO:  eta: 3:59:14  iter: 8779  total_loss: 0.4678  loss_cls: 0.09538  loss_box_reg: 0.1538  loss_rpn_cls: 0.07603  loss_rpn_loc: 0.1214  time: 0.9453  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:15:55] d2.utils.events INFO:  eta: 3:58:56  iter: 8799  total_loss: 0.451  loss_cls: 0.09713  loss_box_reg: 0.1601  loss_rpn_cls: 0.0785  loss_rpn_loc: 0.1133  time: 0.9453  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:16:14] d2.utils.events INFO:  eta: 3:58:36  iter: 8819  total_loss: 0.4656  loss_cls: 0.09122  loss_box_reg: 0.1507  loss_rpn_cls: 0.07421  loss_rpn_loc: 0.1055  time: 0.9453  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:16:33] d2.utils.events INFO:  eta: 3:58:15  iter: 8839  total_loss: 0.4598  loss_cls: 0.1005  loss_box_reg: 0.1562  loss_rpn_cls: 0.07594  loss_rpn_loc: 0.1243  time: 0.9453  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 21:16:52] d2.utils.events INFO:  eta: 3:57:58  iter: 8859  total_loss: 0.4751  loss_cls: 0.1029  loss_box_reg: 0.1728  loss_rpn_cls: 0.08227  loss_rpn_loc: 0.1186  time: 0.9453  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:17:11] d2.utils.events INFO:  eta: 3:57:40  iter: 8879  total_loss: 0.5069  loss_cls: 0.1093  loss_box_reg: 0.1828  loss_rpn_cls: 0.08485  loss_rpn_loc: 0.1242  time: 0.9453  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 21:17:30] d2.utils.events INFO:  eta: 3:57:23  iter: 8899  total_loss: 0.4836  loss_cls: 0.1046  loss_box_reg: 0.1732  loss_rpn_cls: 0.07712  loss_rpn_loc: 0.134  time: 0.9453  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 21:17:48] d2.utils.events INFO:  eta: 3:57:06  iter: 8919  total_loss: 0.4959  loss_cls: 0.1038  loss_box_reg: 0.1691  loss_rpn_cls: 0.08114  loss_rpn_loc: 0.1369  time: 0.9453  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 21:18:07] d2.utils.events INFO:  eta: 3:56:50  iter: 8939  total_loss: 0.4561  loss_cls: 0.0926  loss_box_reg: 0.1529  loss_rpn_cls: 0.07636  loss_rpn_loc: 0.1157  time: 0.9453  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:18:26] d2.utils.events INFO:  eta: 3:56:33  iter: 8959  total_loss: 0.4529  loss_cls: 0.1002  loss_box_reg: 0.1576  loss_rpn_cls: 0.07414  loss_rpn_loc: 0.1018  time: 0.9453  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:18:45] d2.utils.events INFO:  eta: 3:56:13  iter: 8979  total_loss: 0.4632  loss_cls: 0.1117  loss_box_reg: 0.1612  loss_rpn_cls: 0.07165  loss_rpn_loc: 0.1205  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:19:04] d2.utils.events INFO:  eta: 3:55:51  iter: 8999  total_loss: 0.4537  loss_cls: 0.108  loss_box_reg: 0.1594  loss_rpn_cls: 0.08788  loss_rpn_loc: 0.1127  time: 0.9453  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:19:23] d2.utils.events INFO:  eta: 3:55:34  iter: 9019  total_loss: 0.4704  loss_cls: 0.1007  loss_box_reg: 0.165  loss_rpn_cls: 0.07479  loss_rpn_loc: 0.1203  time: 0.9453  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:19:42] d2.utils.events INFO:  eta: 3:55:16  iter: 9039  total_loss: 0.4304  loss_cls: 0.09375  loss_box_reg: 0.153  loss_rpn_cls: 0.07037  loss_rpn_loc: 0.1069  time: 0.9453  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:20:01] d2.utils.events INFO:  eta: 3:54:59  iter: 9059  total_loss: 0.4345  loss_cls: 0.09682  loss_box_reg: 0.1548  loss_rpn_cls: 0.07591  loss_rpn_loc: 0.1151  time: 0.9453  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:20:20] d2.utils.events INFO:  eta: 3:54:39  iter: 9079  total_loss: 0.4252  loss_cls: 0.09243  loss_box_reg: 0.1516  loss_rpn_cls: 0.0776  loss_rpn_loc: 0.1104  time: 0.9453  data_time: 0.0149  lr: 0.02  max_mem: 19359M
[01/10 21:20:39] d2.utils.events INFO:  eta: 3:54:23  iter: 9099  total_loss: 0.4794  loss_cls: 0.1084  loss_box_reg: 0.172  loss_rpn_cls: 0.07871  loss_rpn_loc: 0.1165  time: 0.9453  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:20:58] d2.utils.events INFO:  eta: 3:54:04  iter: 9119  total_loss: 0.4869  loss_cls: 0.1061  loss_box_reg: 0.1663  loss_rpn_cls: 0.08412  loss_rpn_loc: 0.1069  time: 0.9453  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 21:21:17] d2.utils.events INFO:  eta: 3:53:45  iter: 9139  total_loss: 0.4665  loss_cls: 0.09931  loss_box_reg: 0.1474  loss_rpn_cls: 0.08029  loss_rpn_loc: 0.1216  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:21:36] d2.utils.events INFO:  eta: 3:53:26  iter: 9159  total_loss: 0.4497  loss_cls: 0.09627  loss_box_reg: 0.1514  loss_rpn_cls: 0.0728  loss_rpn_loc: 0.1275  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:21:54] d2.utils.events INFO:  eta: 3:53:05  iter: 9179  total_loss: 0.4982  loss_cls: 0.1195  loss_box_reg: 0.1791  loss_rpn_cls: 0.08729  loss_rpn_loc: 0.1156  time: 0.9453  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 21:22:13] d2.utils.events INFO:  eta: 3:52:46  iter: 9199  total_loss: 0.4632  loss_cls: 0.1045  loss_box_reg: 0.1606  loss_rpn_cls: 0.08225  loss_rpn_loc: 0.1041  time: 0.9453  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 21:22:32] d2.utils.events INFO:  eta: 3:52:30  iter: 9219  total_loss: 0.4643  loss_cls: 0.0975  loss_box_reg: 0.1443  loss_rpn_cls: 0.09015  loss_rpn_loc: 0.1225  time: 0.9453  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:22:51] d2.utils.events INFO:  eta: 3:52:12  iter: 9239  total_loss: 0.5034  loss_cls: 0.1181  loss_box_reg: 0.1807  loss_rpn_cls: 0.08744  loss_rpn_loc: 0.1216  time: 0.9453  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:23:10] d2.utils.events INFO:  eta: 3:51:59  iter: 9259  total_loss: 0.5351  loss_cls: 0.1112  loss_box_reg: 0.1826  loss_rpn_cls: 0.087  loss_rpn_loc: 0.1162  time: 0.9453  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 21:23:29] d2.utils.events INFO:  eta: 3:51:43  iter: 9279  total_loss: 0.492  loss_cls: 0.1012  loss_box_reg: 0.1811  loss_rpn_cls: 0.07659  loss_rpn_loc: 0.1164  time: 0.9453  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:23:48] d2.utils.events INFO:  eta: 3:51:21  iter: 9299  total_loss: 0.4335  loss_cls: 0.09924  loss_box_reg: 0.1551  loss_rpn_cls: 0.07554  loss_rpn_loc: 0.1071  time: 0.9453  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 21:24:07] d2.utils.events INFO:  eta: 3:51:00  iter: 9319  total_loss: 0.4621  loss_cls: 0.1084  loss_box_reg: 0.1667  loss_rpn_cls: 0.07003  loss_rpn_loc: 0.1087  time: 0.9453  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:24:26] d2.utils.events INFO:  eta: 3:50:41  iter: 9339  total_loss: 0.4935  loss_cls: 0.1067  loss_box_reg: 0.1614  loss_rpn_cls: 0.08108  loss_rpn_loc: 0.1212  time: 0.9453  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 21:24:45] d2.utils.events INFO:  eta: 3:50:23  iter: 9359  total_loss: 0.448  loss_cls: 0.1012  loss_box_reg: 0.1686  loss_rpn_cls: 0.06779  loss_rpn_loc: 0.1094  time: 0.9453  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 21:25:04] d2.utils.events INFO:  eta: 3:50:04  iter: 9379  total_loss: 0.4323  loss_cls: 0.08989  loss_box_reg: 0.1558  loss_rpn_cls: 0.07274  loss_rpn_loc: 0.1071  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:25:22] d2.utils.events INFO:  eta: 3:49:41  iter: 9399  total_loss: 0.4351  loss_cls: 0.09793  loss_box_reg: 0.1471  loss_rpn_cls: 0.06822  loss_rpn_loc: 0.1305  time: 0.9453  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:25:42] d2.utils.events INFO:  eta: 3:49:22  iter: 9419  total_loss: 0.4576  loss_cls: 0.09754  loss_box_reg: 0.16  loss_rpn_cls: 0.07256  loss_rpn_loc: 0.1177  time: 0.9453  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 21:26:00] d2.utils.events INFO:  eta: 3:49:02  iter: 9439  total_loss: 0.4059  loss_cls: 0.09191  loss_box_reg: 0.1467  loss_rpn_cls: 0.07152  loss_rpn_loc: 0.09539  time: 0.9453  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 21:26:19] d2.utils.events INFO:  eta: 3:48:43  iter: 9459  total_loss: 0.4345  loss_cls: 0.09521  loss_box_reg: 0.1412  loss_rpn_cls: 0.07971  loss_rpn_loc: 0.1245  time: 0.9453  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:26:38] d2.utils.events INFO:  eta: 3:48:23  iter: 9479  total_loss: 0.4815  loss_cls: 0.101  loss_box_reg: 0.1774  loss_rpn_cls: 0.07077  loss_rpn_loc: 0.1187  time: 0.9453  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 21:26:57] d2.utils.events INFO:  eta: 3:48:00  iter: 9499  total_loss: 0.4666  loss_cls: 0.09549  loss_box_reg: 0.1778  loss_rpn_cls: 0.0765  loss_rpn_loc: 0.1129  time: 0.9453  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 21:27:16] d2.utils.events INFO:  eta: 3:47:43  iter: 9519  total_loss: 0.4737  loss_cls: 0.1111  loss_box_reg: 0.1621  loss_rpn_cls: 0.08008  loss_rpn_loc: 0.1146  time: 0.9453  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:27:35] d2.utils.events INFO:  eta: 3:47:26  iter: 9539  total_loss: 0.4365  loss_cls: 0.1033  loss_box_reg: 0.1613  loss_rpn_cls: 0.07056  loss_rpn_loc: 0.1168  time: 0.9453  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 21:27:54] d2.utils.events INFO:  eta: 3:47:07  iter: 9559  total_loss: 0.4663  loss_cls: 0.1136  loss_box_reg: 0.1732  loss_rpn_cls: 0.07974  loss_rpn_loc: 0.1172  time: 0.9453  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 21:28:12] d2.utils.events INFO:  eta: 3:46:43  iter: 9579  total_loss: 0.4931  loss_cls: 0.1115  loss_box_reg: 0.1789  loss_rpn_cls: 0.0838  loss_rpn_loc: 0.1189  time: 0.9452  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 21:28:31] d2.utils.events INFO:  eta: 3:46:27  iter: 9599  total_loss: 0.4501  loss_cls: 0.09436  loss_box_reg: 0.1584  loss_rpn_cls: 0.07513  loss_rpn_loc: 0.1247  time: 0.9452  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 21:28:50] d2.utils.events INFO:  eta: 3:46:09  iter: 9619  total_loss: 0.4473  loss_cls: 0.0989  loss_box_reg: 0.16  loss_rpn_cls: 0.07326  loss_rpn_loc: 0.1093  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:29:09] d2.utils.events INFO:  eta: 3:45:50  iter: 9639  total_loss: 0.4549  loss_cls: 0.09833  loss_box_reg: 0.1504  loss_rpn_cls: 0.07231  loss_rpn_loc: 0.1165  time: 0.9452  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:29:28] d2.utils.events INFO:  eta: 3:45:32  iter: 9659  total_loss: 0.4446  loss_cls: 0.08131  loss_box_reg: 0.1457  loss_rpn_cls: 0.06743  loss_rpn_loc: 0.1163  time: 0.9452  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 21:29:47] d2.utils.events INFO:  eta: 3:45:15  iter: 9679  total_loss: 0.4669  loss_cls: 0.09684  loss_box_reg: 0.1822  loss_rpn_cls: 0.07864  loss_rpn_loc: 0.1296  time: 0.9452  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:30:06] d2.utils.events INFO:  eta: 3:44:57  iter: 9699  total_loss: 0.4412  loss_cls: 0.08617  loss_box_reg: 0.1498  loss_rpn_cls: 0.06723  loss_rpn_loc: 0.1162  time: 0.9452  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 21:30:25] d2.utils.events INFO:  eta: 3:44:39  iter: 9719  total_loss: 0.4612  loss_cls: 0.08567  loss_box_reg: 0.1461  loss_rpn_cls: 0.08474  loss_rpn_loc: 0.1349  time: 0.9452  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:30:43] d2.utils.events INFO:  eta: 3:44:22  iter: 9739  total_loss: 0.4422  loss_cls: 0.09119  loss_box_reg: 0.1557  loss_rpn_cls: 0.07135  loss_rpn_loc: 0.1077  time: 0.9452  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:31:02] d2.utils.events INFO:  eta: 3:44:07  iter: 9759  total_loss: 0.4348  loss_cls: 0.09191  loss_box_reg: 0.1462  loss_rpn_cls: 0.06696  loss_rpn_loc: 0.125  time: 0.9452  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:31:21] d2.utils.events INFO:  eta: 3:43:47  iter: 9779  total_loss: 0.46  loss_cls: 0.09896  loss_box_reg: 0.1618  loss_rpn_cls: 0.08163  loss_rpn_loc: 0.1119  time: 0.9452  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:31:40] d2.utils.events INFO:  eta: 3:43:25  iter: 9799  total_loss: 0.4518  loss_cls: 0.08076  loss_box_reg: 0.1431  loss_rpn_cls: 0.07199  loss_rpn_loc: 0.1262  time: 0.9452  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:31:59] d2.utils.events INFO:  eta: 3:43:06  iter: 9819  total_loss: 0.446  loss_cls: 0.08759  loss_box_reg: 0.1565  loss_rpn_cls: 0.06657  loss_rpn_loc: 0.1208  time: 0.9452  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:32:18] d2.utils.events INFO:  eta: 3:42:47  iter: 9839  total_loss: 0.4509  loss_cls: 0.0905  loss_box_reg: 0.1532  loss_rpn_cls: 0.06542  loss_rpn_loc: 0.1055  time: 0.9452  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:32:36] d2.utils.events INFO:  eta: 3:42:27  iter: 9859  total_loss: 0.4385  loss_cls: 0.08554  loss_box_reg: 0.1498  loss_rpn_cls: 0.06519  loss_rpn_loc: 0.1098  time: 0.9452  data_time: 0.0100  lr: 0.02  max_mem: 19359M
[01/10 21:32:55] d2.utils.events INFO:  eta: 3:42:08  iter: 9879  total_loss: 0.461  loss_cls: 0.1037  loss_box_reg: 0.1644  loss_rpn_cls: 0.07556  loss_rpn_loc: 0.1218  time: 0.9452  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 21:33:14] d2.utils.events INFO:  eta: 3:41:46  iter: 9899  total_loss: 0.4124  loss_cls: 0.09328  loss_box_reg: 0.1587  loss_rpn_cls: 0.06305  loss_rpn_loc: 0.1047  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:33:33] d2.utils.events INFO:  eta: 3:41:28  iter: 9919  total_loss: 0.4722  loss_cls: 0.09594  loss_box_reg: 0.1587  loss_rpn_cls: 0.08563  loss_rpn_loc: 0.1319  time: 0.9452  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:33:52] d2.utils.events INFO:  eta: 3:41:09  iter: 9939  total_loss: 0.413  loss_cls: 0.08567  loss_box_reg: 0.1463  loss_rpn_cls: 0.06896  loss_rpn_loc: 0.1172  time: 0.9452  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:34:11] d2.utils.events INFO:  eta: 3:40:52  iter: 9959  total_loss: 0.4585  loss_cls: 0.09969  loss_box_reg: 0.1838  loss_rpn_cls: 0.0684  loss_rpn_loc: 0.1137  time: 0.9452  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 21:34:30] d2.utils.events INFO:  eta: 3:40:34  iter: 9979  total_loss: 0.4478  loss_cls: 0.09577  loss_box_reg: 0.1543  loss_rpn_cls: 0.06861  loss_rpn_loc: 0.1138  time: 0.9452  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:34:49] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/model_0009999.pth
[01/10 21:34:49] d2.utils.events INFO:  eta: 3:40:13  iter: 9999  total_loss: 0.4192  loss_cls: 0.08928  loss_box_reg: 0.1364  loss_rpn_cls: 0.07313  loss_rpn_loc: 0.1273  time: 0.9452  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:35:08] d2.utils.events INFO:  eta: 3:39:52  iter: 10019  total_loss: 0.4578  loss_cls: 0.1067  loss_box_reg: 0.1665  loss_rpn_cls: 0.07861  loss_rpn_loc: 0.1158  time: 0.9452  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 21:35:27] d2.utils.events INFO:  eta: 3:39:29  iter: 10039  total_loss: 0.4625  loss_cls: 0.08936  loss_box_reg: 0.1634  loss_rpn_cls: 0.0733  loss_rpn_loc: 0.1223  time: 0.9452  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 21:35:46] d2.utils.events INFO:  eta: 3:39:09  iter: 10059  total_loss: 0.4232  loss_cls: 0.08742  loss_box_reg: 0.1523  loss_rpn_cls: 0.06192  loss_rpn_loc: 0.1141  time: 0.9452  data_time: 0.0097  lr: 0.02  max_mem: 19359M
[01/10 21:36:04] d2.utils.events INFO:  eta: 3:38:49  iter: 10079  total_loss: 0.4121  loss_cls: 0.09342  loss_box_reg: 0.1425  loss_rpn_cls: 0.07422  loss_rpn_loc: 0.1073  time: 0.9451  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 21:36:23] d2.utils.events INFO:  eta: 3:38:31  iter: 10099  total_loss: 0.461  loss_cls: 0.08819  loss_box_reg: 0.1576  loss_rpn_cls: 0.08968  loss_rpn_loc: 0.115  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:36:42] d2.utils.events INFO:  eta: 3:38:10  iter: 10119  total_loss: 0.4129  loss_cls: 0.08691  loss_box_reg: 0.1464  loss_rpn_cls: 0.07096  loss_rpn_loc: 0.112  time: 0.9451  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:37:01] d2.utils.events INFO:  eta: 3:37:53  iter: 10139  total_loss: 0.4347  loss_cls: 0.08952  loss_box_reg: 0.1509  loss_rpn_cls: 0.07799  loss_rpn_loc: 0.1177  time: 0.9451  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 21:37:20] d2.utils.events INFO:  eta: 3:37:34  iter: 10159  total_loss: 0.3873  loss_cls: 0.08565  loss_box_reg: 0.1379  loss_rpn_cls: 0.07292  loss_rpn_loc: 0.1094  time: 0.9451  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 21:37:39] d2.utils.events INFO:  eta: 3:37:19  iter: 10179  total_loss: 0.4199  loss_cls: 0.09038  loss_box_reg: 0.1585  loss_rpn_cls: 0.073  loss_rpn_loc: 0.09694  time: 0.9451  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:37:58] d2.utils.events INFO:  eta: 3:37:00  iter: 10199  total_loss: 0.4683  loss_cls: 0.1036  loss_box_reg: 0.1735  loss_rpn_cls: 0.07258  loss_rpn_loc: 0.1083  time: 0.9451  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:38:17] d2.utils.events INFO:  eta: 3:36:38  iter: 10219  total_loss: 0.445  loss_cls: 0.09576  loss_box_reg: 0.1517  loss_rpn_cls: 0.06852  loss_rpn_loc: 0.1094  time: 0.9452  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 21:38:36] d2.utils.events INFO:  eta: 3:36:17  iter: 10239  total_loss: 0.4462  loss_cls: 0.09949  loss_box_reg: 0.1548  loss_rpn_cls: 0.06775  loss_rpn_loc: 0.1137  time: 0.9451  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:38:55] d2.utils.events INFO:  eta: 3:35:57  iter: 10259  total_loss: 0.4956  loss_cls: 0.1233  loss_box_reg: 0.1729  loss_rpn_cls: 0.07346  loss_rpn_loc: 0.1128  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:39:13] d2.utils.events INFO:  eta: 3:35:36  iter: 10279  total_loss: 0.437  loss_cls: 0.09191  loss_box_reg: 0.1619  loss_rpn_cls: 0.07854  loss_rpn_loc: 0.1073  time: 0.9451  data_time: 0.0148  lr: 0.02  max_mem: 19359M
[01/10 21:39:32] d2.utils.events INFO:  eta: 3:35:20  iter: 10299  total_loss: 0.5208  loss_cls: 0.1099  loss_box_reg: 0.1758  loss_rpn_cls: 0.08282  loss_rpn_loc: 0.1283  time: 0.9451  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:39:51] d2.utils.events INFO:  eta: 3:35:02  iter: 10319  total_loss: 0.4608  loss_cls: 0.08377  loss_box_reg: 0.1345  loss_rpn_cls: 0.08419  loss_rpn_loc: 0.1275  time: 0.9451  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:40:10] d2.utils.events INFO:  eta: 3:34:42  iter: 10339  total_loss: 0.469  loss_cls: 0.108  loss_box_reg: 0.1703  loss_rpn_cls: 0.08165  loss_rpn_loc: 0.1127  time: 0.9451  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:40:29] d2.utils.events INFO:  eta: 3:34:21  iter: 10359  total_loss: 0.4855  loss_cls: 0.1011  loss_box_reg: 0.1755  loss_rpn_cls: 0.08167  loss_rpn_loc: 0.1156  time: 0.9451  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:40:48] d2.utils.events INFO:  eta: 3:33:59  iter: 10379  total_loss: 0.4416  loss_cls: 0.09882  loss_box_reg: 0.172  loss_rpn_cls: 0.06448  loss_rpn_loc: 0.1047  time: 0.9451  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 21:41:06] d2.utils.events INFO:  eta: 3:33:41  iter: 10399  total_loss: 0.4804  loss_cls: 0.1098  loss_box_reg: 0.1813  loss_rpn_cls: 0.07484  loss_rpn_loc: 0.1147  time: 0.9451  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:41:26] d2.utils.events INFO:  eta: 3:33:21  iter: 10419  total_loss: 0.4437  loss_cls: 0.0986  loss_box_reg: 0.1631  loss_rpn_cls: 0.07748  loss_rpn_loc: 0.1023  time: 0.9451  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 21:41:45] d2.utils.events INFO:  eta: 3:33:03  iter: 10439  total_loss: 0.4992  loss_cls: 0.09991  loss_box_reg: 0.1767  loss_rpn_cls: 0.0918  loss_rpn_loc: 0.114  time: 0.9451  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 21:42:03] d2.utils.events INFO:  eta: 3:32:46  iter: 10459  total_loss: 0.4349  loss_cls: 0.08779  loss_box_reg: 0.1469  loss_rpn_cls: 0.0832  loss_rpn_loc: 0.1157  time: 0.9451  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 21:42:23] d2.utils.events INFO:  eta: 3:32:27  iter: 10479  total_loss: 0.4987  loss_cls: 0.1145  loss_box_reg: 0.173  loss_rpn_cls: 0.07609  loss_rpn_loc: 0.1184  time: 0.9451  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 21:42:41] d2.utils.events INFO:  eta: 3:32:12  iter: 10499  total_loss: 0.4284  loss_cls: 0.09023  loss_box_reg: 0.1528  loss_rpn_cls: 0.0656  loss_rpn_loc: 0.117  time: 0.9451  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:43:00] d2.utils.events INFO:  eta: 3:31:53  iter: 10519  total_loss: 0.4408  loss_cls: 0.09578  loss_box_reg: 0.1568  loss_rpn_cls: 0.06808  loss_rpn_loc: 0.1153  time: 0.9451  data_time: 0.0141  lr: 0.02  max_mem: 19359M
[01/10 21:43:19] d2.utils.events INFO:  eta: 3:31:34  iter: 10539  total_loss: 0.458  loss_cls: 0.09961  loss_box_reg: 0.1629  loss_rpn_cls: 0.07594  loss_rpn_loc: 0.1259  time: 0.9451  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 21:43:38] d2.utils.events INFO:  eta: 3:31:15  iter: 10559  total_loss: 0.427  loss_cls: 0.09438  loss_box_reg: 0.1485  loss_rpn_cls: 0.06878  loss_rpn_loc: 0.1101  time: 0.9451  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:43:57] d2.utils.events INFO:  eta: 3:30:58  iter: 10579  total_loss: 0.487  loss_cls: 0.1042  loss_box_reg: 0.1779  loss_rpn_cls: 0.07497  loss_rpn_loc: 0.132  time: 0.9451  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 21:44:16] d2.utils.events INFO:  eta: 3:30:43  iter: 10599  total_loss: 0.4635  loss_cls: 0.09869  loss_box_reg: 0.1593  loss_rpn_cls: 0.06869  loss_rpn_loc: 0.1361  time: 0.9451  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 21:44:35] d2.utils.events INFO:  eta: 3:30:20  iter: 10619  total_loss: 0.4252  loss_cls: 0.0912  loss_box_reg: 0.1453  loss_rpn_cls: 0.07227  loss_rpn_loc: 0.1059  time: 0.9451  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 21:44:54] d2.utils.events INFO:  eta: 3:30:03  iter: 10639  total_loss: 0.5232  loss_cls: 0.1055  loss_box_reg: 0.1697  loss_rpn_cls: 0.07127  loss_rpn_loc: 0.1444  time: 0.9451  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 21:45:13] d2.utils.events INFO:  eta: 3:29:46  iter: 10659  total_loss: 0.4855  loss_cls: 0.1071  loss_box_reg: 0.1839  loss_rpn_cls: 0.07996  loss_rpn_loc: 0.1031  time: 0.9451  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 21:45:32] d2.utils.events INFO:  eta: 3:29:29  iter: 10679  total_loss: 0.4607  loss_cls: 0.09996  loss_box_reg: 0.1748  loss_rpn_cls: 0.07178  loss_rpn_loc: 0.1122  time: 0.9451  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 21:45:51] d2.utils.events INFO:  eta: 3:29:11  iter: 10699  total_loss: 0.4567  loss_cls: 0.1024  loss_box_reg: 0.164  loss_rpn_cls: 0.07644  loss_rpn_loc: 0.1125  time: 0.9452  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 21:46:10] d2.utils.events INFO:  eta: 3:28:52  iter: 10719  total_loss: 0.4894  loss_cls: 0.09727  loss_box_reg: 0.1705  loss_rpn_cls: 0.07283  loss_rpn_loc: 0.1167  time: 0.9452  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:46:29] d2.utils.events INFO:  eta: 3:28:33  iter: 10739  total_loss: 0.4203  loss_cls: 0.09003  loss_box_reg: 0.1525  loss_rpn_cls: 0.06466  loss_rpn_loc: 0.1081  time: 0.9452  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 21:46:47] d2.utils.events INFO:  eta: 3:28:11  iter: 10759  total_loss: 0.4848  loss_cls: 0.09086  loss_box_reg: 0.1543  loss_rpn_cls: 0.08342  loss_rpn_loc: 0.1218  time: 0.9452  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 21:47:06] d2.utils.events INFO:  eta: 3:27:54  iter: 10779  total_loss: 0.4651  loss_cls: 0.09615  loss_box_reg: 0.159  loss_rpn_cls: 0.07295  loss_rpn_loc: 0.1229  time: 0.9451  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 21:47:25] d2.utils.events INFO:  eta: 3:27:37  iter: 10799  total_loss: 0.426  loss_cls: 0.1003  loss_box_reg: 0.1573  loss_rpn_cls: 0.06674  loss_rpn_loc: 0.1013  time: 0.9451  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 21:47:44] d2.utils.events INFO:  eta: 3:27:17  iter: 10819  total_loss: 0.4528  loss_cls: 0.1036  loss_box_reg: 0.1714  loss_rpn_cls: 0.07612  loss_rpn_loc: 0.1306  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:48:03] d2.utils.events INFO:  eta: 3:27:02  iter: 10839  total_loss: 0.3991  loss_cls: 0.08386  loss_box_reg: 0.1383  loss_rpn_cls: 0.06911  loss_rpn_loc: 0.1034  time: 0.9451  data_time: 0.0144  lr: 0.02  max_mem: 19359M
[01/10 21:48:22] d2.utils.events INFO:  eta: 3:26:42  iter: 10859  total_loss: 0.504  loss_cls: 0.1044  loss_box_reg: 0.1766  loss_rpn_cls: 0.08625  loss_rpn_loc: 0.1144  time: 0.9451  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 21:48:41] d2.utils.events INFO:  eta: 3:26:24  iter: 10879  total_loss: 0.4418  loss_cls: 0.08853  loss_box_reg: 0.1619  loss_rpn_cls: 0.07022  loss_rpn_loc: 0.1173  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:48:59] d2.utils.events INFO:  eta: 3:26:06  iter: 10899  total_loss: 0.4591  loss_cls: 0.09682  loss_box_reg: 0.1644  loss_rpn_cls: 0.07626  loss_rpn_loc: 0.1123  time: 0.9451  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:49:18] d2.utils.events INFO:  eta: 3:25:46  iter: 10919  total_loss: 0.4647  loss_cls: 0.09559  loss_box_reg: 0.1721  loss_rpn_cls: 0.07624  loss_rpn_loc: 0.1259  time: 0.9451  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 21:49:37] d2.utils.events INFO:  eta: 3:25:26  iter: 10939  total_loss: 0.4323  loss_cls: 0.09317  loss_box_reg: 0.1521  loss_rpn_cls: 0.07504  loss_rpn_loc: 0.112  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:49:56] d2.utils.events INFO:  eta: 3:25:05  iter: 10959  total_loss: 0.447  loss_cls: 0.0957  loss_box_reg: 0.1554  loss_rpn_cls: 0.07178  loss_rpn_loc: 0.1085  time: 0.9451  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 21:50:15] d2.utils.events INFO:  eta: 3:24:44  iter: 10979  total_loss: 0.4433  loss_cls: 0.09103  loss_box_reg: 0.1483  loss_rpn_cls: 0.07284  loss_rpn_loc: 0.1173  time: 0.9451  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 21:50:34] d2.utils.events INFO:  eta: 3:24:27  iter: 10999  total_loss: 0.5087  loss_cls: 0.1106  loss_box_reg: 0.1759  loss_rpn_cls: 0.0769  loss_rpn_loc: 0.118  time: 0.9451  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:50:53] d2.utils.events INFO:  eta: 3:24:09  iter: 11019  total_loss: 0.4315  loss_cls: 0.1043  loss_box_reg: 0.1727  loss_rpn_cls: 0.07097  loss_rpn_loc: 0.09055  time: 0.9451  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:51:12] d2.utils.events INFO:  eta: 3:23:54  iter: 11039  total_loss: 0.4259  loss_cls: 0.08739  loss_box_reg: 0.1494  loss_rpn_cls: 0.06854  loss_rpn_loc: 0.108  time: 0.9451  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 21:51:31] d2.utils.events INFO:  eta: 3:23:35  iter: 11059  total_loss: 0.4489  loss_cls: 0.1091  loss_box_reg: 0.1573  loss_rpn_cls: 0.06843  loss_rpn_loc: 0.1225  time: 0.9451  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 21:51:50] d2.utils.events INFO:  eta: 3:23:17  iter: 11079  total_loss: 0.4814  loss_cls: 0.09839  loss_box_reg: 0.1733  loss_rpn_cls: 0.08049  loss_rpn_loc: 0.1178  time: 0.9451  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 21:52:09] d2.utils.events INFO:  eta: 3:22:57  iter: 11099  total_loss: 0.4266  loss_cls: 0.09259  loss_box_reg: 0.165  loss_rpn_cls: 0.07024  loss_rpn_loc: 0.1232  time: 0.9451  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 21:52:27] d2.utils.events INFO:  eta: 3:22:39  iter: 11119  total_loss: 0.4665  loss_cls: 0.1015  loss_box_reg: 0.1746  loss_rpn_cls: 0.06647  loss_rpn_loc: 0.1167  time: 0.9451  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 21:52:46] d2.utils.events INFO:  eta: 3:22:21  iter: 11139  total_loss: 0.3835  loss_cls: 0.08514  loss_box_reg: 0.1353  loss_rpn_cls: 0.06852  loss_rpn_loc: 0.113  time: 0.9451  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 21:53:05] d2.utils.events INFO:  eta: 3:22:04  iter: 11159  total_loss: 0.4315  loss_cls: 0.08886  loss_box_reg: 0.1554  loss_rpn_cls: 0.07451  loss_rpn_loc: 0.1267  time: 0.9451  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 21:53:24] d2.utils.events INFO:  eta: 3:21:44  iter: 11179  total_loss: 0.4692  loss_cls: 0.09438  loss_box_reg: 0.1575  loss_rpn_cls: 0.07673  loss_rpn_loc: 0.132  time: 0.9452  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 21:53:43] d2.utils.events INFO:  eta: 3:21:25  iter: 11199  total_loss: 0.4289  loss_cls: 0.08642  loss_box_reg: 0.1451  loss_rpn_cls: 0.07112  loss_rpn_loc: 0.1326  time: 0.9452  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:54:02] d2.utils.events INFO:  eta: 3:21:07  iter: 11219  total_loss: 0.4237  loss_cls: 0.08138  loss_box_reg: 0.1449  loss_rpn_cls: 0.07357  loss_rpn_loc: 0.1151  time: 0.9452  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 21:54:21] d2.utils.events INFO:  eta: 3:20:51  iter: 11239  total_loss: 0.4615  loss_cls: 0.1077  loss_box_reg: 0.1688  loss_rpn_cls: 0.06953  loss_rpn_loc: 0.1236  time: 0.9452  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:54:40] d2.utils.events INFO:  eta: 3:20:31  iter: 11259  total_loss: 0.4125  loss_cls: 0.08346  loss_box_reg: 0.1332  loss_rpn_cls: 0.07673  loss_rpn_loc: 0.1246  time: 0.9452  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 21:54:59] d2.utils.events INFO:  eta: 3:20:14  iter: 11279  total_loss: 0.4638  loss_cls: 0.1023  loss_box_reg: 0.1627  loss_rpn_cls: 0.07714  loss_rpn_loc: 0.1064  time: 0.9452  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 21:55:18] d2.utils.events INFO:  eta: 3:19:52  iter: 11299  total_loss: 0.4546  loss_cls: 0.09608  loss_box_reg: 0.164  loss_rpn_cls: 0.06865  loss_rpn_loc: 0.1166  time: 0.9452  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 21:55:37] d2.utils.events INFO:  eta: 3:19:33  iter: 11319  total_loss: 0.4292  loss_cls: 0.09599  loss_box_reg: 0.1564  loss_rpn_cls: 0.06596  loss_rpn_loc: 0.1011  time: 0.9452  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 21:55:56] d2.utils.events INFO:  eta: 3:19:15  iter: 11339  total_loss: 0.3875  loss_cls: 0.08515  loss_box_reg: 0.1472  loss_rpn_cls: 0.07721  loss_rpn_loc: 0.1171  time: 0.9452  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 21:56:15] d2.utils.events INFO:  eta: 3:18:56  iter: 11359  total_loss: 0.4481  loss_cls: 0.09298  loss_box_reg: 0.1864  loss_rpn_cls: 0.06876  loss_rpn_loc: 0.1137  time: 0.9452  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 21:56:34] d2.utils.events INFO:  eta: 3:18:42  iter: 11379  total_loss: 0.4337  loss_cls: 0.08206  loss_box_reg: 0.1483  loss_rpn_cls: 0.07175  loss_rpn_loc: 0.1138  time: 0.9452  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 21:56:53] d2.utils.events INFO:  eta: 3:18:23  iter: 11399  total_loss: 0.4466  loss_cls: 0.08892  loss_box_reg: 0.1382  loss_rpn_cls: 0.07567  loss_rpn_loc: 0.1262  time: 0.9452  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 21:57:12] d2.utils.events INFO:  eta: 3:18:04  iter: 11419  total_loss: 0.4847  loss_cls: 0.1021  loss_box_reg: 0.1563  loss_rpn_cls: 0.08186  loss_rpn_loc: 0.1315  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 21:57:30] d2.utils.events INFO:  eta: 3:17:47  iter: 11439  total_loss: 0.4481  loss_cls: 0.08487  loss_box_reg: 0.1278  loss_rpn_cls: 0.07295  loss_rpn_loc: 0.1288  time: 0.9452  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 21:57:49] d2.utils.events INFO:  eta: 3:17:30  iter: 11459  total_loss: 0.4578  loss_cls: 0.09602  loss_box_reg: 0.1661  loss_rpn_cls: 0.07336  loss_rpn_loc: 0.1323  time: 0.9452  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 21:58:08] d2.utils.events INFO:  eta: 3:17:11  iter: 11479  total_loss: 0.4468  loss_cls: 0.09232  loss_box_reg: 0.1493  loss_rpn_cls: 0.08155  loss_rpn_loc: 0.11  time: 0.9452  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 21:58:27] d2.utils.events INFO:  eta: 3:16:52  iter: 11499  total_loss: 0.4542  loss_cls: 0.1023  loss_box_reg: 0.1676  loss_rpn_cls: 0.07525  loss_rpn_loc: 0.108  time: 0.9452  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 21:58:46] d2.utils.events INFO:  eta: 3:16:36  iter: 11519  total_loss: 0.5142  loss_cls: 0.1074  loss_box_reg: 0.1812  loss_rpn_cls: 0.08203  loss_rpn_loc: 0.1385  time: 0.9452  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 21:59:05] d2.utils.events INFO:  eta: 3:16:17  iter: 11539  total_loss: 0.4829  loss_cls: 0.09892  loss_box_reg: 0.1644  loss_rpn_cls: 0.07803  loss_rpn_loc: 0.1306  time: 0.9452  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 21:59:24] d2.utils.events INFO:  eta: 3:15:58  iter: 11559  total_loss: 0.4677  loss_cls: 0.08915  loss_box_reg: 0.1492  loss_rpn_cls: 0.07164  loss_rpn_loc: 0.1364  time: 0.9452  data_time: 0.0154  lr: 0.02  max_mem: 19359M
[01/10 21:59:43] d2.utils.events INFO:  eta: 3:15:40  iter: 11579  total_loss: 0.4489  loss_cls: 0.08777  loss_box_reg: 0.1479  loss_rpn_cls: 0.06906  loss_rpn_loc: 0.1213  time: 0.9452  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 22:00:02] d2.utils.events INFO:  eta: 3:15:21  iter: 11599  total_loss: 0.411  loss_cls: 0.07521  loss_box_reg: 0.1403  loss_rpn_cls: 0.07134  loss_rpn_loc: 0.114  time: 0.9452  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 22:00:21] d2.utils.events INFO:  eta: 3:15:04  iter: 11619  total_loss: 0.4441  loss_cls: 0.08873  loss_box_reg: 0.156  loss_rpn_cls: 0.07955  loss_rpn_loc: 0.1183  time: 0.9452  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 22:00:40] d2.utils.events INFO:  eta: 3:14:43  iter: 11639  total_loss: 0.4378  loss_cls: 0.08773  loss_box_reg: 0.1526  loss_rpn_cls: 0.06788  loss_rpn_loc: 0.1063  time: 0.9452  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 22:00:59] d2.utils.events INFO:  eta: 3:14:26  iter: 11659  total_loss: 0.4398  loss_cls: 0.09859  loss_box_reg: 0.1634  loss_rpn_cls: 0.06954  loss_rpn_loc: 0.123  time: 0.9452  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 22:01:18] d2.utils.events INFO:  eta: 3:14:08  iter: 11679  total_loss: 0.4301  loss_cls: 0.08887  loss_box_reg: 0.1523  loss_rpn_cls: 0.07202  loss_rpn_loc: 0.1209  time: 0.9452  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:01:37] d2.utils.events INFO:  eta: 3:13:49  iter: 11699  total_loss: 0.452  loss_cls: 0.08743  loss_box_reg: 0.1584  loss_rpn_cls: 0.08277  loss_rpn_loc: 0.1181  time: 0.9452  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 22:01:56] d2.utils.events INFO:  eta: 3:13:30  iter: 11719  total_loss: 0.4233  loss_cls: 0.08848  loss_box_reg: 0.1472  loss_rpn_cls: 0.07257  loss_rpn_loc: 0.1109  time: 0.9452  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 22:02:15] d2.utils.events INFO:  eta: 3:13:12  iter: 11739  total_loss: 0.4506  loss_cls: 0.1032  loss_box_reg: 0.1725  loss_rpn_cls: 0.0617  loss_rpn_loc: 0.1001  time: 0.9452  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 22:02:34] d2.utils.events INFO:  eta: 3:12:55  iter: 11759  total_loss: 0.4522  loss_cls: 0.09438  loss_box_reg: 0.1724  loss_rpn_cls: 0.07341  loss_rpn_loc: 0.108  time: 0.9452  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 22:02:53] d2.utils.events INFO:  eta: 3:12:37  iter: 11779  total_loss: 0.4095  loss_cls: 0.08013  loss_box_reg: 0.1484  loss_rpn_cls: 0.063  loss_rpn_loc: 0.1094  time: 0.9452  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:03:12] d2.utils.events INFO:  eta: 3:12:21  iter: 11799  total_loss: 0.44  loss_cls: 0.09378  loss_box_reg: 0.1565  loss_rpn_cls: 0.07284  loss_rpn_loc: 0.1095  time: 0.9452  data_time: 0.0145  lr: 0.02  max_mem: 19359M
[01/10 22:03:31] d2.utils.events INFO:  eta: 3:12:03  iter: 11819  total_loss: 0.471  loss_cls: 0.09357  loss_box_reg: 0.1584  loss_rpn_cls: 0.07172  loss_rpn_loc: 0.1126  time: 0.9453  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:03:50] d2.utils.events INFO:  eta: 3:11:47  iter: 11839  total_loss: 0.4483  loss_cls: 0.09539  loss_box_reg: 0.1652  loss_rpn_cls: 0.06986  loss_rpn_loc: 0.1212  time: 0.9453  data_time: 0.0143  lr: 0.02  max_mem: 19359M
[01/10 22:04:09] d2.utils.events INFO:  eta: 3:11:31  iter: 11859  total_loss: 0.4594  loss_cls: 0.09481  loss_box_reg: 0.1703  loss_rpn_cls: 0.07657  loss_rpn_loc: 0.1306  time: 0.9453  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:04:28] d2.utils.events INFO:  eta: 3:11:13  iter: 11879  total_loss: 0.4584  loss_cls: 0.09472  loss_box_reg: 0.1645  loss_rpn_cls: 0.07732  loss_rpn_loc: 0.1232  time: 0.9453  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:04:47] d2.utils.events INFO:  eta: 3:10:54  iter: 11899  total_loss: 0.445  loss_cls: 0.08764  loss_box_reg: 0.1429  loss_rpn_cls: 0.07265  loss_rpn_loc: 0.118  time: 0.9453  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:05:06] d2.utils.events INFO:  eta: 3:10:35  iter: 11919  total_loss: 0.4052  loss_cls: 0.08242  loss_box_reg: 0.1361  loss_rpn_cls: 0.06808  loss_rpn_loc: 0.1206  time: 0.9453  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:05:25] d2.utils.events INFO:  eta: 3:10:19  iter: 11939  total_loss: 0.4457  loss_cls: 0.09087  loss_box_reg: 0.1521  loss_rpn_cls: 0.06846  loss_rpn_loc: 0.132  time: 0.9453  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 22:05:44] d2.utils.events INFO:  eta: 3:10:01  iter: 11959  total_loss: 0.4635  loss_cls: 0.09345  loss_box_reg: 0.1742  loss_rpn_cls: 0.07339  loss_rpn_loc: 0.1217  time: 0.9453  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:06:03] d2.utils.events INFO:  eta: 3:09:41  iter: 11979  total_loss: 0.4025  loss_cls: 0.08791  loss_box_reg: 0.1438  loss_rpn_cls: 0.05737  loss_rpn_loc: 0.1174  time: 0.9453  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 22:06:22] d2.utils.events INFO:  eta: 3:09:21  iter: 11999  total_loss: 0.4701  loss_cls: 0.09553  loss_box_reg: 0.1609  loss_rpn_cls: 0.06881  loss_rpn_loc: 0.1189  time: 0.9453  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 22:06:41] d2.utils.events INFO:  eta: 3:09:01  iter: 12019  total_loss: 0.3986  loss_cls: 0.0837  loss_box_reg: 0.1372  loss_rpn_cls: 0.06716  loss_rpn_loc: 0.1086  time: 0.9453  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 22:07:00] d2.utils.events INFO:  eta: 3:08:42  iter: 12039  total_loss: 0.4202  loss_cls: 0.07948  loss_box_reg: 0.1473  loss_rpn_cls: 0.07328  loss_rpn_loc: 0.1172  time: 0.9453  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 22:07:19] d2.utils.events INFO:  eta: 3:08:23  iter: 12059  total_loss: 0.4251  loss_cls: 0.08577  loss_box_reg: 0.1519  loss_rpn_cls: 0.06845  loss_rpn_loc: 0.1342  time: 0.9453  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:07:37] d2.utils.events INFO:  eta: 3:08:07  iter: 12079  total_loss: 0.4293  loss_cls: 0.08973  loss_box_reg: 0.1582  loss_rpn_cls: 0.06972  loss_rpn_loc: 0.1175  time: 0.9453  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:07:56] d2.utils.events INFO:  eta: 3:07:48  iter: 12099  total_loss: 0.4545  loss_cls: 0.093  loss_box_reg: 0.1738  loss_rpn_cls: 0.07165  loss_rpn_loc: 0.1056  time: 0.9453  data_time: 0.0149  lr: 0.02  max_mem: 19359M
[01/10 22:08:15] d2.utils.events INFO:  eta: 3:07:29  iter: 12119  total_loss: 0.4346  loss_cls: 0.09569  loss_box_reg: 0.1601  loss_rpn_cls: 0.07638  loss_rpn_loc: 0.1157  time: 0.9453  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 22:08:34] d2.utils.events INFO:  eta: 3:07:07  iter: 12139  total_loss: 0.4291  loss_cls: 0.08209  loss_box_reg: 0.1371  loss_rpn_cls: 0.0664  loss_rpn_loc: 0.1138  time: 0.9453  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 22:08:53] d2.utils.events INFO:  eta: 3:06:48  iter: 12159  total_loss: 0.4711  loss_cls: 0.1028  loss_box_reg: 0.1704  loss_rpn_cls: 0.07025  loss_rpn_loc: 0.1326  time: 0.9453  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:09:12] d2.utils.events INFO:  eta: 3:06:26  iter: 12179  total_loss: 0.4202  loss_cls: 0.08854  loss_box_reg: 0.1483  loss_rpn_cls: 0.07074  loss_rpn_loc: 0.1103  time: 0.9453  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 22:09:31] d2.utils.events INFO:  eta: 3:06:04  iter: 12199  total_loss: 0.4646  loss_cls: 0.09233  loss_box_reg: 0.1611  loss_rpn_cls: 0.07359  loss_rpn_loc: 0.1222  time: 0.9453  data_time: 0.0141  lr: 0.02  max_mem: 19359M
[01/10 22:09:50] d2.utils.events INFO:  eta: 3:05:42  iter: 12219  total_loss: 0.4021  loss_cls: 0.0822  loss_box_reg: 0.1467  loss_rpn_cls: 0.06576  loss_rpn_loc: 0.1045  time: 0.9453  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:10:09] d2.utils.events INFO:  eta: 3:05:23  iter: 12239  total_loss: 0.4183  loss_cls: 0.08317  loss_box_reg: 0.1489  loss_rpn_cls: 0.07876  loss_rpn_loc: 0.118  time: 0.9453  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 22:10:28] d2.utils.events INFO:  eta: 3:05:04  iter: 12259  total_loss: 0.4311  loss_cls: 0.09477  loss_box_reg: 0.1637  loss_rpn_cls: 0.07239  loss_rpn_loc: 0.1097  time: 0.9453  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 22:10:46] d2.utils.events INFO:  eta: 3:04:45  iter: 12279  total_loss: 0.4633  loss_cls: 0.09733  loss_box_reg: 0.1645  loss_rpn_cls: 0.07172  loss_rpn_loc: 0.1163  time: 0.9453  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:11:05] d2.utils.events INFO:  eta: 3:04:29  iter: 12299  total_loss: 0.4324  loss_cls: 0.09166  loss_box_reg: 0.1593  loss_rpn_cls: 0.07232  loss_rpn_loc: 0.1106  time: 0.9453  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:11:24] d2.utils.events INFO:  eta: 3:04:11  iter: 12319  total_loss: 0.434  loss_cls: 0.09705  loss_box_reg: 0.1643  loss_rpn_cls: 0.07059  loss_rpn_loc: 0.1049  time: 0.9453  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 22:11:43] d2.utils.events INFO:  eta: 3:03:51  iter: 12339  total_loss: 0.4635  loss_cls: 0.09559  loss_box_reg: 0.1595  loss_rpn_cls: 0.07363  loss_rpn_loc: 0.1331  time: 0.9453  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:12:02] d2.utils.events INFO:  eta: 3:03:30  iter: 12359  total_loss: 0.4701  loss_cls: 0.1047  loss_box_reg: 0.1749  loss_rpn_cls: 0.06719  loss_rpn_loc: 0.1072  time: 0.9453  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:12:21] d2.utils.events INFO:  eta: 3:03:10  iter: 12379  total_loss: 0.4587  loss_cls: 0.08606  loss_box_reg: 0.1587  loss_rpn_cls: 0.0766  loss_rpn_loc: 0.1118  time: 0.9453  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 22:12:40] d2.utils.events INFO:  eta: 3:02:49  iter: 12399  total_loss: 0.4181  loss_cls: 0.09897  loss_box_reg: 0.1413  loss_rpn_cls: 0.07334  loss_rpn_loc: 0.1187  time: 0.9453  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:12:58] d2.utils.events INFO:  eta: 3:02:30  iter: 12419  total_loss: 0.4414  loss_cls: 0.09301  loss_box_reg: 0.1754  loss_rpn_cls: 0.06688  loss_rpn_loc: 0.1123  time: 0.9453  data_time: 0.0142  lr: 0.02  max_mem: 19359M
[01/10 22:13:17] d2.utils.events INFO:  eta: 3:02:11  iter: 12439  total_loss: 0.4629  loss_cls: 0.1028  loss_box_reg: 0.1656  loss_rpn_cls: 0.08343  loss_rpn_loc: 0.119  time: 0.9453  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:13:36] d2.utils.events INFO:  eta: 3:01:49  iter: 12459  total_loss: 0.4538  loss_cls: 0.09916  loss_box_reg: 0.1616  loss_rpn_cls: 0.06718  loss_rpn_loc: 0.1127  time: 0.9453  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 22:13:55] d2.utils.events INFO:  eta: 3:01:27  iter: 12479  total_loss: 0.4057  loss_cls: 0.08482  loss_box_reg: 0.1501  loss_rpn_cls: 0.06724  loss_rpn_loc: 0.113  time: 0.9452  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:14:14] d2.utils.events INFO:  eta: 3:01:09  iter: 12499  total_loss: 0.4052  loss_cls: 0.06847  loss_box_reg: 0.1332  loss_rpn_cls: 0.07285  loss_rpn_loc: 0.1144  time: 0.9452  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:14:33] d2.utils.events INFO:  eta: 3:00:48  iter: 12519  total_loss: 0.4392  loss_cls: 0.08502  loss_box_reg: 0.1551  loss_rpn_cls: 0.07163  loss_rpn_loc: 0.1219  time: 0.9452  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:14:52] d2.utils.events INFO:  eta: 3:00:27  iter: 12539  total_loss: 0.4594  loss_cls: 0.087  loss_box_reg: 0.1558  loss_rpn_cls: 0.07395  loss_rpn_loc: 0.1291  time: 0.9452  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 22:15:10] d2.utils.events INFO:  eta: 3:00:05  iter: 12559  total_loss: 0.4205  loss_cls: 0.08266  loss_box_reg: 0.1495  loss_rpn_cls: 0.06859  loss_rpn_loc: 0.1113  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:15:29] d2.utils.events INFO:  eta: 2:59:47  iter: 12579  total_loss: 0.4163  loss_cls: 0.08701  loss_box_reg: 0.1413  loss_rpn_cls: 0.07077  loss_rpn_loc: 0.1245  time: 0.9452  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:15:48] d2.utils.events INFO:  eta: 2:59:26  iter: 12599  total_loss: 0.4402  loss_cls: 0.09157  loss_box_reg: 0.1612  loss_rpn_cls: 0.06905  loss_rpn_loc: 0.1029  time: 0.9452  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:16:07] d2.utils.events INFO:  eta: 2:59:07  iter: 12619  total_loss: 0.4037  loss_cls: 0.08438  loss_box_reg: 0.1428  loss_rpn_cls: 0.06789  loss_rpn_loc: 0.1095  time: 0.9452  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:16:26] d2.utils.events INFO:  eta: 2:58:48  iter: 12639  total_loss: 0.3953  loss_cls: 0.075  loss_box_reg: 0.1414  loss_rpn_cls: 0.06739  loss_rpn_loc: 0.1145  time: 0.9452  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:16:45] d2.utils.events INFO:  eta: 2:58:30  iter: 12659  total_loss: 0.455  loss_cls: 0.1022  loss_box_reg: 0.1621  loss_rpn_cls: 0.07507  loss_rpn_loc: 0.1231  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:17:04] d2.utils.events INFO:  eta: 2:58:10  iter: 12679  total_loss: 0.4574  loss_cls: 0.09423  loss_box_reg: 0.16  loss_rpn_cls: 0.07365  loss_rpn_loc: 0.1047  time: 0.9452  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:17:23] d2.utils.events INFO:  eta: 2:57:50  iter: 12699  total_loss: 0.4728  loss_cls: 0.1004  loss_box_reg: 0.1541  loss_rpn_cls: 0.07052  loss_rpn_loc: 0.1165  time: 0.9452  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 22:17:42] d2.utils.events INFO:  eta: 2:57:33  iter: 12719  total_loss: 0.4332  loss_cls: 0.09374  loss_box_reg: 0.1455  loss_rpn_cls: 0.07231  loss_rpn_loc: 0.1146  time: 0.9452  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:18:00] d2.utils.events INFO:  eta: 2:57:13  iter: 12739  total_loss: 0.3976  loss_cls: 0.08446  loss_box_reg: 0.1569  loss_rpn_cls: 0.06361  loss_rpn_loc: 0.1058  time: 0.9452  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 22:18:19] d2.utils.events INFO:  eta: 2:56:52  iter: 12759  total_loss: 0.447  loss_cls: 0.08991  loss_box_reg: 0.1618  loss_rpn_cls: 0.07335  loss_rpn_loc: 0.1208  time: 0.9452  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 22:18:38] d2.utils.events INFO:  eta: 2:56:33  iter: 12779  total_loss: 0.4452  loss_cls: 0.08842  loss_box_reg: 0.164  loss_rpn_cls: 0.07849  loss_rpn_loc: 0.1104  time: 0.9452  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:18:57] d2.utils.events INFO:  eta: 2:56:12  iter: 12799  total_loss: 0.4348  loss_cls: 0.09132  loss_box_reg: 0.1581  loss_rpn_cls: 0.07321  loss_rpn_loc: 0.1129  time: 0.9452  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 22:19:16] d2.utils.events INFO:  eta: 2:55:51  iter: 12819  total_loss: 0.4383  loss_cls: 0.08099  loss_box_reg: 0.1507  loss_rpn_cls: 0.07845  loss_rpn_loc: 0.1373  time: 0.9452  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 22:19:35] d2.utils.events INFO:  eta: 2:55:32  iter: 12839  total_loss: 0.4337  loss_cls: 0.0952  loss_box_reg: 0.1569  loss_rpn_cls: 0.06659  loss_rpn_loc: 0.1072  time: 0.9452  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:19:54] d2.utils.events INFO:  eta: 2:55:12  iter: 12859  total_loss: 0.4432  loss_cls: 0.09447  loss_box_reg: 0.154  loss_rpn_cls: 0.07619  loss_rpn_loc: 0.1079  time: 0.9452  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:20:13] d2.utils.events INFO:  eta: 2:54:52  iter: 12879  total_loss: 0.4247  loss_cls: 0.08223  loss_box_reg: 0.1598  loss_rpn_cls: 0.06729  loss_rpn_loc: 0.1221  time: 0.9452  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 22:20:31] d2.utils.events INFO:  eta: 2:54:33  iter: 12899  total_loss: 0.4224  loss_cls: 0.0871  loss_box_reg: 0.1452  loss_rpn_cls: 0.06885  loss_rpn_loc: 0.1062  time: 0.9452  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 22:20:50] d2.utils.events INFO:  eta: 2:54:10  iter: 12919  total_loss: 0.4665  loss_cls: 0.09219  loss_box_reg: 0.1661  loss_rpn_cls: 0.07061  loss_rpn_loc: 0.1076  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:21:09] d2.utils.events INFO:  eta: 2:53:49  iter: 12939  total_loss: 0.4357  loss_cls: 0.08354  loss_box_reg: 0.1478  loss_rpn_cls: 0.07295  loss_rpn_loc: 0.1146  time: 0.9452  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:21:28] d2.utils.events INFO:  eta: 2:53:31  iter: 12959  total_loss: 0.4536  loss_cls: 0.08856  loss_box_reg: 0.1524  loss_rpn_cls: 0.07598  loss_rpn_loc: 0.1291  time: 0.9452  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:21:47] d2.utils.events INFO:  eta: 2:53:10  iter: 12979  total_loss: 0.4474  loss_cls: 0.0853  loss_box_reg: 0.1485  loss_rpn_cls: 0.06392  loss_rpn_loc: 0.1148  time: 0.9452  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:22:06] d2.utils.events INFO:  eta: 2:52:50  iter: 12999  total_loss: 0.4515  loss_cls: 0.09469  loss_box_reg: 0.1748  loss_rpn_cls: 0.07304  loss_rpn_loc: 0.101  time: 0.9452  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 22:22:25] d2.utils.events INFO:  eta: 2:52:31  iter: 13019  total_loss: 0.4958  loss_cls: 0.1074  loss_box_reg: 0.1861  loss_rpn_cls: 0.07334  loss_rpn_loc: 0.1184  time: 0.9452  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:22:44] d2.utils.events INFO:  eta: 2:52:13  iter: 13039  total_loss: 0.4097  loss_cls: 0.0809  loss_box_reg: 0.1408  loss_rpn_cls: 0.06493  loss_rpn_loc: 0.1167  time: 0.9452  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:23:02] d2.utils.events INFO:  eta: 2:51:51  iter: 13059  total_loss: 0.4247  loss_cls: 0.08968  loss_box_reg: 0.1462  loss_rpn_cls: 0.07108  loss_rpn_loc: 0.1125  time: 0.9452  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 22:23:21] d2.utils.events INFO:  eta: 2:51:32  iter: 13079  total_loss: 0.4645  loss_cls: 0.09662  loss_box_reg: 0.1514  loss_rpn_cls: 0.08086  loss_rpn_loc: 0.127  time: 0.9452  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 22:23:40] d2.utils.events INFO:  eta: 2:51:13  iter: 13099  total_loss: 0.444  loss_cls: 0.08205  loss_box_reg: 0.1509  loss_rpn_cls: 0.07865  loss_rpn_loc: 0.1189  time: 0.9452  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 22:23:59] d2.utils.events INFO:  eta: 2:50:54  iter: 13119  total_loss: 0.418  loss_cls: 0.08929  loss_box_reg: 0.1406  loss_rpn_cls: 0.07107  loss_rpn_loc: 0.1051  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:24:18] d2.utils.events INFO:  eta: 2:50:34  iter: 13139  total_loss: 0.3946  loss_cls: 0.07954  loss_box_reg: 0.1369  loss_rpn_cls: 0.06407  loss_rpn_loc: 0.1123  time: 0.9452  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:24:37] d2.utils.events INFO:  eta: 2:50:16  iter: 13159  total_loss: 0.4385  loss_cls: 0.0982  loss_box_reg: 0.1666  loss_rpn_cls: 0.07393  loss_rpn_loc: 0.1125  time: 0.9452  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:24:56] d2.utils.events INFO:  eta: 2:49:57  iter: 13179  total_loss: 0.4141  loss_cls: 0.08607  loss_box_reg: 0.1498  loss_rpn_cls: 0.06463  loss_rpn_loc: 0.09966  time: 0.9452  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:25:15] d2.utils.events INFO:  eta: 2:49:39  iter: 13199  total_loss: 0.4043  loss_cls: 0.08409  loss_box_reg: 0.136  loss_rpn_cls: 0.06775  loss_rpn_loc: 0.111  time: 0.9452  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:25:33] d2.utils.events INFO:  eta: 2:49:19  iter: 13219  total_loss: 0.4443  loss_cls: 0.08694  loss_box_reg: 0.1424  loss_rpn_cls: 0.07441  loss_rpn_loc: 0.1166  time: 0.9452  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:25:52] d2.utils.events INFO:  eta: 2:48:57  iter: 13239  total_loss: 0.4273  loss_cls: 0.09289  loss_box_reg: 0.1633  loss_rpn_cls: 0.07552  loss_rpn_loc: 0.1102  time: 0.9451  data_time: 0.0098  lr: 0.02  max_mem: 19359M
[01/10 22:26:11] d2.utils.events INFO:  eta: 2:48:37  iter: 13259  total_loss: 0.451  loss_cls: 0.0901  loss_box_reg: 0.148  loss_rpn_cls: 0.06693  loss_rpn_loc: 0.1227  time: 0.9451  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:26:30] d2.utils.events INFO:  eta: 2:48:19  iter: 13279  total_loss: 0.4448  loss_cls: 0.08878  loss_box_reg: 0.1665  loss_rpn_cls: 0.06743  loss_rpn_loc: 0.112  time: 0.9451  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:26:49] d2.utils.events INFO:  eta: 2:47:59  iter: 13299  total_loss: 0.429  loss_cls: 0.08857  loss_box_reg: 0.1563  loss_rpn_cls: 0.06682  loss_rpn_loc: 0.1164  time: 0.9451  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 22:27:07] d2.utils.events INFO:  eta: 2:47:38  iter: 13319  total_loss: 0.4176  loss_cls: 0.09347  loss_box_reg: 0.1553  loss_rpn_cls: 0.07191  loss_rpn_loc: 0.09674  time: 0.9451  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 22:27:26] d2.utils.events INFO:  eta: 2:47:21  iter: 13339  total_loss: 0.468  loss_cls: 0.09248  loss_box_reg: 0.1616  loss_rpn_cls: 0.06539  loss_rpn_loc: 0.1151  time: 0.9451  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:27:45] d2.utils.events INFO:  eta: 2:47:03  iter: 13359  total_loss: 0.4166  loss_cls: 0.09479  loss_box_reg: 0.1611  loss_rpn_cls: 0.0702  loss_rpn_loc: 0.1189  time: 0.9451  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:28:04] d2.utils.events INFO:  eta: 2:46:43  iter: 13379  total_loss: 0.4157  loss_cls: 0.09468  loss_box_reg: 0.17  loss_rpn_cls: 0.07024  loss_rpn_loc: 0.1065  time: 0.9451  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:28:23] d2.utils.events INFO:  eta: 2:46:24  iter: 13399  total_loss: 0.4417  loss_cls: 0.08673  loss_box_reg: 0.1521  loss_rpn_cls: 0.06985  loss_rpn_loc: 0.1068  time: 0.9451  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 22:28:42] d2.utils.events INFO:  eta: 2:46:06  iter: 13419  total_loss: 0.4878  loss_cls: 0.101  loss_box_reg: 0.1762  loss_rpn_cls: 0.08476  loss_rpn_loc: 0.1285  time: 0.9451  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:29:01] d2.utils.events INFO:  eta: 2:45:46  iter: 13439  total_loss: 0.4213  loss_cls: 0.08805  loss_box_reg: 0.1479  loss_rpn_cls: 0.07327  loss_rpn_loc: 0.1031  time: 0.9451  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:29:20] d2.utils.events INFO:  eta: 2:45:29  iter: 13459  total_loss: 0.4109  loss_cls: 0.08236  loss_box_reg: 0.1535  loss_rpn_cls: 0.07144  loss_rpn_loc: 0.1071  time: 0.9451  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:29:38] d2.utils.events INFO:  eta: 2:45:12  iter: 13479  total_loss: 0.4544  loss_cls: 0.0995  loss_box_reg: 0.1716  loss_rpn_cls: 0.06596  loss_rpn_loc: 0.1085  time: 0.9451  data_time: 0.0131  lr: 0.02  max_mem: 19359M
[01/10 22:29:57] d2.utils.events INFO:  eta: 2:44:51  iter: 13499  total_loss: 0.4077  loss_cls: 0.08129  loss_box_reg: 0.1553  loss_rpn_cls: 0.06435  loss_rpn_loc: 0.1069  time: 0.9451  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:30:16] d2.utils.events INFO:  eta: 2:44:32  iter: 13519  total_loss: 0.4357  loss_cls: 0.0842  loss_box_reg: 0.1418  loss_rpn_cls: 0.07151  loss_rpn_loc: 0.1157  time: 0.9451  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 22:30:35] d2.utils.events INFO:  eta: 2:44:14  iter: 13539  total_loss: 0.4479  loss_cls: 0.08639  loss_box_reg: 0.1517  loss_rpn_cls: 0.0731  loss_rpn_loc: 0.1248  time: 0.9451  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:30:54] d2.utils.events INFO:  eta: 2:43:57  iter: 13559  total_loss: 0.427  loss_cls: 0.08717  loss_box_reg: 0.1684  loss_rpn_cls: 0.06647  loss_rpn_loc: 0.1144  time: 0.9451  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 22:31:13] d2.utils.events INFO:  eta: 2:43:38  iter: 13579  total_loss: 0.4063  loss_cls: 0.08208  loss_box_reg: 0.1477  loss_rpn_cls: 0.06437  loss_rpn_loc: 0.1088  time: 0.9451  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:31:32] d2.utils.events INFO:  eta: 2:43:24  iter: 13599  total_loss: 0.4439  loss_cls: 0.08619  loss_box_reg: 0.1528  loss_rpn_cls: 0.07187  loss_rpn_loc: 0.1217  time: 0.9451  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:31:51] d2.utils.events INFO:  eta: 2:43:04  iter: 13619  total_loss: 0.4174  loss_cls: 0.08209  loss_box_reg: 0.1445  loss_rpn_cls: 0.0718  loss_rpn_loc: 0.1186  time: 0.9451  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:32:10] d2.utils.events INFO:  eta: 2:42:47  iter: 13639  total_loss: 0.4263  loss_cls: 0.08782  loss_box_reg: 0.1479  loss_rpn_cls: 0.07361  loss_rpn_loc: 0.1015  time: 0.9451  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 22:32:28] d2.utils.events INFO:  eta: 2:42:26  iter: 13659  total_loss: 0.4052  loss_cls: 0.08073  loss_box_reg: 0.1475  loss_rpn_cls: 0.06405  loss_rpn_loc: 0.1252  time: 0.9451  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:32:47] d2.utils.events INFO:  eta: 2:42:06  iter: 13679  total_loss: 0.424  loss_cls: 0.09077  loss_box_reg: 0.146  loss_rpn_cls: 0.06878  loss_rpn_loc: 0.1106  time: 0.9451  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:33:06] d2.utils.events INFO:  eta: 2:41:45  iter: 13699  total_loss: 0.3998  loss_cls: 0.07801  loss_box_reg: 0.135  loss_rpn_cls: 0.06782  loss_rpn_loc: 0.1107  time: 0.9451  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 22:33:25] d2.utils.events INFO:  eta: 2:41:25  iter: 13719  total_loss: 0.4485  loss_cls: 0.08607  loss_box_reg: 0.148  loss_rpn_cls: 0.07709  loss_rpn_loc: 0.1251  time: 0.9451  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:33:44] d2.utils.events INFO:  eta: 2:41:05  iter: 13739  total_loss: 0.4441  loss_cls: 0.09232  loss_box_reg: 0.1607  loss_rpn_cls: 0.06708  loss_rpn_loc: 0.1138  time: 0.9451  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:34:02] d2.utils.events INFO:  eta: 2:40:45  iter: 13759  total_loss: 0.4008  loss_cls: 0.07641  loss_box_reg: 0.1361  loss_rpn_cls: 0.07177  loss_rpn_loc: 0.1094  time: 0.9450  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:34:21] d2.utils.events INFO:  eta: 2:40:25  iter: 13779  total_loss: 0.4232  loss_cls: 0.08257  loss_box_reg: 0.1479  loss_rpn_cls: 0.06908  loss_rpn_loc: 0.123  time: 0.9450  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:34:40] d2.utils.events INFO:  eta: 2:40:10  iter: 13799  total_loss: 0.4119  loss_cls: 0.07687  loss_box_reg: 0.1406  loss_rpn_cls: 0.06618  loss_rpn_loc: 0.1052  time: 0.9450  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:34:59] d2.utils.events INFO:  eta: 2:39:50  iter: 13819  total_loss: 0.4132  loss_cls: 0.08516  loss_box_reg: 0.148  loss_rpn_cls: 0.06403  loss_rpn_loc: 0.1099  time: 0.9450  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:35:18] d2.utils.events INFO:  eta: 2:39:31  iter: 13839  total_loss: 0.4417  loss_cls: 0.09805  loss_box_reg: 0.1615  loss_rpn_cls: 0.071  loss_rpn_loc: 0.1099  time: 0.9450  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 22:35:37] d2.utils.events INFO:  eta: 2:39:14  iter: 13859  total_loss: 0.3787  loss_cls: 0.0809  loss_box_reg: 0.1354  loss_rpn_cls: 0.06525  loss_rpn_loc: 0.09891  time: 0.9450  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:35:56] d2.utils.events INFO:  eta: 2:38:54  iter: 13879  total_loss: 0.4455  loss_cls: 0.0958  loss_box_reg: 0.1499  loss_rpn_cls: 0.06577  loss_rpn_loc: 0.108  time: 0.9450  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:36:14] d2.utils.events INFO:  eta: 2:38:34  iter: 13899  total_loss: 0.4185  loss_cls: 0.09148  loss_box_reg: 0.1542  loss_rpn_cls: 0.06948  loss_rpn_loc: 0.1096  time: 0.9450  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:36:33] d2.utils.events INFO:  eta: 2:38:15  iter: 13919  total_loss: 0.4004  loss_cls: 0.08045  loss_box_reg: 0.1415  loss_rpn_cls: 0.06856  loss_rpn_loc: 0.1133  time: 0.9450  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:36:52] d2.utils.events INFO:  eta: 2:37:54  iter: 13939  total_loss: 0.4475  loss_cls: 0.09694  loss_box_reg: 0.1625  loss_rpn_cls: 0.07687  loss_rpn_loc: 0.1083  time: 0.9450  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:37:11] d2.utils.events INFO:  eta: 2:37:35  iter: 13959  total_loss: 0.4836  loss_cls: 0.09619  loss_box_reg: 0.1729  loss_rpn_cls: 0.0697  loss_rpn_loc: 0.1206  time: 0.9450  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:37:30] d2.utils.events INFO:  eta: 2:37:19  iter: 13979  total_loss: 0.4068  loss_cls: 0.0814  loss_box_reg: 0.14  loss_rpn_cls: 0.07043  loss_rpn_loc: 0.1162  time: 0.9450  data_time: 0.0139  lr: 0.02  max_mem: 19359M
[01/10 22:37:49] d2.utils.events INFO:  eta: 2:37:01  iter: 13999  total_loss: 0.3947  loss_cls: 0.08313  loss_box_reg: 0.1329  loss_rpn_cls: 0.0572  loss_rpn_loc: 0.1142  time: 0.9450  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:38:08] d2.utils.events INFO:  eta: 2:36:42  iter: 14019  total_loss: 0.4104  loss_cls: 0.07922  loss_box_reg: 0.1436  loss_rpn_cls: 0.06941  loss_rpn_loc: 0.117  time: 0.9450  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:38:27] d2.utils.events INFO:  eta: 2:36:23  iter: 14039  total_loss: 0.4311  loss_cls: 0.07669  loss_box_reg: 0.1358  loss_rpn_cls: 0.06805  loss_rpn_loc: 0.1208  time: 0.9450  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:38:46] d2.utils.events INFO:  eta: 2:36:08  iter: 14059  total_loss: 0.4574  loss_cls: 0.09802  loss_box_reg: 0.1682  loss_rpn_cls: 0.07057  loss_rpn_loc: 0.1233  time: 0.9450  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 22:39:04] d2.utils.events INFO:  eta: 2:35:47  iter: 14079  total_loss: 0.4513  loss_cls: 0.09993  loss_box_reg: 0.1598  loss_rpn_cls: 0.07497  loss_rpn_loc: 0.1105  time: 0.9450  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:39:23] d2.utils.events INFO:  eta: 2:35:30  iter: 14099  total_loss: 0.4344  loss_cls: 0.09052  loss_box_reg: 0.1584  loss_rpn_cls: 0.07761  loss_rpn_loc: 0.1141  time: 0.9450  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:39:42] d2.utils.events INFO:  eta: 2:35:11  iter: 14119  total_loss: 0.3781  loss_cls: 0.08444  loss_box_reg: 0.1253  loss_rpn_cls: 0.07006  loss_rpn_loc: 0.1076  time: 0.9450  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:40:01] d2.utils.events INFO:  eta: 2:34:54  iter: 14139  total_loss: 0.4358  loss_cls: 0.09794  loss_box_reg: 0.1702  loss_rpn_cls: 0.07322  loss_rpn_loc: 0.1098  time: 0.9450  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:40:20] d2.utils.events INFO:  eta: 2:34:34  iter: 14159  total_loss: 0.4798  loss_cls: 0.1003  loss_box_reg: 0.1796  loss_rpn_cls: 0.06871  loss_rpn_loc: 0.1216  time: 0.9450  data_time: 0.0147  lr: 0.02  max_mem: 19359M
[01/10 22:40:39] d2.utils.events INFO:  eta: 2:34:16  iter: 14179  total_loss: 0.4212  loss_cls: 0.08954  loss_box_reg: 0.1563  loss_rpn_cls: 0.07405  loss_rpn_loc: 0.09284  time: 0.9450  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:40:58] d2.utils.events INFO:  eta: 2:33:57  iter: 14199  total_loss: 0.5068  loss_cls: 0.1055  loss_box_reg: 0.1728  loss_rpn_cls: 0.08572  loss_rpn_loc: 0.1185  time: 0.9450  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:41:17] d2.utils.events INFO:  eta: 2:33:40  iter: 14219  total_loss: 0.4336  loss_cls: 0.08677  loss_box_reg: 0.1452  loss_rpn_cls: 0.06628  loss_rpn_loc: 0.1075  time: 0.9450  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 22:41:36] d2.utils.events INFO:  eta: 2:33:22  iter: 14239  total_loss: 0.3903  loss_cls: 0.07752  loss_box_reg: 0.1444  loss_rpn_cls: 0.06294  loss_rpn_loc: 0.1097  time: 0.9450  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 22:41:54] d2.utils.events INFO:  eta: 2:33:04  iter: 14259  total_loss: 0.4021  loss_cls: 0.08631  loss_box_reg: 0.1438  loss_rpn_cls: 0.06746  loss_rpn_loc: 0.1057  time: 0.9450  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 22:42:13] d2.utils.events INFO:  eta: 2:32:46  iter: 14279  total_loss: 0.3694  loss_cls: 0.07713  loss_box_reg: 0.1398  loss_rpn_cls: 0.06234  loss_rpn_loc: 0.1155  time: 0.9450  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 22:42:32] d2.utils.events INFO:  eta: 2:32:27  iter: 14299  total_loss: 0.4446  loss_cls: 0.0914  loss_box_reg: 0.161  loss_rpn_cls: 0.06243  loss_rpn_loc: 0.1133  time: 0.9450  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 22:42:51] d2.utils.events INFO:  eta: 2:32:09  iter: 14319  total_loss: 0.4162  loss_cls: 0.08038  loss_box_reg: 0.1472  loss_rpn_cls: 0.06985  loss_rpn_loc: 0.1118  time: 0.9450  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 22:43:10] d2.utils.events INFO:  eta: 2:31:51  iter: 14339  total_loss: 0.4272  loss_cls: 0.09006  loss_box_reg: 0.1464  loss_rpn_cls: 0.07056  loss_rpn_loc: 0.1058  time: 0.9450  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 22:43:29] d2.utils.events INFO:  eta: 2:31:31  iter: 14359  total_loss: 0.4589  loss_cls: 0.1004  loss_box_reg: 0.168  loss_rpn_cls: 0.07123  loss_rpn_loc: 0.1068  time: 0.9450  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:43:48] d2.utils.events INFO:  eta: 2:31:12  iter: 14379  total_loss: 0.3782  loss_cls: 0.07103  loss_box_reg: 0.1375  loss_rpn_cls: 0.05902  loss_rpn_loc: 0.1109  time: 0.9450  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 22:44:07] d2.utils.events INFO:  eta: 2:30:53  iter: 14399  total_loss: 0.4615  loss_cls: 0.09583  loss_box_reg: 0.1645  loss_rpn_cls: 0.07598  loss_rpn_loc: 0.1211  time: 0.9450  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 22:44:26] d2.utils.events INFO:  eta: 2:30:34  iter: 14419  total_loss: 0.4213  loss_cls: 0.09026  loss_box_reg: 0.1482  loss_rpn_cls: 0.07271  loss_rpn_loc: 0.1087  time: 0.9450  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 22:44:44] d2.utils.events INFO:  eta: 2:30:16  iter: 14439  total_loss: 0.4279  loss_cls: 0.08664  loss_box_reg: 0.1512  loss_rpn_cls: 0.06453  loss_rpn_loc: 0.1245  time: 0.9450  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 22:45:03] d2.utils.events INFO:  eta: 2:29:55  iter: 14459  total_loss: 0.4076  loss_cls: 0.08344  loss_box_reg: 0.14  loss_rpn_cls: 0.06313  loss_rpn_loc: 0.1184  time: 0.9450  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 22:45:22] d2.utils.events INFO:  eta: 2:29:36  iter: 14479  total_loss: 0.4636  loss_cls: 0.09042  loss_box_reg: 0.1632  loss_rpn_cls: 0.08058  loss_rpn_loc: 0.1237  time: 0.9450  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:45:41] d2.utils.events INFO:  eta: 2:29:18  iter: 14499  total_loss: 0.3886  loss_cls: 0.07916  loss_box_reg: 0.1312  loss_rpn_cls: 0.06553  loss_rpn_loc: 0.107  time: 0.9450  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 22:46:00] d2.utils.events INFO:  eta: 2:29:00  iter: 14519  total_loss: 0.4613  loss_cls: 0.09177  loss_box_reg: 0.1544  loss_rpn_cls: 0.07542  loss_rpn_loc: 0.1241  time: 0.9450  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:46:19] d2.utils.events INFO:  eta: 2:28:42  iter: 14539  total_loss: 0.3973  loss_cls: 0.07921  loss_box_reg: 0.1447  loss_rpn_cls: 0.05873  loss_rpn_loc: 0.09978  time: 0.9450  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:46:38] d2.utils.events INFO:  eta: 2:28:25  iter: 14559  total_loss: 0.4036  loss_cls: 0.07809  loss_box_reg: 0.1354  loss_rpn_cls: 0.07277  loss_rpn_loc: 0.1142  time: 0.9450  data_time: 0.0096  lr: 0.02  max_mem: 19359M
[01/10 22:46:57] d2.utils.events INFO:  eta: 2:28:05  iter: 14579  total_loss: 0.453  loss_cls: 0.09541  loss_box_reg: 0.1503  loss_rpn_cls: 0.07  loss_rpn_loc: 0.1229  time: 0.9450  data_time: 0.0138  lr: 0.02  max_mem: 19359M
[01/10 22:47:16] d2.utils.events INFO:  eta: 2:27:45  iter: 14599  total_loss: 0.4234  loss_cls: 0.08193  loss_box_reg: 0.1384  loss_rpn_cls: 0.0723  loss_rpn_loc: 0.1144  time: 0.9450  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:47:35] d2.utils.events INFO:  eta: 2:27:26  iter: 14619  total_loss: 0.4257  loss_cls: 0.09383  loss_box_reg: 0.1638  loss_rpn_cls: 0.06844  loss_rpn_loc: 0.1149  time: 0.9450  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 22:47:53] d2.utils.events INFO:  eta: 2:27:06  iter: 14639  total_loss: 0.3993  loss_cls: 0.07679  loss_box_reg: 0.1409  loss_rpn_cls: 0.063  loss_rpn_loc: 0.1166  time: 0.9450  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:48:12] d2.utils.events INFO:  eta: 2:26:47  iter: 14659  total_loss: 0.4495  loss_cls: 0.1014  loss_box_reg: 0.1633  loss_rpn_cls: 0.06502  loss_rpn_loc: 0.1247  time: 0.9450  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:48:31] d2.utils.events INFO:  eta: 2:26:28  iter: 14679  total_loss: 0.4026  loss_cls: 0.0826  loss_box_reg: 0.1366  loss_rpn_cls: 0.06671  loss_rpn_loc: 0.108  time: 0.9450  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:48:50] d2.utils.events INFO:  eta: 2:26:08  iter: 14699  total_loss: 0.3878  loss_cls: 0.081  loss_box_reg: 0.1411  loss_rpn_cls: 0.06502  loss_rpn_loc: 0.09795  time: 0.9450  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 22:49:09] d2.utils.events INFO:  eta: 2:25:50  iter: 14719  total_loss: 0.4323  loss_cls: 0.08702  loss_box_reg: 0.1506  loss_rpn_cls: 0.06379  loss_rpn_loc: 0.1286  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:49:27] d2.utils.events INFO:  eta: 2:25:32  iter: 14739  total_loss: 0.3965  loss_cls: 0.08516  loss_box_reg: 0.1362  loss_rpn_cls: 0.06887  loss_rpn_loc: 0.1026  time: 0.9449  data_time: 0.0140  lr: 0.02  max_mem: 19359M
[01/10 22:49:46] d2.utils.events INFO:  eta: 2:25:13  iter: 14759  total_loss: 0.4172  loss_cls: 0.085  loss_box_reg: 0.1334  loss_rpn_cls: 0.06988  loss_rpn_loc: 0.1244  time: 0.9449  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 22:50:05] d2.utils.events INFO:  eta: 2:24:54  iter: 14779  total_loss: 0.4576  loss_cls: 0.09913  loss_box_reg: 0.1701  loss_rpn_cls: 0.07017  loss_rpn_loc: 0.114  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:50:24] d2.utils.events INFO:  eta: 2:24:35  iter: 14799  total_loss: 0.4163  loss_cls: 0.0971  loss_box_reg: 0.1612  loss_rpn_cls: 0.062  loss_rpn_loc: 0.1134  time: 0.9449  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 22:50:43] d2.utils.events INFO:  eta: 2:24:17  iter: 14819  total_loss: 0.4261  loss_cls: 0.09772  loss_box_reg: 0.1385  loss_rpn_cls: 0.08376  loss_rpn_loc: 0.1242  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 22:51:02] d2.utils.events INFO:  eta: 2:23:58  iter: 14839  total_loss: 0.3958  loss_cls: 0.07955  loss_box_reg: 0.1513  loss_rpn_cls: 0.06354  loss_rpn_loc: 0.1087  time: 0.9449  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 22:51:21] d2.utils.events INFO:  eta: 2:23:39  iter: 14859  total_loss: 0.4671  loss_cls: 0.1007  loss_box_reg: 0.1736  loss_rpn_cls: 0.07696  loss_rpn_loc: 0.1172  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 22:51:40] d2.utils.events INFO:  eta: 2:23:19  iter: 14879  total_loss: 0.4249  loss_cls: 0.08958  loss_box_reg: 0.1357  loss_rpn_cls: 0.07526  loss_rpn_loc: 0.1042  time: 0.9449  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 22:51:58] d2.utils.events INFO:  eta: 2:23:01  iter: 14899  total_loss: 0.402  loss_cls: 0.0871  loss_box_reg: 0.1647  loss_rpn_cls: 0.05601  loss_rpn_loc: 0.1052  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:52:17] d2.utils.events INFO:  eta: 2:22:43  iter: 14919  total_loss: 0.4263  loss_cls: 0.07819  loss_box_reg: 0.1448  loss_rpn_cls: 0.06187  loss_rpn_loc: 0.122  time: 0.9449  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 22:52:36] d2.utils.events INFO:  eta: 2:22:23  iter: 14939  total_loss: 0.4231  loss_cls: 0.09293  loss_box_reg: 0.1531  loss_rpn_cls: 0.06393  loss_rpn_loc: 0.1087  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:52:55] d2.utils.events INFO:  eta: 2:22:02  iter: 14959  total_loss: 0.4267  loss_cls: 0.08537  loss_box_reg: 0.1473  loss_rpn_cls: 0.07  loss_rpn_loc: 0.1174  time: 0.9449  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 22:53:14] d2.utils.events INFO:  eta: 2:21:41  iter: 14979  total_loss: 0.4019  loss_cls: 0.07859  loss_box_reg: 0.1384  loss_rpn_cls: 0.06601  loss_rpn_loc: 0.1191  time: 0.9449  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 22:53:33] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/model_0014999.pth
[01/10 22:53:33] d2.utils.events INFO:  eta: 2:21:22  iter: 14999  total_loss: 0.4106  loss_cls: 0.08504  loss_box_reg: 0.139  loss_rpn_cls: 0.062  loss_rpn_loc: 0.1246  time: 0.9449  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:53:52] d2.utils.events INFO:  eta: 2:21:04  iter: 15019  total_loss: 0.3936  loss_cls: 0.0735  loss_box_reg: 0.1226  loss_rpn_cls: 0.07031  loss_rpn_loc: 0.1218  time: 0.9449  data_time: 0.0136  lr: 0.02  max_mem: 19359M
[01/10 22:54:11] d2.utils.events INFO:  eta: 2:20:45  iter: 15039  total_loss: 0.4293  loss_cls: 0.09419  loss_box_reg: 0.1522  loss_rpn_cls: 0.06459  loss_rpn_loc: 0.1044  time: 0.9449  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 22:54:30] d2.utils.events INFO:  eta: 2:20:24  iter: 15059  total_loss: 0.4326  loss_cls: 0.08862  loss_box_reg: 0.1546  loss_rpn_cls: 0.06397  loss_rpn_loc: 0.1024  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:54:49] d2.utils.events INFO:  eta: 2:20:07  iter: 15079  total_loss: 0.454  loss_cls: 0.08837  loss_box_reg: 0.1499  loss_rpn_cls: 0.07481  loss_rpn_loc: 0.1343  time: 0.9449  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:55:07] d2.utils.events INFO:  eta: 2:19:46  iter: 15099  total_loss: 0.4319  loss_cls: 0.09231  loss_box_reg: 0.1633  loss_rpn_cls: 0.0742  loss_rpn_loc: 0.1144  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:55:26] d2.utils.events INFO:  eta: 2:19:27  iter: 15119  total_loss: 0.474  loss_cls: 0.09299  loss_box_reg: 0.1648  loss_rpn_cls: 0.07679  loss_rpn_loc: 0.1134  time: 0.9449  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 22:55:45] d2.utils.events INFO:  eta: 2:19:09  iter: 15139  total_loss: 0.4192  loss_cls: 0.0836  loss_box_reg: 0.1451  loss_rpn_cls: 0.06737  loss_rpn_loc: 0.1212  time: 0.9449  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 22:56:04] d2.utils.events INFO:  eta: 2:18:50  iter: 15159  total_loss: 0.417  loss_cls: 0.08039  loss_box_reg: 0.144  loss_rpn_cls: 0.0689  loss_rpn_loc: 0.1167  time: 0.9449  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 22:56:23] d2.utils.events INFO:  eta: 2:18:31  iter: 15179  total_loss: 0.4391  loss_cls: 0.09077  loss_box_reg: 0.1535  loss_rpn_cls: 0.06451  loss_rpn_loc: 0.1217  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 22:56:42] d2.utils.events INFO:  eta: 2:18:13  iter: 15199  total_loss: 0.4569  loss_cls: 0.09439  loss_box_reg: 0.14  loss_rpn_cls: 0.08142  loss_rpn_loc: 0.1165  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:57:01] d2.utils.events INFO:  eta: 2:17:53  iter: 15219  total_loss: 0.4107  loss_cls: 0.08854  loss_box_reg: 0.1573  loss_rpn_cls: 0.06363  loss_rpn_loc: 0.1018  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 22:57:20] d2.utils.events INFO:  eta: 2:17:35  iter: 15239  total_loss: 0.443  loss_cls: 0.0893  loss_box_reg: 0.1523  loss_rpn_cls: 0.07235  loss_rpn_loc: 0.1162  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 22:57:39] d2.utils.events INFO:  eta: 2:17:17  iter: 15259  total_loss: 0.409  loss_cls: 0.08057  loss_box_reg: 0.1471  loss_rpn_cls: 0.0596  loss_rpn_loc: 0.1196  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 22:57:58] d2.utils.events INFO:  eta: 2:17:01  iter: 15279  total_loss: 0.4389  loss_cls: 0.08712  loss_box_reg: 0.1485  loss_rpn_cls: 0.06797  loss_rpn_loc: 0.1243  time: 0.9449  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 22:58:17] d2.utils.events INFO:  eta: 2:16:44  iter: 15299  total_loss: 0.4355  loss_cls: 0.09186  loss_box_reg: 0.1594  loss_rpn_cls: 0.0722  loss_rpn_loc: 0.1082  time: 0.9449  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 22:58:35] d2.utils.events INFO:  eta: 2:16:25  iter: 15319  total_loss: 0.4108  loss_cls: 0.08949  loss_box_reg: 0.1473  loss_rpn_cls: 0.06701  loss_rpn_loc: 0.1096  time: 0.9449  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 22:58:55] d2.utils.events INFO:  eta: 2:16:07  iter: 15339  total_loss: 0.4141  loss_cls: 0.08199  loss_box_reg: 0.1304  loss_rpn_cls: 0.06762  loss_rpn_loc: 0.1265  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 22:59:14] d2.utils.events INFO:  eta: 2:15:48  iter: 15359  total_loss: 0.3953  loss_cls: 0.08485  loss_box_reg: 0.149  loss_rpn_cls: 0.0684  loss_rpn_loc: 0.09881  time: 0.9449  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 22:59:33] d2.utils.events INFO:  eta: 2:15:31  iter: 15379  total_loss: 0.4302  loss_cls: 0.08542  loss_box_reg: 0.1474  loss_rpn_cls: 0.05974  loss_rpn_loc: 0.1143  time: 0.9449  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 22:59:51] d2.utils.events INFO:  eta: 2:15:13  iter: 15399  total_loss: 0.3918  loss_cls: 0.08268  loss_box_reg: 0.1456  loss_rpn_cls: 0.06333  loss_rpn_loc: 0.113  time: 0.9449  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 23:00:10] d2.utils.events INFO:  eta: 2:14:56  iter: 15419  total_loss: 0.4154  loss_cls: 0.07766  loss_box_reg: 0.1391  loss_rpn_cls: 0.06211  loss_rpn_loc: 0.1251  time: 0.9449  data_time: 0.0135  lr: 0.02  max_mem: 19359M
[01/10 23:00:29] d2.utils.events INFO:  eta: 2:14:39  iter: 15439  total_loss: 0.4325  loss_cls: 0.08642  loss_box_reg: 0.1641  loss_rpn_cls: 0.07321  loss_rpn_loc: 0.106  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:00:48] d2.utils.events INFO:  eta: 2:14:20  iter: 15459  total_loss: 0.4301  loss_cls: 0.08123  loss_box_reg: 0.1532  loss_rpn_cls: 0.06336  loss_rpn_loc: 0.1211  time: 0.9449  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 23:01:07] d2.utils.events INFO:  eta: 2:14:04  iter: 15479  total_loss: 0.4031  loss_cls: 0.07669  loss_box_reg: 0.1424  loss_rpn_cls: 0.06417  loss_rpn_loc: 0.122  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:01:26] d2.utils.events INFO:  eta: 2:13:46  iter: 15499  total_loss: 0.4069  loss_cls: 0.0873  loss_box_reg: 0.1522  loss_rpn_cls: 0.0678  loss_rpn_loc: 0.1092  time: 0.9449  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 23:01:45] d2.utils.events INFO:  eta: 2:13:26  iter: 15519  total_loss: 0.421  loss_cls: 0.08513  loss_box_reg: 0.1613  loss_rpn_cls: 0.07424  loss_rpn_loc: 0.1174  time: 0.9449  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 23:02:04] d2.utils.events INFO:  eta: 2:13:08  iter: 15539  total_loss: 0.4103  loss_cls: 0.08377  loss_box_reg: 0.1597  loss_rpn_cls: 0.06617  loss_rpn_loc: 0.1008  time: 0.9449  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:02:23] d2.utils.events INFO:  eta: 2:12:49  iter: 15559  total_loss: 0.3913  loss_cls: 0.08187  loss_box_reg: 0.1389  loss_rpn_cls: 0.05955  loss_rpn_loc: 0.113  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 23:02:42] d2.utils.events INFO:  eta: 2:12:31  iter: 15579  total_loss: 0.4334  loss_cls: 0.08311  loss_box_reg: 0.1516  loss_rpn_cls: 0.06773  loss_rpn_loc: 0.1099  time: 0.9450  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 23:03:01] d2.utils.events INFO:  eta: 2:12:12  iter: 15599  total_loss: 0.3989  loss_cls: 0.0791  loss_box_reg: 0.1493  loss_rpn_cls: 0.06164  loss_rpn_loc: 0.1038  time: 0.9449  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:03:20] d2.utils.events INFO:  eta: 2:11:53  iter: 15619  total_loss: 0.4265  loss_cls: 0.08635  loss_box_reg: 0.1573  loss_rpn_cls: 0.07094  loss_rpn_loc: 0.1093  time: 0.9449  data_time: 0.0120  lr: 0.02  max_mem: 19359M
[01/10 23:03:39] d2.utils.events INFO:  eta: 2:11:34  iter: 15639  total_loss: 0.4245  loss_cls: 0.0776  loss_box_reg: 0.1372  loss_rpn_cls: 0.07262  loss_rpn_loc: 0.1258  time: 0.9449  data_time: 0.0130  lr: 0.02  max_mem: 19359M
[01/10 23:03:57] d2.utils.events INFO:  eta: 2:11:16  iter: 15659  total_loss: 0.4126  loss_cls: 0.07545  loss_box_reg: 0.1401  loss_rpn_cls: 0.06449  loss_rpn_loc: 0.1146  time: 0.9449  data_time: 0.0096  lr: 0.02  max_mem: 19359M
[01/10 23:04:16] d2.utils.events INFO:  eta: 2:10:58  iter: 15679  total_loss: 0.4285  loss_cls: 0.08704  loss_box_reg: 0.1501  loss_rpn_cls: 0.06855  loss_rpn_loc: 0.1142  time: 0.9449  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 23:04:35] d2.utils.events INFO:  eta: 2:10:40  iter: 15699  total_loss: 0.3954  loss_cls: 0.08654  loss_box_reg: 0.1528  loss_rpn_cls: 0.06972  loss_rpn_loc: 0.1076  time: 0.9449  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 23:04:54] d2.utils.events INFO:  eta: 2:10:22  iter: 15719  total_loss: 0.3597  loss_cls: 0.07275  loss_box_reg: 0.1248  loss_rpn_cls: 0.06475  loss_rpn_loc: 0.1132  time: 0.9449  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 23:05:13] d2.utils.events INFO:  eta: 2:10:03  iter: 15739  total_loss: 0.4413  loss_cls: 0.08429  loss_box_reg: 0.1614  loss_rpn_cls: 0.06632  loss_rpn_loc: 0.1098  time: 0.9449  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 23:05:32] d2.utils.events INFO:  eta: 2:09:44  iter: 15759  total_loss: 0.4178  loss_cls: 0.08626  loss_box_reg: 0.1532  loss_rpn_cls: 0.06431  loss_rpn_loc: 0.1272  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:05:51] d2.utils.events INFO:  eta: 2:09:25  iter: 15779  total_loss: 0.4079  loss_cls: 0.08636  loss_box_reg: 0.1516  loss_rpn_cls: 0.0657  loss_rpn_loc: 0.1094  time: 0.9449  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 23:06:09] d2.utils.events INFO:  eta: 2:09:04  iter: 15799  total_loss: 0.4252  loss_cls: 0.08766  loss_box_reg: 0.1504  loss_rpn_cls: 0.06875  loss_rpn_loc: 0.1021  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:06:28] d2.utils.events INFO:  eta: 2:08:45  iter: 15819  total_loss: 0.4221  loss_cls: 0.08887  loss_box_reg: 0.1586  loss_rpn_cls: 0.06604  loss_rpn_loc: 0.1163  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:06:47] d2.utils.events INFO:  eta: 2:08:27  iter: 15839  total_loss: 0.3996  loss_cls: 0.07763  loss_box_reg: 0.1415  loss_rpn_cls: 0.06125  loss_rpn_loc: 0.1019  time: 0.9449  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:07:06] d2.utils.events INFO:  eta: 2:08:08  iter: 15859  total_loss: 0.3941  loss_cls: 0.07936  loss_box_reg: 0.1363  loss_rpn_cls: 0.06579  loss_rpn_loc: 0.1191  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:07:25] d2.utils.events INFO:  eta: 2:07:49  iter: 15879  total_loss: 0.443  loss_cls: 0.08944  loss_box_reg: 0.1651  loss_rpn_cls: 0.07162  loss_rpn_loc: 0.1146  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:07:43] d2.utils.events INFO:  eta: 2:07:31  iter: 15899  total_loss: 0.3855  loss_cls: 0.07795  loss_box_reg: 0.1383  loss_rpn_cls: 0.06053  loss_rpn_loc: 0.1104  time: 0.9449  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 23:08:02] d2.utils.events INFO:  eta: 2:07:11  iter: 15919  total_loss: 0.4401  loss_cls: 0.08502  loss_box_reg: 0.1532  loss_rpn_cls: 0.06933  loss_rpn_loc: 0.1139  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:08:21] d2.utils.events INFO:  eta: 2:06:52  iter: 15939  total_loss: 0.3803  loss_cls: 0.07512  loss_box_reg: 0.1367  loss_rpn_cls: 0.06002  loss_rpn_loc: 0.09713  time: 0.9449  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:08:40] d2.utils.events INFO:  eta: 2:06:35  iter: 15959  total_loss: 0.3989  loss_cls: 0.07276  loss_box_reg: 0.1453  loss_rpn_cls: 0.0609  loss_rpn_loc: 0.121  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 23:08:59] d2.utils.events INFO:  eta: 2:06:17  iter: 15979  total_loss: 0.44  loss_cls: 0.09314  loss_box_reg: 0.1634  loss_rpn_cls: 0.0638  loss_rpn_loc: 0.1288  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:09:18] d2.utils.events INFO:  eta: 2:05:58  iter: 15999  total_loss: 0.3916  loss_cls: 0.07787  loss_box_reg: 0.1376  loss_rpn_cls: 0.0649  loss_rpn_loc: 0.1236  time: 0.9449  data_time: 0.0117  lr: 0.02  max_mem: 19359M
[01/10 23:09:37] d2.utils.events INFO:  eta: 2:05:38  iter: 16019  total_loss: 0.4654  loss_cls: 0.09529  loss_box_reg: 0.167  loss_rpn_cls: 0.06756  loss_rpn_loc: 0.1129  time: 0.9449  data_time: 0.0099  lr: 0.02  max_mem: 19359M
[01/10 23:09:56] d2.utils.events INFO:  eta: 2:05:19  iter: 16039  total_loss: 0.434  loss_cls: 0.08686  loss_box_reg: 0.1619  loss_rpn_cls: 0.07512  loss_rpn_loc: 0.1196  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:10:15] d2.utils.events INFO:  eta: 2:05:01  iter: 16059  total_loss: 0.4324  loss_cls: 0.08194  loss_box_reg: 0.1458  loss_rpn_cls: 0.07427  loss_rpn_loc: 0.1237  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:10:34] d2.utils.events INFO:  eta: 2:04:42  iter: 16079  total_loss: 0.4296  loss_cls: 0.08584  loss_box_reg: 0.1455  loss_rpn_cls: 0.06445  loss_rpn_loc: 0.1233  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:10:53] d2.utils.events INFO:  eta: 2:04:25  iter: 16099  total_loss: 0.4061  loss_cls: 0.07547  loss_box_reg: 0.1246  loss_rpn_cls: 0.06394  loss_rpn_loc: 0.1205  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:11:11] d2.utils.events INFO:  eta: 2:04:07  iter: 16119  total_loss: 0.3825  loss_cls: 0.07067  loss_box_reg: 0.1345  loss_rpn_cls: 0.06539  loss_rpn_loc: 0.1261  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:11:30] d2.utils.events INFO:  eta: 2:03:48  iter: 16139  total_loss: 0.4156  loss_cls: 0.08438  loss_box_reg: 0.1452  loss_rpn_cls: 0.06503  loss_rpn_loc: 0.1121  time: 0.9449  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 23:11:49] d2.utils.events INFO:  eta: 2:03:30  iter: 16159  total_loss: 0.4511  loss_cls: 0.08794  loss_box_reg: 0.1636  loss_rpn_cls: 0.07093  loss_rpn_loc: 0.1087  time: 0.9449  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 23:12:08] d2.utils.events INFO:  eta: 2:03:11  iter: 16179  total_loss: 0.4403  loss_cls: 0.09343  loss_box_reg: 0.1724  loss_rpn_cls: 0.07176  loss_rpn_loc: 0.1028  time: 0.9449  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 23:12:27] d2.utils.events INFO:  eta: 2:02:52  iter: 16199  total_loss: 0.3988  loss_cls: 0.08005  loss_box_reg: 0.1455  loss_rpn_cls: 0.07244  loss_rpn_loc: 0.1069  time: 0.9449  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 23:12:46] d2.utils.events INFO:  eta: 2:02:34  iter: 16219  total_loss: 0.416  loss_cls: 0.08314  loss_box_reg: 0.1497  loss_rpn_cls: 0.06794  loss_rpn_loc: 0.1187  time: 0.9449  data_time: 0.0128  lr: 0.02  max_mem: 19359M
[01/10 23:13:05] d2.utils.events INFO:  eta: 2:02:13  iter: 16239  total_loss: 0.3917  loss_cls: 0.07887  loss_box_reg: 0.1306  loss_rpn_cls: 0.06362  loss_rpn_loc: 0.122  time: 0.9449  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 23:13:24] d2.utils.events INFO:  eta: 2:01:53  iter: 16259  total_loss: 0.4123  loss_cls: 0.08034  loss_box_reg: 0.1467  loss_rpn_cls: 0.0635  loss_rpn_loc: 0.1079  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:13:43] d2.utils.events INFO:  eta: 2:01:33  iter: 16279  total_loss: 0.4119  loss_cls: 0.07519  loss_box_reg: 0.1377  loss_rpn_cls: 0.07169  loss_rpn_loc: 0.1302  time: 0.9449  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:14:02] d2.utils.events INFO:  eta: 2:01:13  iter: 16299  total_loss: 0.4073  loss_cls: 0.08832  loss_box_reg: 0.1496  loss_rpn_cls: 0.06116  loss_rpn_loc: 0.1311  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:14:20] d2.utils.events INFO:  eta: 2:00:53  iter: 16319  total_loss: 0.4309  loss_cls: 0.0847  loss_box_reg: 0.1524  loss_rpn_cls: 0.07186  loss_rpn_loc: 0.1192  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:14:39] d2.utils.events INFO:  eta: 2:00:33  iter: 16339  total_loss: 0.4359  loss_cls: 0.09096  loss_box_reg: 0.1554  loss_rpn_cls: 0.07022  loss_rpn_loc: 0.117  time: 0.9449  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:14:58] d2.utils.events INFO:  eta: 2:00:14  iter: 16359  total_loss: 0.4058  loss_cls: 0.08129  loss_box_reg: 0.1524  loss_rpn_cls: 0.0641  loss_rpn_loc: 0.113  time: 0.9449  data_time: 0.0101  lr: 0.02  max_mem: 19359M
[01/10 23:15:17] d2.utils.events INFO:  eta: 1:59:55  iter: 16379  total_loss: 0.3978  loss_cls: 0.07746  loss_box_reg: 0.1458  loss_rpn_cls: 0.07287  loss_rpn_loc: 0.1023  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:15:36] d2.utils.events INFO:  eta: 1:59:35  iter: 16399  total_loss: 0.4079  loss_cls: 0.07679  loss_box_reg: 0.1412  loss_rpn_cls: 0.0622  loss_rpn_loc: 0.1091  time: 0.9449  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 23:15:55] d2.utils.events INFO:  eta: 1:59:15  iter: 16419  total_loss: 0.4004  loss_cls: 0.08545  loss_box_reg: 0.144  loss_rpn_cls: 0.06872  loss_rpn_loc: 0.1066  time: 0.9449  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:16:14] d2.utils.events INFO:  eta: 1:58:56  iter: 16439  total_loss: 0.4472  loss_cls: 0.08627  loss_box_reg: 0.1529  loss_rpn_cls: 0.07272  loss_rpn_loc: 0.1081  time: 0.9449  data_time: 0.0134  lr: 0.02  max_mem: 19359M
[01/10 23:16:33] d2.utils.events INFO:  eta: 1:58:36  iter: 16459  total_loss: 0.3576  loss_cls: 0.08508  loss_box_reg: 0.1316  loss_rpn_cls: 0.07076  loss_rpn_loc: 0.1083  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:16:51] d2.utils.events INFO:  eta: 1:58:16  iter: 16479  total_loss: 0.3894  loss_cls: 0.07977  loss_box_reg: 0.1377  loss_rpn_cls: 0.0629  loss_rpn_loc: 0.108  time: 0.9449  data_time: 0.0098  lr: 0.02  max_mem: 19359M
[01/10 23:17:10] d2.utils.events INFO:  eta: 1:57:57  iter: 16499  total_loss: 0.4112  loss_cls: 0.08116  loss_box_reg: 0.1454  loss_rpn_cls: 0.05973  loss_rpn_loc: 0.1136  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:17:29] d2.utils.events INFO:  eta: 1:57:37  iter: 16519  total_loss: 0.424  loss_cls: 0.08362  loss_box_reg: 0.1454  loss_rpn_cls: 0.07036  loss_rpn_loc: 0.1149  time: 0.9449  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 23:17:48] d2.utils.events INFO:  eta: 1:57:18  iter: 16539  total_loss: 0.4123  loss_cls: 0.08256  loss_box_reg: 0.1346  loss_rpn_cls: 0.06407  loss_rpn_loc: 0.1137  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:18:07] d2.utils.events INFO:  eta: 1:56:58  iter: 16559  total_loss: 0.435  loss_cls: 0.09197  loss_box_reg: 0.1562  loss_rpn_cls: 0.07337  loss_rpn_loc: 0.1146  time: 0.9449  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:18:26] d2.utils.events INFO:  eta: 1:56:38  iter: 16579  total_loss: 0.4036  loss_cls: 0.07811  loss_box_reg: 0.137  loss_rpn_cls: 0.06892  loss_rpn_loc: 0.1217  time: 0.9449  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:18:45] d2.utils.events INFO:  eta: 1:56:20  iter: 16599  total_loss: 0.407  loss_cls: 0.09053  loss_box_reg: 0.1616  loss_rpn_cls: 0.06221  loss_rpn_loc: 0.1001  time: 0.9449  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:19:03] d2.utils.events INFO:  eta: 1:56:01  iter: 16619  total_loss: 0.409  loss_cls: 0.0877  loss_box_reg: 0.1622  loss_rpn_cls: 0.0587  loss_rpn_loc: 0.09865  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:19:22] d2.utils.events INFO:  eta: 1:55:42  iter: 16639  total_loss: 0.4122  loss_cls: 0.07946  loss_box_reg: 0.1455  loss_rpn_cls: 0.07235  loss_rpn_loc: 0.1242  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:19:41] d2.utils.events INFO:  eta: 1:55:24  iter: 16659  total_loss: 0.413  loss_cls: 0.09145  loss_box_reg: 0.1528  loss_rpn_cls: 0.06565  loss_rpn_loc: 0.1048  time: 0.9449  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 23:20:00] d2.utils.events INFO:  eta: 1:55:06  iter: 16679  total_loss: 0.4096  loss_cls: 0.08726  loss_box_reg: 0.1315  loss_rpn_cls: 0.07241  loss_rpn_loc: 0.1026  time: 0.9449  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:20:19] d2.utils.events INFO:  eta: 1:54:47  iter: 16699  total_loss: 0.4093  loss_cls: 0.08308  loss_box_reg: 0.1414  loss_rpn_cls: 0.06251  loss_rpn_loc: 0.1064  time: 0.9449  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:20:38] d2.utils.events INFO:  eta: 1:54:28  iter: 16719  total_loss: 0.3778  loss_cls: 0.07922  loss_box_reg: 0.1281  loss_rpn_cls: 0.06567  loss_rpn_loc: 0.107  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:20:57] d2.utils.events INFO:  eta: 1:54:10  iter: 16739  total_loss: 0.4154  loss_cls: 0.08252  loss_box_reg: 0.1353  loss_rpn_cls: 0.07106  loss_rpn_loc: 0.1252  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:21:16] d2.utils.events INFO:  eta: 1:53:51  iter: 16759  total_loss: 0.399  loss_cls: 0.07228  loss_box_reg: 0.1388  loss_rpn_cls: 0.06963  loss_rpn_loc: 0.109  time: 0.9449  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 23:21:35] d2.utils.events INFO:  eta: 1:53:34  iter: 16779  total_loss: 0.3887  loss_cls: 0.08011  loss_box_reg: 0.1487  loss_rpn_cls: 0.06463  loss_rpn_loc: 0.1043  time: 0.9449  data_time: 0.0132  lr: 0.02  max_mem: 19359M
[01/10 23:21:54] d2.utils.events INFO:  eta: 1:53:17  iter: 16799  total_loss: 0.4354  loss_cls: 0.07973  loss_box_reg: 0.1526  loss_rpn_cls: 0.07351  loss_rpn_loc: 0.1185  time: 0.9449  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:22:13] d2.utils.events INFO:  eta: 1:52:58  iter: 16819  total_loss: 0.4004  loss_cls: 0.0796  loss_box_reg: 0.1452  loss_rpn_cls: 0.06791  loss_rpn_loc: 0.1192  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:22:31] d2.utils.events INFO:  eta: 1:52:40  iter: 16839  total_loss: 0.3801  loss_cls: 0.0794  loss_box_reg: 0.1457  loss_rpn_cls: 0.05738  loss_rpn_loc: 0.09293  time: 0.9449  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 23:22:50] d2.utils.events INFO:  eta: 1:52:21  iter: 16859  total_loss: 0.3922  loss_cls: 0.0831  loss_box_reg: 0.1453  loss_rpn_cls: 0.06409  loss_rpn_loc: 0.1263  time: 0.9449  data_time: 0.0106  lr: 0.02  max_mem: 19359M
[01/10 23:23:09] d2.utils.events INFO:  eta: 1:52:04  iter: 16879  total_loss: 0.4458  loss_cls: 0.08102  loss_box_reg: 0.1476  loss_rpn_cls: 0.07229  loss_rpn_loc: 0.1242  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:23:28] d2.utils.events INFO:  eta: 1:51:44  iter: 16899  total_loss: 0.4293  loss_cls: 0.08494  loss_box_reg: 0.155  loss_rpn_cls: 0.07231  loss_rpn_loc: 0.1125  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:23:47] d2.utils.events INFO:  eta: 1:51:27  iter: 16919  total_loss: 0.4219  loss_cls: 0.08646  loss_box_reg: 0.1439  loss_rpn_cls: 0.06671  loss_rpn_loc: 0.1096  time: 0.9449  data_time: 0.0133  lr: 0.02  max_mem: 19359M
[01/10 23:24:06] d2.utils.events INFO:  eta: 1:51:10  iter: 16939  total_loss: 0.4089  loss_cls: 0.08083  loss_box_reg: 0.1431  loss_rpn_cls: 0.0658  loss_rpn_loc: 0.115  time: 0.9449  data_time: 0.0124  lr: 0.02  max_mem: 19359M
[01/10 23:24:25] d2.utils.events INFO:  eta: 1:50:51  iter: 16959  total_loss: 0.4166  loss_cls: 0.07412  loss_box_reg: 0.1488  loss_rpn_cls: 0.07248  loss_rpn_loc: 0.1122  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:24:44] d2.utils.events INFO:  eta: 1:50:31  iter: 16979  total_loss: 0.4054  loss_cls: 0.08367  loss_box_reg: 0.1442  loss_rpn_cls: 0.06905  loss_rpn_loc: 0.1175  time: 0.9449  data_time: 0.0102  lr: 0.02  max_mem: 19359M
[01/10 23:25:03] d2.utils.events INFO:  eta: 1:50:12  iter: 16999  total_loss: 0.3876  loss_cls: 0.07559  loss_box_reg: 0.1223  loss_rpn_cls: 0.05892  loss_rpn_loc: 0.1173  time: 0.9449  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 23:25:22] d2.utils.events INFO:  eta: 1:49:54  iter: 17019  total_loss: 0.4054  loss_cls: 0.08173  loss_box_reg: 0.146  loss_rpn_cls: 0.07567  loss_rpn_loc: 0.1202  time: 0.9449  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 23:25:41] d2.utils.events INFO:  eta: 1:49:35  iter: 17039  total_loss: 0.3838  loss_cls: 0.06971  loss_box_reg: 0.1383  loss_rpn_cls: 0.07135  loss_rpn_loc: 0.1097  time: 0.9449  data_time: 0.0116  lr: 0.02  max_mem: 19359M
[01/10 23:26:00] d2.utils.events INFO:  eta: 1:49:16  iter: 17059  total_loss: 0.4346  loss_cls: 0.08647  loss_box_reg: 0.1497  loss_rpn_cls: 0.07535  loss_rpn_loc: 0.1096  time: 0.9449  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:26:18] d2.utils.events INFO:  eta: 1:48:55  iter: 17079  total_loss: 0.4263  loss_cls: 0.08028  loss_box_reg: 0.1531  loss_rpn_cls: 0.07145  loss_rpn_loc: 0.1129  time: 0.9449  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 23:26:37] d2.utils.events INFO:  eta: 1:48:36  iter: 17099  total_loss: 0.4536  loss_cls: 0.08703  loss_box_reg: 0.1369  loss_rpn_cls: 0.07144  loss_rpn_loc: 0.1127  time: 0.9449  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:26:56] d2.utils.events INFO:  eta: 1:48:16  iter: 17119  total_loss: 0.4471  loss_cls: 0.09491  loss_box_reg: 0.1712  loss_rpn_cls: 0.06376  loss_rpn_loc: 0.1224  time: 0.9449  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:27:15] d2.utils.events INFO:  eta: 1:47:56  iter: 17139  total_loss: 0.4504  loss_cls: 0.0904  loss_box_reg: 0.1565  loss_rpn_cls: 0.06679  loss_rpn_loc: 0.1309  time: 0.9449  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:27:34] d2.utils.events INFO:  eta: 1:47:35  iter: 17159  total_loss: 0.4219  loss_cls: 0.08413  loss_box_reg: 0.1553  loss_rpn_cls: 0.0647  loss_rpn_loc: 0.1082  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:27:53] d2.utils.events INFO:  eta: 1:47:17  iter: 17179  total_loss: 0.4463  loss_cls: 0.08404  loss_box_reg: 0.1472  loss_rpn_cls: 0.06998  loss_rpn_loc: 0.1198  time: 0.9449  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 23:28:12] d2.utils.events INFO:  eta: 1:46:58  iter: 17199  total_loss: 0.4664  loss_cls: 0.1032  loss_box_reg: 0.1829  loss_rpn_cls: 0.06867  loss_rpn_loc: 0.1153  time: 0.9449  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 23:28:31] d2.utils.events INFO:  eta: 1:46:40  iter: 17219  total_loss: 0.4331  loss_cls: 0.09762  loss_box_reg: 0.1685  loss_rpn_cls: 0.06038  loss_rpn_loc: 0.1113  time: 0.9449  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 23:28:50] d2.utils.events INFO:  eta: 1:46:23  iter: 17239  total_loss: 0.4319  loss_cls: 0.08344  loss_box_reg: 0.1532  loss_rpn_cls: 0.08399  loss_rpn_loc: 0.1209  time: 0.9449  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:29:08] d2.utils.events INFO:  eta: 1:46:03  iter: 17259  total_loss: 0.4055  loss_cls: 0.07663  loss_box_reg: 0.1417  loss_rpn_cls: 0.06507  loss_rpn_loc: 0.1004  time: 0.9448  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:29:27] d2.utils.events INFO:  eta: 1:45:44  iter: 17279  total_loss: 0.4031  loss_cls: 0.07921  loss_box_reg: 0.1378  loss_rpn_cls: 0.06939  loss_rpn_loc: 0.1147  time: 0.9449  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:29:46] d2.utils.events INFO:  eta: 1:45:27  iter: 17299  total_loss: 0.4297  loss_cls: 0.0851  loss_box_reg: 0.1499  loss_rpn_cls: 0.0601  loss_rpn_loc: 0.1062  time: 0.9448  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 23:30:05] d2.utils.events INFO:  eta: 1:45:08  iter: 17319  total_loss: 0.3736  loss_cls: 0.07407  loss_box_reg: 0.1327  loss_rpn_cls: 0.06489  loss_rpn_loc: 0.1073  time: 0.9448  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:30:24] d2.utils.events INFO:  eta: 1:44:49  iter: 17339  total_loss: 0.3798  loss_cls: 0.07683  loss_box_reg: 0.1438  loss_rpn_cls: 0.06223  loss_rpn_loc: 0.1094  time: 0.9448  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:30:43] d2.utils.events INFO:  eta: 1:44:32  iter: 17359  total_loss: 0.4525  loss_cls: 0.08954  loss_box_reg: 0.168  loss_rpn_cls: 0.07721  loss_rpn_loc: 0.1149  time: 0.9448  data_time: 0.0129  lr: 0.02  max_mem: 19359M
[01/10 23:31:01] d2.utils.events INFO:  eta: 1:44:14  iter: 17379  total_loss: 0.4414  loss_cls: 0.08103  loss_box_reg: 0.1594  loss_rpn_cls: 0.07127  loss_rpn_loc: 0.1119  time: 0.9448  data_time: 0.0127  lr: 0.02  max_mem: 19359M
[01/10 23:31:20] d2.utils.events INFO:  eta: 1:43:56  iter: 17399  total_loss: 0.4182  loss_cls: 0.07326  loss_box_reg: 0.1468  loss_rpn_cls: 0.06156  loss_rpn_loc: 0.115  time: 0.9448  data_time: 0.0103  lr: 0.02  max_mem: 19359M
[01/10 23:31:39] d2.utils.events INFO:  eta: 1:43:39  iter: 17419  total_loss: 0.4292  loss_cls: 0.08829  loss_box_reg: 0.1603  loss_rpn_cls: 0.07069  loss_rpn_loc: 0.1195  time: 0.9448  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:31:58] d2.utils.events INFO:  eta: 1:43:19  iter: 17439  total_loss: 0.3751  loss_cls: 0.07643  loss_box_reg: 0.1392  loss_rpn_cls: 0.05805  loss_rpn_loc: 0.1124  time: 0.9448  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 23:32:17] d2.utils.events INFO:  eta: 1:43:01  iter: 17459  total_loss: 0.4521  loss_cls: 0.08929  loss_box_reg: 0.1795  loss_rpn_cls: 0.06174  loss_rpn_loc: 0.1116  time: 0.9448  data_time: 0.0110  lr: 0.02  max_mem: 19359M
[01/10 23:32:36] d2.utils.events INFO:  eta: 1:42:43  iter: 17479  total_loss: 0.3886  loss_cls: 0.07367  loss_box_reg: 0.1396  loss_rpn_cls: 0.06332  loss_rpn_loc: 0.1318  time: 0.9448  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 23:32:55] d2.utils.events INFO:  eta: 1:42:24  iter: 17499  total_loss: 0.4152  loss_cls: 0.08138  loss_box_reg: 0.1493  loss_rpn_cls: 0.06771  loss_rpn_loc: 0.1245  time: 0.9448  data_time: 0.0121  lr: 0.02  max_mem: 19359M
[01/10 23:33:14] d2.utils.events INFO:  eta: 1:42:04  iter: 17519  total_loss: 0.3754  loss_cls: 0.07925  loss_box_reg: 0.1322  loss_rpn_cls: 0.06207  loss_rpn_loc: 0.1139  time: 0.9448  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 23:33:32] d2.utils.events INFO:  eta: 1:41:42  iter: 17539  total_loss: 0.3902  loss_cls: 0.0694  loss_box_reg: 0.1443  loss_rpn_cls: 0.05893  loss_rpn_loc: 0.1115  time: 0.9448  data_time: 0.0118  lr: 0.02  max_mem: 19359M
[01/10 23:33:51] d2.utils.events INFO:  eta: 1:41:23  iter: 17559  total_loss: 0.3565  loss_cls: 0.07108  loss_box_reg: 0.14  loss_rpn_cls: 0.06111  loss_rpn_loc: 0.1084  time: 0.9448  data_time: 0.0111  lr: 0.02  max_mem: 19359M
[01/10 23:34:10] d2.utils.events INFO:  eta: 1:41:05  iter: 17579  total_loss: 0.4209  loss_cls: 0.08614  loss_box_reg: 0.1535  loss_rpn_cls: 0.06756  loss_rpn_loc: 0.1031  time: 0.9448  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:34:29] d2.utils.events INFO:  eta: 1:40:45  iter: 17599  total_loss: 0.4071  loss_cls: 0.08011  loss_box_reg: 0.1532  loss_rpn_cls: 0.06019  loss_rpn_loc: 0.118  time: 0.9448  data_time: 0.0125  lr: 0.02  max_mem: 19359M
[01/10 23:34:48] d2.utils.events INFO:  eta: 1:40:26  iter: 17619  total_loss: 0.4234  loss_cls: 0.07936  loss_box_reg: 0.1559  loss_rpn_cls: 0.06072  loss_rpn_loc: 0.1122  time: 0.9448  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:35:07] d2.utils.events INFO:  eta: 1:40:10  iter: 17639  total_loss: 0.3804  loss_cls: 0.08287  loss_box_reg: 0.1448  loss_rpn_cls: 0.05567  loss_rpn_loc: 0.1008  time: 0.9448  data_time: 0.0104  lr: 0.02  max_mem: 19359M
[01/10 23:35:26] d2.utils.events INFO:  eta: 1:39:49  iter: 17659  total_loss: 0.3897  loss_cls: 0.07168  loss_box_reg: 0.1218  loss_rpn_cls: 0.06849  loss_rpn_loc: 0.1268  time: 0.9448  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 23:35:45] d2.utils.events INFO:  eta: 1:39:29  iter: 17679  total_loss: 0.3982  loss_cls: 0.07528  loss_box_reg: 0.1352  loss_rpn_cls: 0.0645  loss_rpn_loc: 0.1012  time: 0.9448  data_time: 0.0096  lr: 0.02  max_mem: 19359M
[01/10 23:36:04] d2.utils.events INFO:  eta: 1:39:11  iter: 17699  total_loss: 0.377  loss_cls: 0.07512  loss_box_reg: 0.1242  loss_rpn_cls: 0.05904  loss_rpn_loc: 0.1104  time: 0.9448  data_time: 0.0109  lr: 0.02  max_mem: 19359M
[01/10 23:36:23] d2.utils.events INFO:  eta: 1:38:52  iter: 17719  total_loss: 0.4145  loss_cls: 0.08434  loss_box_reg: 0.1505  loss_rpn_cls: 0.06442  loss_rpn_loc: 0.1048  time: 0.9448  data_time: 0.0114  lr: 0.02  max_mem: 19359M
[01/10 23:36:41] d2.utils.events INFO:  eta: 1:38:31  iter: 17739  total_loss: 0.3803  loss_cls: 0.06881  loss_box_reg: 0.1361  loss_rpn_cls: 0.05919  loss_rpn_loc: 0.1104  time: 0.9448  data_time: 0.0115  lr: 0.02  max_mem: 19359M
[01/10 23:37:00] d2.utils.events INFO:  eta: 1:38:13  iter: 17759  total_loss: 0.4015  loss_cls: 0.07879  loss_box_reg: 0.1351  loss_rpn_cls: 0.06764  loss_rpn_loc: 0.1132  time: 0.9448  data_time: 0.0105  lr: 0.02  max_mem: 19359M
[01/10 23:37:19] d2.utils.events INFO:  eta: 1:37:54  iter: 17779  total_loss: 0.4089  loss_cls: 0.08186  loss_box_reg: 0.1553  loss_rpn_cls: 0.0641  loss_rpn_loc: 0.1007  time: 0.9448  data_time: 0.0112  lr: 0.02  max_mem: 19359M
[01/10 23:37:38] d2.utils.events INFO:  eta: 1:37:35  iter: 17799  total_loss: 0.3602  loss_cls: 0.08153  loss_box_reg: 0.1429  loss_rpn_cls: 0.05853  loss_rpn_loc: 0.09788  time: 0.9448  data_time: 0.0126  lr: 0.02  max_mem: 19359M
[01/10 23:37:57] d2.utils.events INFO:  eta: 1:37:15  iter: 17819  total_loss: 0.3702  loss_cls: 0.07496  loss_box_reg: 0.136  loss_rpn_cls: 0.05953  loss_rpn_loc: 0.09773  time: 0.9448  data_time: 0.0123  lr: 0.02  max_mem: 19359M
[01/10 23:38:16] d2.utils.events INFO:  eta: 1:36:57  iter: 17839  total_loss: 0.3787  loss_cls: 0.0784  loss_box_reg: 0.1437  loss_rpn_cls: 0.05942  loss_rpn_loc: 0.111  time: 0.9448  data_time: 0.0107  lr: 0.02  max_mem: 19359M
[01/10 23:38:35] d2.utils.events INFO:  eta: 1:36:37  iter: 17859  total_loss: 0.4256  loss_cls: 0.08372  loss_box_reg: 0.1461  loss_rpn_cls: 0.07107  loss_rpn_loc: 0.1241  time: 0.9448  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:38:53] d2.utils.events INFO:  eta: 1:36:18  iter: 17879  total_loss: 0.3844  loss_cls: 0.07396  loss_box_reg: 0.1342  loss_rpn_cls: 0.06583  loss_rpn_loc: 0.112  time: 0.9448  data_time: 0.0113  lr: 0.02  max_mem: 19359M
[01/10 23:39:12] d2.utils.events INFO:  eta: 1:35:59  iter: 17899  total_loss: 0.418  loss_cls: 0.08366  loss_box_reg: 0.1609  loss_rpn_cls: 0.06041  loss_rpn_loc: 0.112  time: 0.9448  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 23:39:31] d2.utils.events INFO:  eta: 1:35:40  iter: 17919  total_loss: 0.3965  loss_cls: 0.0844  loss_box_reg: 0.1559  loss_rpn_cls: 0.0576  loss_rpn_loc: 0.1102  time: 0.9448  data_time: 0.0137  lr: 0.02  max_mem: 19359M
[01/10 23:39:50] d2.utils.events INFO:  eta: 1:35:21  iter: 17939  total_loss: 0.3934  loss_cls: 0.07627  loss_box_reg: 0.1319  loss_rpn_cls: 0.0674  loss_rpn_loc: 0.1183  time: 0.9448  data_time: 0.0122  lr: 0.02  max_mem: 19359M
[01/10 23:40:09] d2.utils.events INFO:  eta: 1:35:01  iter: 17959  total_loss: 0.3753  loss_cls: 0.07515  loss_box_reg: 0.1404  loss_rpn_cls: 0.06581  loss_rpn_loc: 0.1053  time: 0.9448  data_time: 0.0144  lr: 0.02  max_mem: 19359M
[01/10 23:40:28] d2.utils.events INFO:  eta: 1:34:42  iter: 17979  total_loss: 0.4213  loss_cls: 0.0808  loss_box_reg: 0.1414  loss_rpn_cls: 0.06729  loss_rpn_loc: 0.1049  time: 0.9448  data_time: 0.0108  lr: 0.02  max_mem: 19359M
[01/10 23:40:47] d2.utils.events INFO:  eta: 1:34:23  iter: 17999  total_loss: 0.4337  loss_cls: 0.08826  loss_box_reg: 0.158  loss_rpn_cls: 0.0691  loss_rpn_loc: 0.1093  time: 0.9448  data_time: 0.0119  lr: 0.02  max_mem: 19359M
[01/10 23:41:06] d2.utils.events INFO:  eta: 1:34:04  iter: 18019  total_loss: 0.4072  loss_cls: 0.08137  loss_box_reg: 0.1436  loss_rpn_cls: 0.06592  loss_rpn_loc: 0.1216  time: 0.9448  data_time: 0.0137  lr: 0.002  max_mem: 19359M
[01/10 23:41:25] d2.utils.events INFO:  eta: 1:33:48  iter: 18039  total_loss: 0.386  loss_cls: 0.0799  loss_box_reg: 0.1407  loss_rpn_cls: 0.05943  loss_rpn_loc: 0.112  time: 0.9448  data_time: 0.0131  lr: 0.002  max_mem: 19359M
[01/10 23:41:44] d2.utils.events INFO:  eta: 1:33:29  iter: 18059  total_loss: 0.391  loss_cls: 0.07307  loss_box_reg: 0.1478  loss_rpn_cls: 0.06355  loss_rpn_loc: 0.09514  time: 0.9448  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/10 23:42:03] d2.utils.events INFO:  eta: 1:33:11  iter: 18079  total_loss: 0.3774  loss_cls: 0.06996  loss_box_reg: 0.1433  loss_rpn_cls: 0.05636  loss_rpn_loc: 0.1065  time: 0.9448  data_time: 0.0123  lr: 0.002  max_mem: 19359M
[01/10 23:42:22] d2.utils.events INFO:  eta: 1:32:51  iter: 18099  total_loss: 0.3772  loss_cls: 0.06699  loss_box_reg: 0.1317  loss_rpn_cls: 0.06705  loss_rpn_loc: 0.1099  time: 0.9448  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/10 23:42:40] d2.utils.events INFO:  eta: 1:32:32  iter: 18119  total_loss: 0.3936  loss_cls: 0.0696  loss_box_reg: 0.1363  loss_rpn_cls: 0.06838  loss_rpn_loc: 0.1017  time: 0.9448  data_time: 0.0115  lr: 0.002  max_mem: 19359M
[01/10 23:42:59] d2.utils.events INFO:  eta: 1:32:13  iter: 18139  total_loss: 0.3839  loss_cls: 0.07121  loss_box_reg: 0.1486  loss_rpn_cls: 0.05559  loss_rpn_loc: 0.09967  time: 0.9448  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/10 23:43:18] d2.utils.events INFO:  eta: 1:31:55  iter: 18159  total_loss: 0.3617  loss_cls: 0.06964  loss_box_reg: 0.1342  loss_rpn_cls: 0.05889  loss_rpn_loc: 0.1085  time: 0.9448  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/10 23:43:37] d2.utils.events INFO:  eta: 1:31:36  iter: 18179  total_loss: 0.3746  loss_cls: 0.0655  loss_box_reg: 0.1275  loss_rpn_cls: 0.07325  loss_rpn_loc: 0.1118  time: 0.9448  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/10 23:43:56] d2.utils.events INFO:  eta: 1:31:17  iter: 18199  total_loss: 0.3415  loss_cls: 0.063  loss_box_reg: 0.1227  loss_rpn_cls: 0.05574  loss_rpn_loc: 0.09419  time: 0.9448  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/10 23:44:15] d2.utils.events INFO:  eta: 1:30:57  iter: 18219  total_loss: 0.378  loss_cls: 0.07102  loss_box_reg: 0.1313  loss_rpn_cls: 0.06244  loss_rpn_loc: 0.1108  time: 0.9448  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/10 23:44:34] d2.utils.events INFO:  eta: 1:30:38  iter: 18239  total_loss: 0.4126  loss_cls: 0.07608  loss_box_reg: 0.1559  loss_rpn_cls: 0.06463  loss_rpn_loc: 0.1259  time: 0.9448  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/10 23:44:53] d2.utils.events INFO:  eta: 1:30:19  iter: 18259  total_loss: 0.3782  loss_cls: 0.07607  loss_box_reg: 0.152  loss_rpn_cls: 0.05355  loss_rpn_loc: 0.1045  time: 0.9448  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/10 23:45:12] d2.utils.events INFO:  eta: 1:30:01  iter: 18279  total_loss: 0.3491  loss_cls: 0.06271  loss_box_reg: 0.1176  loss_rpn_cls: 0.05882  loss_rpn_loc: 0.1027  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:45:31] d2.utils.events INFO:  eta: 1:29:42  iter: 18299  total_loss: 0.3663  loss_cls: 0.06663  loss_box_reg: 0.1327  loss_rpn_cls: 0.05847  loss_rpn_loc: 0.1083  time: 0.9448  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/10 23:45:49] d2.utils.events INFO:  eta: 1:29:23  iter: 18319  total_loss: 0.3394  loss_cls: 0.05846  loss_box_reg: 0.1148  loss_rpn_cls: 0.05394  loss_rpn_loc: 0.1011  time: 0.9448  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/10 23:46:08] d2.utils.events INFO:  eta: 1:29:05  iter: 18339  total_loss: 0.3725  loss_cls: 0.07646  loss_box_reg: 0.1394  loss_rpn_cls: 0.05777  loss_rpn_loc: 0.09219  time: 0.9448  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/10 23:46:27] d2.utils.events INFO:  eta: 1:28:43  iter: 18359  total_loss: 0.3545  loss_cls: 0.06184  loss_box_reg: 0.1148  loss_rpn_cls: 0.0557  loss_rpn_loc: 0.1104  time: 0.9448  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/10 23:46:46] d2.utils.events INFO:  eta: 1:28:24  iter: 18379  total_loss: 0.3687  loss_cls: 0.06481  loss_box_reg: 0.1339  loss_rpn_cls: 0.05197  loss_rpn_loc: 0.09886  time: 0.9448  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/10 23:47:05] d2.utils.events INFO:  eta: 1:28:05  iter: 18399  total_loss: 0.3382  loss_cls: 0.05961  loss_box_reg: 0.1224  loss_rpn_cls: 0.05046  loss_rpn_loc: 0.1111  time: 0.9448  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/10 23:47:24] d2.utils.events INFO:  eta: 1:27:47  iter: 18419  total_loss: 0.3639  loss_cls: 0.06476  loss_box_reg: 0.1288  loss_rpn_cls: 0.05941  loss_rpn_loc: 0.1135  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:47:43] d2.utils.events INFO:  eta: 1:27:27  iter: 18439  total_loss: 0.3342  loss_cls: 0.06105  loss_box_reg: 0.1207  loss_rpn_cls: 0.04953  loss_rpn_loc: 0.0908  time: 0.9448  data_time: 0.0106  lr: 0.002  max_mem: 19359M
[01/10 23:48:02] d2.utils.events INFO:  eta: 1:27:09  iter: 18459  total_loss: 0.3559  loss_cls: 0.05919  loss_box_reg: 0.1223  loss_rpn_cls: 0.05601  loss_rpn_loc: 0.1141  time: 0.9448  data_time: 0.0106  lr: 0.002  max_mem: 19359M
[01/10 23:48:20] d2.utils.events INFO:  eta: 1:26:51  iter: 18479  total_loss: 0.3849  loss_cls: 0.06867  loss_box_reg: 0.1383  loss_rpn_cls: 0.06442  loss_rpn_loc: 0.1089  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:48:39] d2.utils.events INFO:  eta: 1:26:33  iter: 18499  total_loss: 0.3821  loss_cls: 0.07479  loss_box_reg: 0.1407  loss_rpn_cls: 0.05485  loss_rpn_loc: 0.1082  time: 0.9448  data_time: 0.0128  lr: 0.002  max_mem: 19359M
[01/10 23:48:58] d2.utils.events INFO:  eta: 1:26:15  iter: 18519  total_loss: 0.3479  loss_cls: 0.06348  loss_box_reg: 0.1274  loss_rpn_cls: 0.05394  loss_rpn_loc: 0.1005  time: 0.9448  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/10 23:49:17] d2.utils.events INFO:  eta: 1:25:57  iter: 18539  total_loss: 0.3263  loss_cls: 0.05853  loss_box_reg: 0.1203  loss_rpn_cls: 0.04704  loss_rpn_loc: 0.09345  time: 0.9448  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/10 23:49:36] d2.utils.events INFO:  eta: 1:25:38  iter: 18559  total_loss: 0.3807  loss_cls: 0.07209  loss_box_reg: 0.1425  loss_rpn_cls: 0.05724  loss_rpn_loc: 0.1091  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:49:55] d2.utils.events INFO:  eta: 1:25:19  iter: 18579  total_loss: 0.3874  loss_cls: 0.07418  loss_box_reg: 0.1352  loss_rpn_cls: 0.06162  loss_rpn_loc: 0.1022  time: 0.9448  data_time: 0.0100  lr: 0.002  max_mem: 19359M
[01/10 23:50:14] d2.utils.events INFO:  eta: 1:24:59  iter: 18599  total_loss: 0.3524  loss_cls: 0.06441  loss_box_reg: 0.1224  loss_rpn_cls: 0.05607  loss_rpn_loc: 0.1113  time: 0.9448  data_time: 0.0128  lr: 0.002  max_mem: 19359M
[01/10 23:50:33] d2.utils.events INFO:  eta: 1:24:40  iter: 18619  total_loss: 0.3747  loss_cls: 0.06617  loss_box_reg: 0.1429  loss_rpn_cls: 0.05446  loss_rpn_loc: 0.1069  time: 0.9448  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/10 23:50:52] d2.utils.events INFO:  eta: 1:24:21  iter: 18639  total_loss: 0.361  loss_cls: 0.06234  loss_box_reg: 0.124  loss_rpn_cls: 0.05553  loss_rpn_loc: 0.1082  time: 0.9448  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/10 23:51:10] d2.utils.events INFO:  eta: 1:24:02  iter: 18659  total_loss: 0.3333  loss_cls: 0.06009  loss_box_reg: 0.119  loss_rpn_cls: 0.0536  loss_rpn_loc: 0.08838  time: 0.9448  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/10 23:51:29] d2.utils.events INFO:  eta: 1:23:43  iter: 18679  total_loss: 0.3889  loss_cls: 0.06959  loss_box_reg: 0.1513  loss_rpn_cls: 0.05614  loss_rpn_loc: 0.1138  time: 0.9448  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/10 23:51:48] d2.utils.events INFO:  eta: 1:23:23  iter: 18699  total_loss: 0.3563  loss_cls: 0.06945  loss_box_reg: 0.1282  loss_rpn_cls: 0.05291  loss_rpn_loc: 0.09851  time: 0.9448  data_time: 0.0125  lr: 0.002  max_mem: 19359M
[01/10 23:52:07] d2.utils.events INFO:  eta: 1:23:03  iter: 18719  total_loss: 0.3388  loss_cls: 0.06722  loss_box_reg: 0.1309  loss_rpn_cls: 0.05419  loss_rpn_loc: 0.1037  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:52:26] d2.utils.events INFO:  eta: 1:22:45  iter: 18739  total_loss: 0.3564  loss_cls: 0.05709  loss_box_reg: 0.1124  loss_rpn_cls: 0.05497  loss_rpn_loc: 0.09845  time: 0.9448  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/10 23:52:45] d2.utils.events INFO:  eta: 1:22:25  iter: 18759  total_loss: 0.3863  loss_cls: 0.06837  loss_box_reg: 0.1341  loss_rpn_cls: 0.06295  loss_rpn_loc: 0.1176  time: 0.9448  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/10 23:53:04] d2.utils.events INFO:  eta: 1:22:06  iter: 18779  total_loss: 0.3694  loss_cls: 0.06742  loss_box_reg: 0.1277  loss_rpn_cls: 0.05512  loss_rpn_loc: 0.1065  time: 0.9448  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/10 23:53:22] d2.utils.events INFO:  eta: 1:21:47  iter: 18799  total_loss: 0.3473  loss_cls: 0.06534  loss_box_reg: 0.1341  loss_rpn_cls: 0.05337  loss_rpn_loc: 0.09782  time: 0.9448  data_time: 0.0103  lr: 0.002  max_mem: 19359M
[01/10 23:53:41] d2.utils.events INFO:  eta: 1:21:28  iter: 18819  total_loss: 0.344  loss_cls: 0.06241  loss_box_reg: 0.1264  loss_rpn_cls: 0.05163  loss_rpn_loc: 0.1049  time: 0.9448  data_time: 0.0133  lr: 0.002  max_mem: 19359M
[01/10 23:54:00] d2.utils.events INFO:  eta: 1:21:07  iter: 18839  total_loss: 0.3388  loss_cls: 0.06006  loss_box_reg: 0.1217  loss_rpn_cls: 0.05172  loss_rpn_loc: 0.1019  time: 0.9448  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/10 23:54:19] d2.utils.events INFO:  eta: 1:20:47  iter: 18859  total_loss: 0.3498  loss_cls: 0.06543  loss_box_reg: 0.134  loss_rpn_cls: 0.05131  loss_rpn_loc: 0.09517  time: 0.9448  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/10 23:54:38] d2.utils.events INFO:  eta: 1:20:29  iter: 18879  total_loss: 0.3787  loss_cls: 0.06591  loss_box_reg: 0.1361  loss_rpn_cls: 0.05822  loss_rpn_loc: 0.0994  time: 0.9448  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/10 23:54:56] d2.utils.events INFO:  eta: 1:20:09  iter: 18899  total_loss: 0.378  loss_cls: 0.07003  loss_box_reg: 0.1423  loss_rpn_cls: 0.05535  loss_rpn_loc: 0.09892  time: 0.9447  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/10 23:55:16] d2.utils.events INFO:  eta: 1:19:50  iter: 18919  total_loss: 0.3582  loss_cls: 0.06424  loss_box_reg: 0.1411  loss_rpn_cls: 0.04942  loss_rpn_loc: 0.1069  time: 0.9448  data_time: 0.0123  lr: 0.002  max_mem: 19359M
[01/10 23:55:34] d2.utils.events INFO:  eta: 1:19:29  iter: 18939  total_loss: 0.3517  loss_cls: 0.06389  loss_box_reg: 0.1346  loss_rpn_cls: 0.05147  loss_rpn_loc: 0.1027  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/10 23:55:53] d2.utils.events INFO:  eta: 1:19:11  iter: 18959  total_loss: 0.3551  loss_cls: 0.06666  loss_box_reg: 0.1239  loss_rpn_cls: 0.04983  loss_rpn_loc: 0.0988  time: 0.9447  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/10 23:56:12] d2.utils.events INFO:  eta: 1:18:53  iter: 18979  total_loss: 0.3513  loss_cls: 0.05906  loss_box_reg: 0.1134  loss_rpn_cls: 0.05517  loss_rpn_loc: 0.1131  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/10 23:56:31] d2.utils.events INFO:  eta: 1:18:34  iter: 18999  total_loss: 0.3529  loss_cls: 0.05934  loss_box_reg: 0.1274  loss_rpn_cls: 0.05507  loss_rpn_loc: 0.1199  time: 0.9447  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/10 23:56:50] d2.utils.events INFO:  eta: 1:18:14  iter: 19019  total_loss: 0.3422  loss_cls: 0.06115  loss_box_reg: 0.1225  loss_rpn_cls: 0.04974  loss_rpn_loc: 0.09282  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/10 23:57:09] d2.utils.events INFO:  eta: 1:17:55  iter: 19039  total_loss: 0.3542  loss_cls: 0.06201  loss_box_reg: 0.1316  loss_rpn_cls: 0.05499  loss_rpn_loc: 0.1038  time: 0.9447  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/10 23:57:28] d2.utils.events INFO:  eta: 1:17:36  iter: 19059  total_loss: 0.3426  loss_cls: 0.05689  loss_box_reg: 0.1233  loss_rpn_cls: 0.05508  loss_rpn_loc: 0.1058  time: 0.9447  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/10 23:57:47] d2.utils.events INFO:  eta: 1:17:17  iter: 19079  total_loss: 0.3331  loss_cls: 0.06252  loss_box_reg: 0.1233  loss_rpn_cls: 0.05043  loss_rpn_loc: 0.1034  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/10 23:58:06] d2.utils.events INFO:  eta: 1:17:00  iter: 19099  total_loss: 0.3586  loss_cls: 0.0637  loss_box_reg: 0.1237  loss_rpn_cls: 0.04793  loss_rpn_loc: 0.1055  time: 0.9447  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/10 23:58:24] d2.utils.events INFO:  eta: 1:16:41  iter: 19119  total_loss: 0.3674  loss_cls: 0.0564  loss_box_reg: 0.1257  loss_rpn_cls: 0.05386  loss_rpn_loc: 0.09663  time: 0.9447  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/10 23:58:43] d2.utils.events INFO:  eta: 1:16:23  iter: 19139  total_loss: 0.3437  loss_cls: 0.06027  loss_box_reg: 0.1303  loss_rpn_cls: 0.05066  loss_rpn_loc: 0.09923  time: 0.9447  data_time: 0.0115  lr: 0.002  max_mem: 19359M
[01/10 23:59:02] d2.utils.events INFO:  eta: 1:16:04  iter: 19159  total_loss: 0.3709  loss_cls: 0.06536  loss_box_reg: 0.1281  loss_rpn_cls: 0.0543  loss_rpn_loc: 0.1108  time: 0.9447  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/10 23:59:21] d2.utils.events INFO:  eta: 1:15:46  iter: 19179  total_loss: 0.3498  loss_cls: 0.06147  loss_box_reg: 0.1176  loss_rpn_cls: 0.05345  loss_rpn_loc: 0.1146  time: 0.9448  data_time: 0.0130  lr: 0.002  max_mem: 19359M
[01/10 23:59:40] d2.utils.events INFO:  eta: 1:15:27  iter: 19199  total_loss: 0.3457  loss_cls: 0.06396  loss_box_reg: 0.1315  loss_rpn_cls: 0.05601  loss_rpn_loc: 0.09927  time: 0.9448  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/10 23:59:59] d2.utils.events INFO:  eta: 1:15:08  iter: 19219  total_loss: 0.3406  loss_cls: 0.06088  loss_box_reg: 0.1232  loss_rpn_cls: 0.05429  loss_rpn_loc: 0.1067  time: 0.9448  data_time: 0.0117  lr: 0.002  max_mem: 19359M
[01/11 00:00:18] d2.utils.events INFO:  eta: 1:14:50  iter: 19239  total_loss: 0.2949  loss_cls: 0.05484  loss_box_reg: 0.1182  loss_rpn_cls: 0.04077  loss_rpn_loc: 0.09177  time: 0.9448  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/11 00:00:37] d2.utils.events INFO:  eta: 1:14:31  iter: 19259  total_loss: 0.3564  loss_cls: 0.06161  loss_box_reg: 0.1295  loss_rpn_cls: 0.05107  loss_rpn_loc: 0.1008  time: 0.9448  data_time: 0.0121  lr: 0.002  max_mem: 19359M
[01/11 00:00:56] d2.utils.events INFO:  eta: 1:14:10  iter: 19279  total_loss: 0.3409  loss_cls: 0.05918  loss_box_reg: 0.1191  loss_rpn_cls: 0.05341  loss_rpn_loc: 0.1073  time: 0.9447  data_time: 0.0125  lr: 0.002  max_mem: 19359M
[01/11 00:01:14] d2.utils.events INFO:  eta: 1:13:50  iter: 19299  total_loss: 0.3322  loss_cls: 0.06163  loss_box_reg: 0.1294  loss_rpn_cls: 0.04946  loss_rpn_loc: 0.08223  time: 0.9447  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/11 00:01:33] d2.utils.events INFO:  eta: 1:13:32  iter: 19319  total_loss: 0.3941  loss_cls: 0.06798  loss_box_reg: 0.1425  loss_rpn_cls: 0.06067  loss_rpn_loc: 0.109  time: 0.9447  data_time: 0.0139  lr: 0.002  max_mem: 19359M
[01/11 00:01:52] d2.utils.events INFO:  eta: 1:13:13  iter: 19339  total_loss: 0.346  loss_cls: 0.06656  loss_box_reg: 0.1344  loss_rpn_cls: 0.04828  loss_rpn_loc: 0.1011  time: 0.9447  data_time: 0.0104  lr: 0.002  max_mem: 19359M
[01/11 00:02:11] d2.utils.events INFO:  eta: 1:12:56  iter: 19359  total_loss: 0.3676  loss_cls: 0.06089  loss_box_reg: 0.1313  loss_rpn_cls: 0.05064  loss_rpn_loc: 0.09511  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:02:30] d2.utils.events INFO:  eta: 1:12:37  iter: 19379  total_loss: 0.3328  loss_cls: 0.05812  loss_box_reg: 0.1213  loss_rpn_cls: 0.05071  loss_rpn_loc: 0.09528  time: 0.9447  data_time: 0.0103  lr: 0.002  max_mem: 19359M
[01/11 00:02:49] d2.utils.events INFO:  eta: 1:12:18  iter: 19399  total_loss: 0.3801  loss_cls: 0.06315  loss_box_reg: 0.1368  loss_rpn_cls: 0.05625  loss_rpn_loc: 0.105  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:03:08] d2.utils.events INFO:  eta: 1:11:57  iter: 19419  total_loss: 0.3605  loss_cls: 0.06377  loss_box_reg: 0.1265  loss_rpn_cls: 0.05498  loss_rpn_loc: 0.09708  time: 0.9447  data_time: 0.0128  lr: 0.002  max_mem: 19359M
[01/11 00:03:27] d2.utils.events INFO:  eta: 1:11:39  iter: 19439  total_loss: 0.3421  loss_cls: 0.06456  loss_box_reg: 0.1271  loss_rpn_cls: 0.0516  loss_rpn_loc: 0.09953  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:03:45] d2.utils.events INFO:  eta: 1:11:20  iter: 19459  total_loss: 0.3433  loss_cls: 0.06222  loss_box_reg: 0.1325  loss_rpn_cls: 0.05004  loss_rpn_loc: 0.1132  time: 0.9447  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:04:04] d2.utils.events INFO:  eta: 1:11:01  iter: 19479  total_loss: 0.3432  loss_cls: 0.06231  loss_box_reg: 0.1387  loss_rpn_cls: 0.04589  loss_rpn_loc: 0.09305  time: 0.9447  data_time: 0.0103  lr: 0.002  max_mem: 19359M
[01/11 00:04:23] d2.utils.events INFO:  eta: 1:10:41  iter: 19499  total_loss: 0.3174  loss_cls: 0.0579  loss_box_reg: 0.1234  loss_rpn_cls: 0.04767  loss_rpn_loc: 0.1007  time: 0.9447  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/11 00:04:42] d2.utils.events INFO:  eta: 1:10:22  iter: 19519  total_loss: 0.2986  loss_cls: 0.05588  loss_box_reg: 0.1194  loss_rpn_cls: 0.04259  loss_rpn_loc: 0.08447  time: 0.9447  data_time: 0.0123  lr: 0.002  max_mem: 19359M
[01/11 00:05:01] d2.utils.events INFO:  eta: 1:10:03  iter: 19539  total_loss: 0.3573  loss_cls: 0.057  loss_box_reg: 0.1263  loss_rpn_cls: 0.04975  loss_rpn_loc: 0.1066  time: 0.9447  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/11 00:05:20] d2.utils.events INFO:  eta: 1:09:44  iter: 19559  total_loss: 0.3325  loss_cls: 0.05724  loss_box_reg: 0.1135  loss_rpn_cls: 0.05261  loss_rpn_loc: 0.1043  time: 0.9447  data_time: 0.0130  lr: 0.002  max_mem: 19359M
[01/11 00:05:39] d2.utils.events INFO:  eta: 1:09:26  iter: 19579  total_loss: 0.3334  loss_cls: 0.05506  loss_box_reg: 0.1247  loss_rpn_cls: 0.05196  loss_rpn_loc: 0.09805  time: 0.9447  data_time: 0.0129  lr: 0.002  max_mem: 19359M
[01/11 00:05:58] d2.utils.events INFO:  eta: 1:09:07  iter: 19599  total_loss: 0.3099  loss_cls: 0.05641  loss_box_reg: 0.1161  loss_rpn_cls: 0.05021  loss_rpn_loc: 0.09853  time: 0.9447  data_time: 0.0106  lr: 0.002  max_mem: 19359M
[01/11 00:06:17] d2.utils.events INFO:  eta: 1:08:50  iter: 19619  total_loss: 0.3403  loss_cls: 0.05401  loss_box_reg: 0.1208  loss_rpn_cls: 0.05152  loss_rpn_loc: 0.1  time: 0.9447  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/11 00:06:35] d2.utils.events INFO:  eta: 1:08:30  iter: 19639  total_loss: 0.353  loss_cls: 0.06834  loss_box_reg: 0.129  loss_rpn_cls: 0.04785  loss_rpn_loc: 0.09864  time: 0.9447  data_time: 0.0132  lr: 0.002  max_mem: 19359M
[01/11 00:06:54] d2.utils.events INFO:  eta: 1:08:11  iter: 19659  total_loss: 0.3051  loss_cls: 0.05087  loss_box_reg: 0.1109  loss_rpn_cls: 0.04955  loss_rpn_loc: 0.09691  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:07:13] d2.utils.events INFO:  eta: 1:07:53  iter: 19679  total_loss: 0.3027  loss_cls: 0.05418  loss_box_reg: 0.1186  loss_rpn_cls: 0.04587  loss_rpn_loc: 0.09062  time: 0.9447  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/11 00:07:32] d2.utils.events INFO:  eta: 1:07:33  iter: 19699  total_loss: 0.3473  loss_cls: 0.0575  loss_box_reg: 0.1262  loss_rpn_cls: 0.05169  loss_rpn_loc: 0.1054  time: 0.9447  data_time: 0.0133  lr: 0.002  max_mem: 19359M
[01/11 00:07:51] d2.utils.events INFO:  eta: 1:07:15  iter: 19719  total_loss: 0.3314  loss_cls: 0.0555  loss_box_reg: 0.1165  loss_rpn_cls: 0.05294  loss_rpn_loc: 0.1056  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:08:10] d2.utils.events INFO:  eta: 1:06:56  iter: 19739  total_loss: 0.3133  loss_cls: 0.05426  loss_box_reg: 0.1153  loss_rpn_cls: 0.04896  loss_rpn_loc: 0.09061  time: 0.9447  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:08:29] d2.utils.events INFO:  eta: 1:06:37  iter: 19759  total_loss: 0.3739  loss_cls: 0.06399  loss_box_reg: 0.1328  loss_rpn_cls: 0.04633  loss_rpn_loc: 0.1116  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:08:47] d2.utils.events INFO:  eta: 1:06:18  iter: 19779  total_loss: 0.3283  loss_cls: 0.06213  loss_box_reg: 0.1231  loss_rpn_cls: 0.04472  loss_rpn_loc: 0.09813  time: 0.9447  data_time: 0.0103  lr: 0.002  max_mem: 19359M
[01/11 00:09:06] d2.utils.events INFO:  eta: 1:06:00  iter: 19799  total_loss: 0.3344  loss_cls: 0.05647  loss_box_reg: 0.1176  loss_rpn_cls: 0.04831  loss_rpn_loc: 0.09846  time: 0.9447  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:09:25] d2.utils.events INFO:  eta: 1:05:42  iter: 19819  total_loss: 0.3328  loss_cls: 0.05627  loss_box_reg: 0.1206  loss_rpn_cls: 0.0462  loss_rpn_loc: 0.1058  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:09:44] d2.utils.events INFO:  eta: 1:05:23  iter: 19839  total_loss: 0.3231  loss_cls: 0.05999  loss_box_reg: 0.1162  loss_rpn_cls: 0.04864  loss_rpn_loc: 0.08741  time: 0.9447  data_time: 0.0106  lr: 0.002  max_mem: 19359M
[01/11 00:10:03] d2.utils.events INFO:  eta: 1:05:05  iter: 19859  total_loss: 0.3211  loss_cls: 0.05749  loss_box_reg: 0.1232  loss_rpn_cls: 0.04835  loss_rpn_loc: 0.08927  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:10:22] d2.utils.events INFO:  eta: 1:04:46  iter: 19879  total_loss: 0.3408  loss_cls: 0.05812  loss_box_reg: 0.1227  loss_rpn_cls: 0.04879  loss_rpn_loc: 0.09814  time: 0.9447  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:10:40] d2.utils.events INFO:  eta: 1:04:27  iter: 19899  total_loss: 0.3315  loss_cls: 0.05695  loss_box_reg: 0.1209  loss_rpn_cls: 0.05015  loss_rpn_loc: 0.09812  time: 0.9447  data_time: 0.0137  lr: 0.002  max_mem: 19359M
[01/11 00:10:59] d2.utils.events INFO:  eta: 1:04:08  iter: 19919  total_loss: 0.3429  loss_cls: 0.06038  loss_box_reg: 0.1302  loss_rpn_cls: 0.04999  loss_rpn_loc: 0.0943  time: 0.9447  data_time: 0.0138  lr: 0.002  max_mem: 19359M
[01/11 00:11:18] d2.utils.events INFO:  eta: 1:03:50  iter: 19939  total_loss: 0.3653  loss_cls: 0.06637  loss_box_reg: 0.1463  loss_rpn_cls: 0.05533  loss_rpn_loc: 0.09735  time: 0.9447  data_time: 0.0103  lr: 0.002  max_mem: 19359M
[01/11 00:11:37] d2.utils.events INFO:  eta: 1:03:31  iter: 19959  total_loss: 0.3214  loss_cls: 0.05566  loss_box_reg: 0.1171  loss_rpn_cls: 0.05141  loss_rpn_loc: 0.09094  time: 0.9447  data_time: 0.0116  lr: 0.002  max_mem: 19359M
[01/11 00:11:56] d2.utils.events INFO:  eta: 1:03:14  iter: 19979  total_loss: 0.3261  loss_cls: 0.05278  loss_box_reg: 0.09942  loss_rpn_cls: 0.05059  loss_rpn_loc: 0.1012  time: 0.9447  data_time: 0.0121  lr: 0.002  max_mem: 19359M
[01/11 00:12:15] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_2_voc_R_50_C4_24k_densecl_coco_800ep/model_0019999.pth
[01/11 00:12:15] d2.utils.events INFO:  eta: 1:02:53  iter: 19999  total_loss: 0.3022  loss_cls: 0.05805  loss_box_reg: 0.1253  loss_rpn_cls: 0.04903  loss_rpn_loc: 0.08349  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:12:34] d2.utils.events INFO:  eta: 1:02:34  iter: 20019  total_loss: 0.3345  loss_cls: 0.05222  loss_box_reg: 0.1212  loss_rpn_cls: 0.05358  loss_rpn_loc: 0.1037  time: 0.9447  data_time: 0.0104  lr: 0.002  max_mem: 19359M
[01/11 00:12:53] d2.utils.events INFO:  eta: 1:02:16  iter: 20039  total_loss: 0.3304  loss_cls: 0.05164  loss_box_reg: 0.1202  loss_rpn_cls: 0.04927  loss_rpn_loc: 0.09182  time: 0.9447  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/11 00:13:12] d2.utils.events INFO:  eta: 1:01:57  iter: 20059  total_loss: 0.3699  loss_cls: 0.06454  loss_box_reg: 0.1402  loss_rpn_cls: 0.05424  loss_rpn_loc: 0.1096  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:13:31] d2.utils.events INFO:  eta: 1:01:38  iter: 20079  total_loss: 0.3363  loss_cls: 0.06173  loss_box_reg: 0.1334  loss_rpn_cls: 0.05126  loss_rpn_loc: 0.09618  time: 0.9447  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:13:50] d2.utils.events INFO:  eta: 1:01:19  iter: 20099  total_loss: 0.3405  loss_cls: 0.05553  loss_box_reg: 0.123  loss_rpn_cls: 0.04462  loss_rpn_loc: 0.1028  time: 0.9447  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:14:09] d2.utils.events INFO:  eta: 1:01:00  iter: 20119  total_loss: 0.3567  loss_cls: 0.06539  loss_box_reg: 0.131  loss_rpn_cls: 0.0492  loss_rpn_loc: 0.1051  time: 0.9447  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:14:28] d2.utils.events INFO:  eta: 1:00:42  iter: 20139  total_loss: 0.3417  loss_cls: 0.06006  loss_box_reg: 0.1278  loss_rpn_cls: 0.05107  loss_rpn_loc: 0.1004  time: 0.9447  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/11 00:14:47] d2.utils.events INFO:  eta: 1:00:22  iter: 20159  total_loss: 0.3547  loss_cls: 0.0606  loss_box_reg: 0.142  loss_rpn_cls: 0.05215  loss_rpn_loc: 0.09383  time: 0.9447  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/11 00:15:05] d2.utils.events INFO:  eta: 1:00:03  iter: 20179  total_loss: 0.3104  loss_cls: 0.05617  loss_box_reg: 0.1116  loss_rpn_cls: 0.04422  loss_rpn_loc: 0.09484  time: 0.9447  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/11 00:15:24] d2.utils.events INFO:  eta: 0:59:44  iter: 20199  total_loss: 0.3518  loss_cls: 0.06013  loss_box_reg: 0.1346  loss_rpn_cls: 0.05514  loss_rpn_loc: 0.09712  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:15:43] d2.utils.events INFO:  eta: 0:59:25  iter: 20219  total_loss: 0.3346  loss_cls: 0.05583  loss_box_reg: 0.1276  loss_rpn_cls: 0.05184  loss_rpn_loc: 0.09237  time: 0.9447  data_time: 0.0106  lr: 0.002  max_mem: 19359M
[01/11 00:16:02] d2.utils.events INFO:  eta: 0:59:06  iter: 20239  total_loss: 0.3224  loss_cls: 0.05755  loss_box_reg: 0.1253  loss_rpn_cls: 0.04677  loss_rpn_loc: 0.09756  time: 0.9447  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:16:21] d2.utils.events INFO:  eta: 0:58:47  iter: 20259  total_loss: 0.3259  loss_cls: 0.05901  loss_box_reg: 0.1184  loss_rpn_cls: 0.05227  loss_rpn_loc: 0.09321  time: 0.9447  data_time: 0.0131  lr: 0.002  max_mem: 19359M
[01/11 00:16:40] d2.utils.events INFO:  eta: 0:58:28  iter: 20279  total_loss: 0.31  loss_cls: 0.05675  loss_box_reg: 0.1236  loss_rpn_cls: 0.04395  loss_rpn_loc: 0.09912  time: 0.9447  data_time: 0.0107  lr: 0.002  max_mem: 19359M
[01/11 00:16:59] d2.utils.events INFO:  eta: 0:58:10  iter: 20299  total_loss: 0.3063  loss_cls: 0.05457  loss_box_reg: 0.118  loss_rpn_cls: 0.03878  loss_rpn_loc: 0.0887  time: 0.9447  data_time: 0.0131  lr: 0.002  max_mem: 19359M
[01/11 00:17:17] d2.utils.events INFO:  eta: 0:57:51  iter: 20319  total_loss: 0.3146  loss_cls: 0.05423  loss_box_reg: 0.1151  loss_rpn_cls: 0.04486  loss_rpn_loc: 0.09668  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:17:36] d2.utils.events INFO:  eta: 0:57:31  iter: 20339  total_loss: 0.3629  loss_cls: 0.06123  loss_box_reg: 0.1361  loss_rpn_cls: 0.04761  loss_rpn_loc: 0.1014  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:17:55] d2.utils.events INFO:  eta: 0:57:12  iter: 20359  total_loss: 0.3292  loss_cls: 0.05916  loss_box_reg: 0.1282  loss_rpn_cls: 0.04375  loss_rpn_loc: 0.09635  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:18:14] d2.utils.events INFO:  eta: 0:56:54  iter: 20379  total_loss: 0.3496  loss_cls: 0.06142  loss_box_reg: 0.1295  loss_rpn_cls: 0.04913  loss_rpn_loc: 0.09966  time: 0.9447  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:18:33] d2.utils.events INFO:  eta: 0:56:35  iter: 20399  total_loss: 0.3182  loss_cls: 0.05683  loss_box_reg: 0.1133  loss_rpn_cls: 0.04477  loss_rpn_loc: 0.09483  time: 0.9447  data_time: 0.0107  lr: 0.002  max_mem: 19359M
[01/11 00:18:52] d2.utils.events INFO:  eta: 0:56:16  iter: 20419  total_loss: 0.3094  loss_cls: 0.05895  loss_box_reg: 0.1177  loss_rpn_cls: 0.04703  loss_rpn_loc: 0.09372  time: 0.9447  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:19:11] d2.utils.events INFO:  eta: 0:55:57  iter: 20439  total_loss: 0.3612  loss_cls: 0.05987  loss_box_reg: 0.1299  loss_rpn_cls: 0.05094  loss_rpn_loc: 0.1097  time: 0.9447  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:19:30] d2.utils.events INFO:  eta: 0:55:38  iter: 20459  total_loss: 0.3113  loss_cls: 0.05881  loss_box_reg: 0.1141  loss_rpn_cls: 0.04962  loss_rpn_loc: 0.09757  time: 0.9447  data_time: 0.0116  lr: 0.002  max_mem: 19359M
[01/11 00:19:48] d2.utils.events INFO:  eta: 0:55:19  iter: 20479  total_loss: 0.3172  loss_cls: 0.04966  loss_box_reg: 0.1124  loss_rpn_cls: 0.04803  loss_rpn_loc: 0.1134  time: 0.9447  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:20:07] d2.utils.events INFO:  eta: 0:55:00  iter: 20499  total_loss: 0.2932  loss_cls: 0.05488  loss_box_reg: 0.1188  loss_rpn_cls: 0.04721  loss_rpn_loc: 0.09735  time: 0.9447  data_time: 0.0107  lr: 0.002  max_mem: 19359M
[01/11 00:20:26] d2.utils.events INFO:  eta: 0:54:42  iter: 20519  total_loss: 0.3099  loss_cls: 0.04465  loss_box_reg: 0.1011  loss_rpn_cls: 0.04637  loss_rpn_loc: 0.1086  time: 0.9447  data_time: 0.0128  lr: 0.002  max_mem: 19359M
[01/11 00:20:45] d2.utils.events INFO:  eta: 0:54:23  iter: 20539  total_loss: 0.3485  loss_cls: 0.05878  loss_box_reg: 0.1238  loss_rpn_cls: 0.04428  loss_rpn_loc: 0.09813  time: 0.9447  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:21:04] d2.utils.events INFO:  eta: 0:54:04  iter: 20559  total_loss: 0.3392  loss_cls: 0.05603  loss_box_reg: 0.1251  loss_rpn_cls: 0.05421  loss_rpn_loc: 0.09277  time: 0.9447  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:21:23] d2.utils.events INFO:  eta: 0:53:45  iter: 20579  total_loss: 0.3191  loss_cls: 0.04992  loss_box_reg: 0.1118  loss_rpn_cls: 0.04805  loss_rpn_loc: 0.1018  time: 0.9447  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/11 00:21:42] d2.utils.events INFO:  eta: 0:53:25  iter: 20599  total_loss: 0.3361  loss_cls: 0.05551  loss_box_reg: 0.119  loss_rpn_cls: 0.05358  loss_rpn_loc: 0.106  time: 0.9447  data_time: 0.0121  lr: 0.002  max_mem: 19359M
[01/11 00:22:00] d2.utils.events INFO:  eta: 0:53:06  iter: 20619  total_loss: 0.3667  loss_cls: 0.06005  loss_box_reg: 0.1329  loss_rpn_cls: 0.04754  loss_rpn_loc: 0.1046  time: 0.9446  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:22:19] d2.utils.events INFO:  eta: 0:52:47  iter: 20639  total_loss: 0.3219  loss_cls: 0.06149  loss_box_reg: 0.1275  loss_rpn_cls: 0.04418  loss_rpn_loc: 0.09269  time: 0.9446  data_time: 0.0130  lr: 0.002  max_mem: 19359M
[01/11 00:22:38] d2.utils.events INFO:  eta: 0:52:28  iter: 20659  total_loss: 0.342  loss_cls: 0.06329  loss_box_reg: 0.1282  loss_rpn_cls: 0.05166  loss_rpn_loc: 0.09631  time: 0.9446  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:22:57] d2.utils.events INFO:  eta: 0:52:09  iter: 20679  total_loss: 0.3302  loss_cls: 0.06012  loss_box_reg: 0.1311  loss_rpn_cls: 0.04883  loss_rpn_loc: 0.09466  time: 0.9446  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:23:16] d2.utils.events INFO:  eta: 0:51:51  iter: 20699  total_loss: 0.3217  loss_cls: 0.06293  loss_box_reg: 0.126  loss_rpn_cls: 0.04797  loss_rpn_loc: 0.09169  time: 0.9446  data_time: 0.0108  lr: 0.002  max_mem: 19359M
[01/11 00:23:35] d2.utils.events INFO:  eta: 0:51:32  iter: 20719  total_loss: 0.3228  loss_cls: 0.05461  loss_box_reg: 0.1233  loss_rpn_cls: 0.0423  loss_rpn_loc: 0.1086  time: 0.9446  data_time: 0.0099  lr: 0.002  max_mem: 19359M
[01/11 00:23:54] d2.utils.events INFO:  eta: 0:51:13  iter: 20739  total_loss: 0.3303  loss_cls: 0.05625  loss_box_reg: 0.1119  loss_rpn_cls: 0.05165  loss_rpn_loc: 0.09664  time: 0.9446  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:24:13] d2.utils.events INFO:  eta: 0:50:55  iter: 20759  total_loss: 0.3249  loss_cls: 0.05469  loss_box_reg: 0.1163  loss_rpn_cls: 0.04408  loss_rpn_loc: 0.1095  time: 0.9447  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/11 00:24:32] d2.utils.events INFO:  eta: 0:50:36  iter: 20779  total_loss: 0.3493  loss_cls: 0.06024  loss_box_reg: 0.1242  loss_rpn_cls: 0.05446  loss_rpn_loc: 0.09759  time: 0.9447  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:24:50] d2.utils.events INFO:  eta: 0:50:17  iter: 20799  total_loss: 0.3366  loss_cls: 0.0556  loss_box_reg: 0.1242  loss_rpn_cls: 0.04423  loss_rpn_loc: 0.1005  time: 0.9446  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:25:09] d2.utils.events INFO:  eta: 0:49:58  iter: 20819  total_loss: 0.331  loss_cls: 0.05782  loss_box_reg: 0.1229  loss_rpn_cls: 0.0515  loss_rpn_loc: 0.08967  time: 0.9446  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/11 00:25:28] d2.utils.events INFO:  eta: 0:49:39  iter: 20839  total_loss: 0.3228  loss_cls: 0.05491  loss_box_reg: 0.1131  loss_rpn_cls: 0.04952  loss_rpn_loc: 0.1056  time: 0.9446  data_time: 0.0130  lr: 0.002  max_mem: 19359M
[01/11 00:25:47] d2.utils.events INFO:  eta: 0:49:20  iter: 20859  total_loss: 0.3439  loss_cls: 0.05887  loss_box_reg: 0.1254  loss_rpn_cls: 0.05436  loss_rpn_loc: 0.1054  time: 0.9446  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:26:06] d2.utils.events INFO:  eta: 0:49:02  iter: 20879  total_loss: 0.3253  loss_cls: 0.05814  loss_box_reg: 0.1174  loss_rpn_cls: 0.04814  loss_rpn_loc: 0.09288  time: 0.9446  data_time: 0.0116  lr: 0.002  max_mem: 19359M
[01/11 00:26:25] d2.utils.events INFO:  eta: 0:48:43  iter: 20899  total_loss: 0.3296  loss_cls: 0.05933  loss_box_reg: 0.1229  loss_rpn_cls: 0.05253  loss_rpn_loc: 0.09541  time: 0.9446  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/11 00:26:44] d2.utils.events INFO:  eta: 0:48:24  iter: 20919  total_loss: 0.3219  loss_cls: 0.05773  loss_box_reg: 0.1184  loss_rpn_cls: 0.0472  loss_rpn_loc: 0.09616  time: 0.9446  data_time: 0.0115  lr: 0.002  max_mem: 19359M
[01/11 00:27:03] d2.utils.events INFO:  eta: 0:48:05  iter: 20939  total_loss: 0.3336  loss_cls: 0.06084  loss_box_reg: 0.1351  loss_rpn_cls: 0.0538  loss_rpn_loc: 0.09573  time: 0.9446  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:27:22] d2.utils.events INFO:  eta: 0:47:47  iter: 20959  total_loss: 0.3151  loss_cls: 0.05706  loss_box_reg: 0.1222  loss_rpn_cls: 0.04986  loss_rpn_loc: 0.1008  time: 0.9446  data_time: 0.0127  lr: 0.002  max_mem: 19359M
[01/11 00:27:41] d2.utils.events INFO:  eta: 0:47:28  iter: 20979  total_loss: 0.3526  loss_cls: 0.05886  loss_box_reg: 0.1252  loss_rpn_cls: 0.05074  loss_rpn_loc: 0.1154  time: 0.9446  data_time: 0.0157  lr: 0.002  max_mem: 19359M
[01/11 00:28:00] d2.utils.events INFO:  eta: 0:47:09  iter: 20999  total_loss: 0.326  loss_cls: 0.05309  loss_box_reg: 0.1217  loss_rpn_cls: 0.04974  loss_rpn_loc: 0.1046  time: 0.9447  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:28:18] d2.utils.events INFO:  eta: 0:46:51  iter: 21019  total_loss: 0.2987  loss_cls: 0.05594  loss_box_reg: 0.1208  loss_rpn_cls: 0.04266  loss_rpn_loc: 0.08626  time: 0.9447  data_time: 0.0135  lr: 0.002  max_mem: 19359M
[01/11 00:28:37] d2.utils.events INFO:  eta: 0:46:32  iter: 21039  total_loss: 0.3186  loss_cls: 0.05382  loss_box_reg: 0.1198  loss_rpn_cls: 0.04521  loss_rpn_loc: 0.09443  time: 0.9447  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:28:56] d2.utils.events INFO:  eta: 0:46:13  iter: 21059  total_loss: 0.3103  loss_cls: 0.0554  loss_box_reg: 0.1196  loss_rpn_cls: 0.04695  loss_rpn_loc: 0.09502  time: 0.9447  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:29:15] d2.utils.events INFO:  eta: 0:45:53  iter: 21079  total_loss: 0.3241  loss_cls: 0.05676  loss_box_reg: 0.1306  loss_rpn_cls: 0.04619  loss_rpn_loc: 0.106  time: 0.9446  data_time: 0.0127  lr: 0.002  max_mem: 19359M
[01/11 00:29:34] d2.utils.events INFO:  eta: 0:45:35  iter: 21099  total_loss: 0.301  loss_cls: 0.05364  loss_box_reg: 0.115  loss_rpn_cls: 0.04362  loss_rpn_loc: 0.09065  time: 0.9446  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/11 00:29:53] d2.utils.events INFO:  eta: 0:45:16  iter: 21119  total_loss: 0.3436  loss_cls: 0.05925  loss_box_reg: 0.1367  loss_rpn_cls: 0.04996  loss_rpn_loc: 0.1026  time: 0.9447  data_time: 0.0129  lr: 0.002  max_mem: 19359M
[01/11 00:30:12] d2.utils.events INFO:  eta: 0:44:56  iter: 21139  total_loss: 0.3444  loss_cls: 0.05796  loss_box_reg: 0.1364  loss_rpn_cls: 0.04805  loss_rpn_loc: 0.1062  time: 0.9446  data_time: 0.0116  lr: 0.002  max_mem: 19359M
[01/11 00:30:31] d2.utils.events INFO:  eta: 0:44:38  iter: 21159  total_loss: 0.3283  loss_cls: 0.05962  loss_box_reg: 0.1184  loss_rpn_cls: 0.04805  loss_rpn_loc: 0.1044  time: 0.9446  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:30:50] d2.utils.events INFO:  eta: 0:44:20  iter: 21179  total_loss: 0.3856  loss_cls: 0.0653  loss_box_reg: 0.1389  loss_rpn_cls: 0.05066  loss_rpn_loc: 0.1066  time: 0.9447  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:31:09] d2.utils.events INFO:  eta: 0:44:01  iter: 21199  total_loss: 0.3438  loss_cls: 0.05769  loss_box_reg: 0.1213  loss_rpn_cls: 0.0521  loss_rpn_loc: 0.1014  time: 0.9447  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/11 00:31:27] d2.utils.events INFO:  eta: 0:43:42  iter: 21219  total_loss: 0.31  loss_cls: 0.05234  loss_box_reg: 0.112  loss_rpn_cls: 0.05012  loss_rpn_loc: 0.09171  time: 0.9446  data_time: 0.0099  lr: 0.002  max_mem: 19359M
[01/11 00:31:46] d2.utils.events INFO:  eta: 0:43:23  iter: 21239  total_loss: 0.3424  loss_cls: 0.06738  loss_box_reg: 0.1303  loss_rpn_cls: 0.05029  loss_rpn_loc: 0.09336  time: 0.9446  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:32:05] d2.utils.events INFO:  eta: 0:43:03  iter: 21259  total_loss: 0.3392  loss_cls: 0.05765  loss_box_reg: 0.1279  loss_rpn_cls: 0.0457  loss_rpn_loc: 0.1068  time: 0.9446  data_time: 0.0098  lr: 0.002  max_mem: 19359M
[01/11 00:32:24] d2.utils.events INFO:  eta: 0:42:44  iter: 21279  total_loss: 0.3316  loss_cls: 0.05503  loss_box_reg: 0.1271  loss_rpn_cls: 0.04882  loss_rpn_loc: 0.09268  time: 0.9446  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/11 00:32:43] d2.utils.events INFO:  eta: 0:42:25  iter: 21299  total_loss: 0.3239  loss_cls: 0.05928  loss_box_reg: 0.1313  loss_rpn_cls: 0.0451  loss_rpn_loc: 0.0998  time: 0.9446  data_time: 0.0100  lr: 0.002  max_mem: 19359M
[01/11 00:33:01] d2.utils.events INFO:  eta: 0:42:07  iter: 21319  total_loss: 0.336  loss_cls: 0.0592  loss_box_reg: 0.1335  loss_rpn_cls: 0.0441  loss_rpn_loc: 0.1002  time: 0.9446  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:33:20] d2.utils.events INFO:  eta: 0:41:49  iter: 21339  total_loss: 0.3656  loss_cls: 0.06416  loss_box_reg: 0.1393  loss_rpn_cls: 0.05127  loss_rpn_loc: 0.09943  time: 0.9446  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:33:39] d2.utils.events INFO:  eta: 0:41:30  iter: 21359  total_loss: 0.3391  loss_cls: 0.05961  loss_box_reg: 0.1299  loss_rpn_cls: 0.05089  loss_rpn_loc: 0.0997  time: 0.9446  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:33:58] d2.utils.events INFO:  eta: 0:41:10  iter: 21379  total_loss: 0.3363  loss_cls: 0.05428  loss_box_reg: 0.1266  loss_rpn_cls: 0.04516  loss_rpn_loc: 0.1007  time: 0.9446  data_time: 0.0123  lr: 0.002  max_mem: 19359M
[01/11 00:34:17] d2.utils.events INFO:  eta: 0:40:52  iter: 21399  total_loss: 0.3496  loss_cls: 0.06186  loss_box_reg: 0.1316  loss_rpn_cls: 0.04797  loss_rpn_loc: 0.1076  time: 0.9446  data_time: 0.0110  lr: 0.002  max_mem: 19359M
[01/11 00:34:36] d2.utils.events INFO:  eta: 0:40:34  iter: 21419  total_loss: 0.3393  loss_cls: 0.05473  loss_box_reg: 0.1135  loss_rpn_cls: 0.05144  loss_rpn_loc: 0.1085  time: 0.9446  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:34:55] d2.utils.events INFO:  eta: 0:40:15  iter: 21439  total_loss: 0.3434  loss_cls: 0.05609  loss_box_reg: 0.1167  loss_rpn_cls: 0.05235  loss_rpn_loc: 0.09339  time: 0.9446  data_time: 0.0126  lr: 0.002  max_mem: 19359M
[01/11 00:35:14] d2.utils.events INFO:  eta: 0:39:57  iter: 21459  total_loss: 0.3403  loss_cls: 0.05563  loss_box_reg: 0.1171  loss_rpn_cls: 0.04876  loss_rpn_loc: 0.09705  time: 0.9446  data_time: 0.0123  lr: 0.002  max_mem: 19359M
[01/11 00:35:33] d2.utils.events INFO:  eta: 0:39:38  iter: 21479  total_loss: 0.3018  loss_cls: 0.05227  loss_box_reg: 0.117  loss_rpn_cls: 0.04697  loss_rpn_loc: 0.09326  time: 0.9446  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/11 00:35:51] d2.utils.events INFO:  eta: 0:39:19  iter: 21499  total_loss: 0.3102  loss_cls: 0.0485  loss_box_reg: 0.115  loss_rpn_cls: 0.04552  loss_rpn_loc: 0.1099  time: 0.9446  data_time: 0.0124  lr: 0.002  max_mem: 19359M
[01/11 00:36:10] d2.utils.events INFO:  eta: 0:39:00  iter: 21519  total_loss: 0.3334  loss_cls: 0.05212  loss_box_reg: 0.1221  loss_rpn_cls: 0.04649  loss_rpn_loc: 0.09901  time: 0.9446  data_time: 0.0128  lr: 0.002  max_mem: 19359M
[01/11 00:36:29] d2.utils.events INFO:  eta: 0:38:41  iter: 21539  total_loss: 0.3421  loss_cls: 0.06091  loss_box_reg: 0.124  loss_rpn_cls: 0.04439  loss_rpn_loc: 0.11  time: 0.9446  data_time: 0.0135  lr: 0.002  max_mem: 19359M
[01/11 00:36:48] d2.utils.events INFO:  eta: 0:38:23  iter: 21559  total_loss: 0.3274  loss_cls: 0.0549  loss_box_reg: 0.113  loss_rpn_cls: 0.04699  loss_rpn_loc: 0.1087  time: 0.9446  data_time: 0.0143  lr: 0.002  max_mem: 19359M
[01/11 00:37:07] d2.utils.events INFO:  eta: 0:38:04  iter: 21579  total_loss: 0.3127  loss_cls: 0.05146  loss_box_reg: 0.1155  loss_rpn_cls: 0.04082  loss_rpn_loc: 0.09465  time: 0.9446  data_time: 0.0101  lr: 0.002  max_mem: 19359M
[01/11 00:37:26] d2.utils.events INFO:  eta: 0:37:46  iter: 21599  total_loss: 0.3406  loss_cls: 0.0549  loss_box_reg: 0.1182  loss_rpn_cls: 0.05135  loss_rpn_loc: 0.09968  time: 0.9446  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:37:45] d2.utils.events INFO:  eta: 0:37:28  iter: 21619  total_loss: 0.3318  loss_cls: 0.05643  loss_box_reg: 0.123  loss_rpn_cls: 0.04864  loss_rpn_loc: 0.1018  time: 0.9446  data_time: 0.0130  lr: 0.002  max_mem: 19359M
[01/11 00:38:04] d2.utils.events INFO:  eta: 0:37:09  iter: 21639  total_loss: 0.3467  loss_cls: 0.05414  loss_box_reg: 0.1133  loss_rpn_cls: 0.05058  loss_rpn_loc: 0.1072  time: 0.9446  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/11 00:38:23] d2.utils.events INFO:  eta: 0:36:50  iter: 21659  total_loss: 0.3074  loss_cls: 0.04925  loss_box_reg: 0.1069  loss_rpn_cls: 0.04123  loss_rpn_loc: 0.09982  time: 0.9446  data_time: 0.0112  lr: 0.002  max_mem: 19359M
[01/11 00:38:42] d2.utils.events INFO:  eta: 0:36:31  iter: 21679  total_loss: 0.3208  loss_cls: 0.05372  loss_box_reg: 0.1159  loss_rpn_cls: 0.05036  loss_rpn_loc: 0.1097  time: 0.9446  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:39:01] d2.utils.events INFO:  eta: 0:36:12  iter: 21699  total_loss: 0.3137  loss_cls: 0.05242  loss_box_reg: 0.12  loss_rpn_cls: 0.04284  loss_rpn_loc: 0.0953  time: 0.9446  data_time: 0.0111  lr: 0.002  max_mem: 19359M
[01/11 00:39:20] d2.utils.events INFO:  eta: 0:35:53  iter: 21719  total_loss: 0.3147  loss_cls: 0.05393  loss_box_reg: 0.1294  loss_rpn_cls: 0.04148  loss_rpn_loc: 0.08877  time: 0.9446  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:39:38] d2.utils.events INFO:  eta: 0:35:34  iter: 21739  total_loss: 0.3086  loss_cls: 0.05607  loss_box_reg: 0.1167  loss_rpn_cls: 0.0483  loss_rpn_loc: 0.09773  time: 0.9446  data_time: 0.0122  lr: 0.002  max_mem: 19359M
[01/11 00:39:57] d2.utils.events INFO:  eta: 0:35:15  iter: 21759  total_loss: 0.3201  loss_cls: 0.05304  loss_box_reg: 0.1223  loss_rpn_cls: 0.03625  loss_rpn_loc: 0.09465  time: 0.9446  data_time: 0.0132  lr: 0.002  max_mem: 19359M
[01/11 00:40:16] d2.utils.events INFO:  eta: 0:34:56  iter: 21779  total_loss: 0.3133  loss_cls: 0.05175  loss_box_reg: 0.1163  loss_rpn_cls: 0.04836  loss_rpn_loc: 0.1017  time: 0.9446  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:40:35] d2.utils.events INFO:  eta: 0:34:38  iter: 21799  total_loss: 0.3439  loss_cls: 0.05711  loss_box_reg: 0.1248  loss_rpn_cls: 0.04723  loss_rpn_loc: 0.1017  time: 0.9446  data_time: 0.0116  lr: 0.002  max_mem: 19359M
[01/11 00:40:54] d2.utils.events INFO:  eta: 0:34:19  iter: 21819  total_loss: 0.3159  loss_cls: 0.05254  loss_box_reg: 0.1285  loss_rpn_cls: 0.04238  loss_rpn_loc: 0.1091  time: 0.9446  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:41:13] d2.utils.events INFO:  eta: 0:34:00  iter: 21839  total_loss: 0.3272  loss_cls: 0.05299  loss_box_reg: 0.1201  loss_rpn_cls: 0.04734  loss_rpn_loc: 0.09709  time: 0.9446  data_time: 0.0120  lr: 0.002  max_mem: 19359M
[01/11 00:41:32] d2.utils.events INFO:  eta: 0:33:41  iter: 21859  total_loss: 0.3217  loss_cls: 0.05545  loss_box_reg: 0.124  loss_rpn_cls: 0.04634  loss_rpn_loc: 0.1032  time: 0.9446  data_time: 0.0109  lr: 0.002  max_mem: 19359M
[01/11 00:41:51] d2.utils.events INFO:  eta: 0:33:23  iter: 21879  total_loss: 0.3153  loss_cls: 0.05009  loss_box_reg: 0.1135  loss_rpn_cls: 0.04836  loss_rpn_loc: 0.1005  time: 0.9446  data_time: 0.0118  lr: 0.002  max_mem: 19359M
[01/11 00:42:10] d2.utils.events INFO:  eta: 0:33:04  iter: 21899  total_loss: 0.3155  loss_cls: 0.05428  loss_box_reg: 0.1172  loss_rpn_cls: 0.04557  loss_rpn_loc: 0.09454  time: 0.9446  data_time: 0.0140  lr: 0.002  max_mem: 19359M
[01/11 00:42:29] d2.utils.events INFO:  eta: 0:32:45  iter: 21919  total_loss: 0.3441  loss_cls: 0.05855  loss_box_reg: 0.1421  loss_rpn_cls: 0.04704  loss_rpn_loc: 0.1101  time: 0.9446  data_time: 0.0119  lr: 0.002  max_mem: 19359M
[01/11 00:42:48] d2.utils.events INFO:  eta: 0:32:26  iter: 21939  total_loss: 0.3512  loss_cls: 0.0642  loss_box_reg: 0.1256  loss_rpn_cls: 0.04608  loss_rpn_loc: 0.1162  time: 0.9446  data_time: 0.0113  lr: 0.002  max_mem: 19359M
[01/11 00:43:06] d2.utils.events INFO:  eta: 0:32:07  iter: 21959  total_loss: 0.3355  loss_cls: 0.05591  loss_box_reg: 0.1251  loss_rpn_cls: 0.0401  loss_rpn_loc: 0.09718  time: 0.9446  data_time: 0.0114  lr: 0.002  max_mem: 19359M
[01/11 00:43:25] d2.utils.events INFO:  eta: 0:31:48  iter: 21979  total_loss: 0.3109  loss_cls: 0.05695  loss_box_reg: 0.1283  loss_rpn_cls: 0.04253  loss_rpn_loc: 0.0883  time: 0.9446  data_time: 0.0105  lr: 0.002  max_mem: 19359M
[01/11 00:43:44] d2.utils.events INFO:  eta: 0:31:29  iter: 21999  total_loss: 0.3326  loss_cls: 0.05721  loss_box_reg: 0.1145  loss_rpn_cls: 0.05471  loss_rpn_loc: 0.1143  time: 0.9446  data_time: 0.0138  lr: 0.002  max_mem: 19359M
[01/11 00:44:03] d2.utils.events INFO:  eta: 0:31:10  iter: 22019  total_loss: 0.2895  loss_cls: 0.05205  loss_box_reg: 0.1114  loss_rpn_cls: 0.0433  loss_rpn_loc: 0.09449  time: 0.9446  data_time: 0.0122  lr: 0.0002  max_mem: 19359M
[01/11 00:44:22] d2.utils.events INFO:  eta: 0:30:51  iter: 22039  total_loss: 0.3045  loss_cls: 0.05153  loss_box_reg: 0.1143  loss_rpn_cls: 0.04884  loss_rpn_loc: 0.08495  time: 0.9446  data_time: 0.0111  lr: 0.0002  max_mem: 19359M
[01/11 00:44:41] d2.utils.events INFO:  eta: 0:30:32  iter: 22059  total_loss: 0.3414  loss_cls: 0.05187  loss_box_reg: 0.114  loss_rpn_cls: 0.05307  loss_rpn_loc: 0.09619  time: 0.9446  data_time: 0.0121  lr: 0.0002  max_mem: 19359M
[01/11 00:45:00] d2.utils.events INFO:  eta: 0:30:13  iter: 22079  total_loss: 0.3274  loss_cls: 0.05028  loss_box_reg: 0.1179  loss_rpn_cls: 0.04942  loss_rpn_loc: 0.1067  time: 0.9446  data_time: 0.0122  lr: 0.0002  max_mem: 19359M
[01/11 00:45:19] d2.utils.events INFO:  eta: 0:29:54  iter: 22099  total_loss: 0.3292  loss_cls: 0.0553  loss_box_reg: 0.1276  loss_rpn_cls: 0.04684  loss_rpn_loc: 0.09967  time: 0.9446  data_time: 0.0115  lr: 0.0002  max_mem: 19359M
[01/11 00:45:38] d2.utils.events INFO:  eta: 0:29:35  iter: 22119  total_loss: 0.3477  loss_cls: 0.05556  loss_box_reg: 0.1334  loss_rpn_cls: 0.04816  loss_rpn_loc: 0.1103  time: 0.9446  data_time: 0.0110  lr: 0.0002  max_mem: 19359M
[01/11 00:45:57] d2.utils.events INFO:  eta: 0:29:16  iter: 22139  total_loss: 0.312  loss_cls: 0.05153  loss_box_reg: 0.1198  loss_rpn_cls: 0.04588  loss_rpn_loc: 0.095  time: 0.9446  data_time: 0.0127  lr: 0.0002  max_mem: 19359M
[01/11 00:46:15] d2.utils.events INFO:  eta: 0:28:57  iter: 22159  total_loss: 0.3081  loss_cls: 0.0522  loss_box_reg: 0.1141  loss_rpn_cls: 0.04159  loss_rpn_loc: 0.1004  time: 0.9446  data_time: 0.0113  lr: 0.0002  max_mem: 19359M
[01/11 00:46:34] d2.utils.events INFO:  eta: 0:28:38  iter: 22179  total_loss: 0.3174  loss_cls: 0.05216  loss_box_reg: 0.1069  loss_rpn_cls: 0.04285  loss_rpn_loc: 0.09275  time: 0.9446  data_time: 0.0127  lr: 0.0002  max_mem: 19359M
[01/11 00:46:53] d2.utils.events INFO:  eta: 0:28:19  iter: 22199  total_loss: 0.31  loss_cls: 0.05325  loss_box_reg: 0.114  loss_rpn_cls: 0.03949  loss_rpn_loc: 0.09934  time: 0.9446  data_time: 0.0118  lr: 0.0002  max_mem: 19359M
